
project1_stage3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  080051dc  080051dc  000061dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005438  08005438  00007184  2**0
                  CONTENTS
  4 .ARM          00000008  08005438  08005438  00006438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005440  08005440  00007184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005440  08005440  00006440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005444  08005444  00006444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08005448  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000184  080055cc  00007184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  080055cc  00007418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6c7  00000000  00000000  000071ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002203  00000000  00000000  00014874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00016a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a30  00000000  00000000  00017790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001886f  00000000  00000000  000181c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a9a  00000000  00000000  00030a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089ece  00000000  00000000  000414c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb397  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041fc  00000000  00000000  000cb3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000cf5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000184 	.word	0x20000184
 8000128:	00000000 	.word	0x00000000
 800012c:	080051c4 	.word	0x080051c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000188 	.word	0x20000188
 8000148:	080051c4 	.word	0x080051c4

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <Control_DOOR>:
//	door->id = atoi(detail[1]);
//
//	convert_gpio(&door->timer, &door->channel, &door->gpio_port, &door->gpio_pin, detail[2]);
//	DOOR_MspInit(door);
//}
void Control_DOOR(Door *door){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	if(door->status == STATUS_ON){
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	785b      	ldrb	r3, [r3, #1]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d169      	bne.n	8000254 <Control_DOOR+0xe4>
		if(door->timer == TIM1){
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	685b      	ldr	r3, [r3, #4]
 8000184:	4a6b      	ldr	r2, [pc, #428]	@ (8000334 <Control_DOOR+0x1c4>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d11f      	bne.n	80001ca <Control_DOOR+0x5a>
			__HAL_TIM_SET_COMPARE(&htim1, door->channel, 250);
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	689b      	ldr	r3, [r3, #8]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d104      	bne.n	800019c <Control_DOOR+0x2c>
 8000192:	4b69      	ldr	r3, [pc, #420]	@ (8000338 <Control_DOOR+0x1c8>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	22fa      	movs	r2, #250	@ 0xfa
 8000198:	635a      	str	r2, [r3, #52]	@ 0x34
		}
		else{
			__HAL_TIM_SET_COMPARE(&htim3, door->channel, 50);
		}
	}
}
 800019a:	e0c5      	b.n	8000328 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim1, door->channel, 250);
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	689b      	ldr	r3, [r3, #8]
 80001a0:	2b04      	cmp	r3, #4
 80001a2:	d104      	bne.n	80001ae <Control_DOOR+0x3e>
 80001a4:	4b64      	ldr	r3, [pc, #400]	@ (8000338 <Control_DOOR+0x1c8>)
 80001a6:	681a      	ldr	r2, [r3, #0]
 80001a8:	23fa      	movs	r3, #250	@ 0xfa
 80001aa:	6393      	str	r3, [r2, #56]	@ 0x38
 80001ac:	e0bc      	b.n	8000328 <Control_DOOR+0x1b8>
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	689b      	ldr	r3, [r3, #8]
 80001b2:	2b08      	cmp	r3, #8
 80001b4:	d104      	bne.n	80001c0 <Control_DOOR+0x50>
 80001b6:	4b60      	ldr	r3, [pc, #384]	@ (8000338 <Control_DOOR+0x1c8>)
 80001b8:	681a      	ldr	r2, [r3, #0]
 80001ba:	23fa      	movs	r3, #250	@ 0xfa
 80001bc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80001be:	e0b3      	b.n	8000328 <Control_DOOR+0x1b8>
 80001c0:	4b5d      	ldr	r3, [pc, #372]	@ (8000338 <Control_DOOR+0x1c8>)
 80001c2:	681a      	ldr	r2, [r3, #0]
 80001c4:	23fa      	movs	r3, #250	@ 0xfa
 80001c6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80001c8:	e0ae      	b.n	8000328 <Control_DOOR+0x1b8>
		else if(door->timer == TIM2){
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	685b      	ldr	r3, [r3, #4]
 80001ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80001d2:	d11f      	bne.n	8000214 <Control_DOOR+0xa4>
			__HAL_TIM_SET_COMPARE(&htim2, door->channel, 250);
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	689b      	ldr	r3, [r3, #8]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d104      	bne.n	80001e6 <Control_DOOR+0x76>
 80001dc:	4b57      	ldr	r3, [pc, #348]	@ (800033c <Control_DOOR+0x1cc>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	22fa      	movs	r2, #250	@ 0xfa
 80001e2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80001e4:	e0a0      	b.n	8000328 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim2, door->channel, 250);
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	689b      	ldr	r3, [r3, #8]
 80001ea:	2b04      	cmp	r3, #4
 80001ec:	d104      	bne.n	80001f8 <Control_DOOR+0x88>
 80001ee:	4b53      	ldr	r3, [pc, #332]	@ (800033c <Control_DOOR+0x1cc>)
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	23fa      	movs	r3, #250	@ 0xfa
 80001f4:	6393      	str	r3, [r2, #56]	@ 0x38
 80001f6:	e097      	b.n	8000328 <Control_DOOR+0x1b8>
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	689b      	ldr	r3, [r3, #8]
 80001fc:	2b08      	cmp	r3, #8
 80001fe:	d104      	bne.n	800020a <Control_DOOR+0x9a>
 8000200:	4b4e      	ldr	r3, [pc, #312]	@ (800033c <Control_DOOR+0x1cc>)
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	23fa      	movs	r3, #250	@ 0xfa
 8000206:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000208:	e08e      	b.n	8000328 <Control_DOOR+0x1b8>
 800020a:	4b4c      	ldr	r3, [pc, #304]	@ (800033c <Control_DOOR+0x1cc>)
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	23fa      	movs	r3, #250	@ 0xfa
 8000210:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000212:	e089      	b.n	8000328 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim3, door->channel, 250);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	689b      	ldr	r3, [r3, #8]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d104      	bne.n	8000226 <Control_DOOR+0xb6>
 800021c:	4b48      	ldr	r3, [pc, #288]	@ (8000340 <Control_DOOR+0x1d0>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	22fa      	movs	r2, #250	@ 0xfa
 8000222:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000224:	e080      	b.n	8000328 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim3, door->channel, 250);
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	689b      	ldr	r3, [r3, #8]
 800022a:	2b04      	cmp	r3, #4
 800022c:	d104      	bne.n	8000238 <Control_DOOR+0xc8>
 800022e:	4b44      	ldr	r3, [pc, #272]	@ (8000340 <Control_DOOR+0x1d0>)
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	23fa      	movs	r3, #250	@ 0xfa
 8000234:	6393      	str	r3, [r2, #56]	@ 0x38
 8000236:	e077      	b.n	8000328 <Control_DOOR+0x1b8>
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	2b08      	cmp	r3, #8
 800023e:	d104      	bne.n	800024a <Control_DOOR+0xda>
 8000240:	4b3f      	ldr	r3, [pc, #252]	@ (8000340 <Control_DOOR+0x1d0>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	23fa      	movs	r3, #250	@ 0xfa
 8000246:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000248:	e06e      	b.n	8000328 <Control_DOOR+0x1b8>
 800024a:	4b3d      	ldr	r3, [pc, #244]	@ (8000340 <Control_DOOR+0x1d0>)
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	23fa      	movs	r3, #250	@ 0xfa
 8000250:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000252:	e069      	b.n	8000328 <Control_DOOR+0x1b8>
		if(door->timer == TIM1){
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	4a36      	ldr	r2, [pc, #216]	@ (8000334 <Control_DOOR+0x1c4>)
 800025a:	4293      	cmp	r3, r2
 800025c:	d11f      	bne.n	800029e <Control_DOOR+0x12e>
			__HAL_TIM_SET_COMPARE(&htim1, door->channel, 50);
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d104      	bne.n	8000270 <Control_DOOR+0x100>
 8000266:	4b34      	ldr	r3, [pc, #208]	@ (8000338 <Control_DOOR+0x1c8>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2232      	movs	r2, #50	@ 0x32
 800026c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800026e:	e05b      	b.n	8000328 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim1, door->channel, 50);
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	689b      	ldr	r3, [r3, #8]
 8000274:	2b04      	cmp	r3, #4
 8000276:	d104      	bne.n	8000282 <Control_DOOR+0x112>
 8000278:	4b2f      	ldr	r3, [pc, #188]	@ (8000338 <Control_DOOR+0x1c8>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	2332      	movs	r3, #50	@ 0x32
 800027e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000280:	e052      	b.n	8000328 <Control_DOOR+0x1b8>
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	689b      	ldr	r3, [r3, #8]
 8000286:	2b08      	cmp	r3, #8
 8000288:	d104      	bne.n	8000294 <Control_DOOR+0x124>
 800028a:	4b2b      	ldr	r3, [pc, #172]	@ (8000338 <Control_DOOR+0x1c8>)
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	2332      	movs	r3, #50	@ 0x32
 8000290:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000292:	e049      	b.n	8000328 <Control_DOOR+0x1b8>
 8000294:	4b28      	ldr	r3, [pc, #160]	@ (8000338 <Control_DOOR+0x1c8>)
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	2332      	movs	r3, #50	@ 0x32
 800029a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800029c:	e044      	b.n	8000328 <Control_DOOR+0x1b8>
		else if(door->timer == TIM2){
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80002a6:	d11f      	bne.n	80002e8 <Control_DOOR+0x178>
			__HAL_TIM_SET_COMPARE(&htim2, door->channel, 50);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d104      	bne.n	80002ba <Control_DOOR+0x14a>
 80002b0:	4b22      	ldr	r3, [pc, #136]	@ (800033c <Control_DOOR+0x1cc>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2232      	movs	r2, #50	@ 0x32
 80002b6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002b8:	e036      	b.n	8000328 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim2, door->channel, 50);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	2b04      	cmp	r3, #4
 80002c0:	d104      	bne.n	80002cc <Control_DOOR+0x15c>
 80002c2:	4b1e      	ldr	r3, [pc, #120]	@ (800033c <Control_DOOR+0x1cc>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	2332      	movs	r3, #50	@ 0x32
 80002c8:	6393      	str	r3, [r2, #56]	@ 0x38
 80002ca:	e02d      	b.n	8000328 <Control_DOOR+0x1b8>
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	2b08      	cmp	r3, #8
 80002d2:	d104      	bne.n	80002de <Control_DOOR+0x16e>
 80002d4:	4b19      	ldr	r3, [pc, #100]	@ (800033c <Control_DOOR+0x1cc>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	2332      	movs	r3, #50	@ 0x32
 80002da:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80002dc:	e024      	b.n	8000328 <Control_DOOR+0x1b8>
 80002de:	4b17      	ldr	r3, [pc, #92]	@ (800033c <Control_DOOR+0x1cc>)
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	2332      	movs	r3, #50	@ 0x32
 80002e4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80002e6:	e01f      	b.n	8000328 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim3, door->channel, 50);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d104      	bne.n	80002fa <Control_DOOR+0x18a>
 80002f0:	4b13      	ldr	r3, [pc, #76]	@ (8000340 <Control_DOOR+0x1d0>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2232      	movs	r2, #50	@ 0x32
 80002f6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002f8:	e016      	b.n	8000328 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim3, door->channel, 50);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	2b04      	cmp	r3, #4
 8000300:	d104      	bne.n	800030c <Control_DOOR+0x19c>
 8000302:	4b0f      	ldr	r3, [pc, #60]	@ (8000340 <Control_DOOR+0x1d0>)
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	2332      	movs	r3, #50	@ 0x32
 8000308:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800030a:	e00d      	b.n	8000328 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim3, door->channel, 50);
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	2b08      	cmp	r3, #8
 8000312:	d104      	bne.n	800031e <Control_DOOR+0x1ae>
 8000314:	4b0a      	ldr	r3, [pc, #40]	@ (8000340 <Control_DOOR+0x1d0>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	2332      	movs	r3, #50	@ 0x32
 800031a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800031c:	e004      	b.n	8000328 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim3, door->channel, 50);
 800031e:	4b08      	ldr	r3, [pc, #32]	@ (8000340 <Control_DOOR+0x1d0>)
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	2332      	movs	r3, #50	@ 0x32
 8000324:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000326:	e7ff      	b.n	8000328 <Control_DOOR+0x1b8>
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	40012c00 	.word	0x40012c00
 8000338:	200001a0 	.word	0x200001a0
 800033c:	200001e8 	.word	0x200001e8
 8000340:	20000230 	.word	0x20000230

08000344 <Control_LED_FAN>:
//	device->id = atoi(detail[1]);
//
//	convert_gpio(&device->timer, &device->channel, &device->gpio_port, &device->gpio_pin, detail[2]);
//	LED_FAN_MspInit(device);
//}
void Control_LED_FAN(Led_Fan *device){
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	if(device->timer == TIM1){
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	4a40      	ldr	r2, [pc, #256]	@ (8000454 <Control_LED_FAN+0x110>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d126      	bne.n	80003a4 <Control_LED_FAN+0x60>
		__HAL_TIM_SET_COMPARE(&htim1, device->channel, device->brightness);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d105      	bne.n	800036a <Control_LED_FAN+0x26>
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	885a      	ldrh	r2, [r3, #2]
 8000362:	4b3d      	ldr	r3, [pc, #244]	@ (8000458 <Control_LED_FAN+0x114>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2, device->channel, device->brightness);
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim3, device->channel, device->brightness);
	}
}
 8000368:	e06f      	b.n	800044a <Control_LED_FAN+0x106>
		__HAL_TIM_SET_COMPARE(&htim1, device->channel, device->brightness);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	2b04      	cmp	r3, #4
 8000370:	d106      	bne.n	8000380 <Control_LED_FAN+0x3c>
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	8859      	ldrh	r1, [r3, #2]
 8000376:	4b38      	ldr	r3, [pc, #224]	@ (8000458 <Control_LED_FAN+0x114>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	460b      	mov	r3, r1
 800037c:	6393      	str	r3, [r2, #56]	@ 0x38
 800037e:	e064      	b.n	800044a <Control_LED_FAN+0x106>
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	2b08      	cmp	r3, #8
 8000386:	d106      	bne.n	8000396 <Control_LED_FAN+0x52>
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	8859      	ldrh	r1, [r3, #2]
 800038c:	4b32      	ldr	r3, [pc, #200]	@ (8000458 <Control_LED_FAN+0x114>)
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	460b      	mov	r3, r1
 8000392:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000394:	e059      	b.n	800044a <Control_LED_FAN+0x106>
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	8859      	ldrh	r1, [r3, #2]
 800039a:	4b2f      	ldr	r3, [pc, #188]	@ (8000458 <Control_LED_FAN+0x114>)
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	460b      	mov	r3, r1
 80003a0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80003a2:	e052      	b.n	800044a <Control_LED_FAN+0x106>
	else if(device->timer == TIM2){
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80003ac:	d126      	bne.n	80003fc <Control_LED_FAN+0xb8>
		__HAL_TIM_SET_COMPARE(&htim2, device->channel, device->brightness);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d105      	bne.n	80003c2 <Control_LED_FAN+0x7e>
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	885a      	ldrh	r2, [r3, #2]
 80003ba:	4b28      	ldr	r3, [pc, #160]	@ (800045c <Control_LED_FAN+0x118>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80003c0:	e043      	b.n	800044a <Control_LED_FAN+0x106>
		__HAL_TIM_SET_COMPARE(&htim2, device->channel, device->brightness);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	689b      	ldr	r3, [r3, #8]
 80003c6:	2b04      	cmp	r3, #4
 80003c8:	d106      	bne.n	80003d8 <Control_LED_FAN+0x94>
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	8859      	ldrh	r1, [r3, #2]
 80003ce:	4b23      	ldr	r3, [pc, #140]	@ (800045c <Control_LED_FAN+0x118>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	460b      	mov	r3, r1
 80003d4:	6393      	str	r3, [r2, #56]	@ 0x38
 80003d6:	e038      	b.n	800044a <Control_LED_FAN+0x106>
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	2b08      	cmp	r3, #8
 80003de:	d106      	bne.n	80003ee <Control_LED_FAN+0xaa>
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	8859      	ldrh	r1, [r3, #2]
 80003e4:	4b1d      	ldr	r3, [pc, #116]	@ (800045c <Control_LED_FAN+0x118>)
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	460b      	mov	r3, r1
 80003ea:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80003ec:	e02d      	b.n	800044a <Control_LED_FAN+0x106>
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	8859      	ldrh	r1, [r3, #2]
 80003f2:	4b1a      	ldr	r3, [pc, #104]	@ (800045c <Control_LED_FAN+0x118>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	460b      	mov	r3, r1
 80003f8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80003fa:	e026      	b.n	800044a <Control_LED_FAN+0x106>
		__HAL_TIM_SET_COMPARE(&htim3, device->channel, device->brightness);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	689b      	ldr	r3, [r3, #8]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d105      	bne.n	8000410 <Control_LED_FAN+0xcc>
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	885a      	ldrh	r2, [r3, #2]
 8000408:	4b15      	ldr	r3, [pc, #84]	@ (8000460 <Control_LED_FAN+0x11c>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800040e:	e01c      	b.n	800044a <Control_LED_FAN+0x106>
		__HAL_TIM_SET_COMPARE(&htim3, device->channel, device->brightness);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	2b04      	cmp	r3, #4
 8000416:	d106      	bne.n	8000426 <Control_LED_FAN+0xe2>
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	8859      	ldrh	r1, [r3, #2]
 800041c:	4b10      	ldr	r3, [pc, #64]	@ (8000460 <Control_LED_FAN+0x11c>)
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	460b      	mov	r3, r1
 8000422:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000424:	e011      	b.n	800044a <Control_LED_FAN+0x106>
		__HAL_TIM_SET_COMPARE(&htim3, device->channel, device->brightness);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	689b      	ldr	r3, [r3, #8]
 800042a:	2b08      	cmp	r3, #8
 800042c:	d106      	bne.n	800043c <Control_LED_FAN+0xf8>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	8859      	ldrh	r1, [r3, #2]
 8000432:	4b0b      	ldr	r3, [pc, #44]	@ (8000460 <Control_LED_FAN+0x11c>)
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	460b      	mov	r3, r1
 8000438:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800043a:	e006      	b.n	800044a <Control_LED_FAN+0x106>
		__HAL_TIM_SET_COMPARE(&htim3, device->channel, device->brightness);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	8859      	ldrh	r1, [r3, #2]
 8000440:	4b07      	ldr	r3, [pc, #28]	@ (8000460 <Control_LED_FAN+0x11c>)
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	460b      	mov	r3, r1
 8000446:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000448:	e7ff      	b.n	800044a <Control_LED_FAN+0x106>
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	40012c00 	.word	0x40012c00
 8000458:	200001a0 	.word	0x200001a0
 800045c:	200001e8 	.word	0x200001e8
 8000460:	20000230 	.word	0x20000230

08000464 <main>:
static void MX_USART1_UART_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM1_Init(void);

int main(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000468:	f001 f8be 	bl	80015e8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800046c:	f000 f87e 	bl	800056c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000470:	f000 fa74 	bl	800095c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000474:	f000 f950 	bl	8000718 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000478:	f000 fa46 	bl	8000908 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800047c:	f000 f9c8 	bl	8000810 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000480:	f000 f8ba 	bl	80005f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK){
 8000484:	2100      	movs	r1, #0
 8000486:	4833      	ldr	r0, [pc, #204]	@ (8000554 <main+0xf0>)
 8000488:	f002 f902 	bl	8002690 <HAL_TIM_PWM_Start>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <main+0x32>
	  Error_Handler();
 8000492:	f000 fdfb 	bl	800108c <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK){
 8000496:	210c      	movs	r1, #12
 8000498:	482e      	ldr	r0, [pc, #184]	@ (8000554 <main+0xf0>)
 800049a:	f002 f8f9 	bl	8002690 <HAL_TIM_PWM_Start>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <main+0x44>
	  Error_Handler();
 80004a4:	f000 fdf2 	bl	800108c <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK){
 80004a8:	2100      	movs	r1, #0
 80004aa:	482b      	ldr	r0, [pc, #172]	@ (8000558 <main+0xf4>)
 80004ac:	f002 f8f0 	bl	8002690 <HAL_TIM_PWM_Start>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <main+0x56>
  	  Error_Handler();
 80004b6:	f000 fde9 	bl	800108c <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK){
 80004ba:	2104      	movs	r1, #4
 80004bc:	4826      	ldr	r0, [pc, #152]	@ (8000558 <main+0xf4>)
 80004be:	f002 f8e7 	bl	8002690 <HAL_TIM_PWM_Start>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <main+0x68>
  	  Error_Handler();
 80004c8:	f000 fde0 	bl	800108c <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3) != HAL_OK){
 80004cc:	2108      	movs	r1, #8
 80004ce:	4822      	ldr	r0, [pc, #136]	@ (8000558 <main+0xf4>)
 80004d0:	f002 f8de 	bl	8002690 <HAL_TIM_PWM_Start>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <main+0x7a>
  	  Error_Handler();
 80004da:	f000 fdd7 	bl	800108c <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK){
 80004de:	210c      	movs	r1, #12
 80004e0:	481d      	ldr	r0, [pc, #116]	@ (8000558 <main+0xf4>)
 80004e2:	f002 f8d5 	bl	8002690 <HAL_TIM_PWM_Start>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <main+0x8c>
  	  Error_Handler();
 80004ec:	f000 fdce 	bl	800108c <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK){
 80004f0:	2100      	movs	r1, #0
 80004f2:	481a      	ldr	r0, [pc, #104]	@ (800055c <main+0xf8>)
 80004f4:	f002 f8cc 	bl	8002690 <HAL_TIM_PWM_Start>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <main+0x9e>
  	  Error_Handler();
 80004fe:	f000 fdc5 	bl	800108c <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK){
 8000502:	2104      	movs	r1, #4
 8000504:	4815      	ldr	r0, [pc, #84]	@ (800055c <main+0xf8>)
 8000506:	f002 f8c3 	bl	8002690 <HAL_TIM_PWM_Start>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <main+0xb0>
  	  Error_Handler();
 8000510:	f000 fdbc 	bl	800108c <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK){
 8000514:	2108      	movs	r1, #8
 8000516:	4811      	ldr	r0, [pc, #68]	@ (800055c <main+0xf8>)
 8000518:	f002 f8ba 	bl	8002690 <HAL_TIM_PWM_Start>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <main+0xc2>
  	  Error_Handler();
 8000522:	f000 fdb3 	bl	800108c <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK){
 8000526:	210c      	movs	r1, #12
 8000528:	480c      	ldr	r0, [pc, #48]	@ (800055c <main+0xf8>)
 800052a:	f002 f8b1 	bl	8002690 <HAL_TIM_PWM_Start>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <main+0xd4>
  	  Error_Handler();
 8000534:	f000 fdaa 	bl	800108c <Error_Handler>
  }

  HAL_UART_Receive_IT(&huart1, &size, 1);
 8000538:	2201      	movs	r2, #1
 800053a:	4909      	ldr	r1, [pc, #36]	@ (8000560 <main+0xfc>)
 800053c:	4809      	ldr	r0, [pc, #36]	@ (8000564 <main+0x100>)
 800053e:	f002 fe30 	bl	80031a2 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, ENABLE);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000548:	4807      	ldr	r0, [pc, #28]	@ (8000568 <main+0x104>)
 800054a:	f001 fc0f 	bl	8001d6c <HAL_GPIO_WritePin>
  /* Infinite loop */
  while (1)
 800054e:	bf00      	nop
 8000550:	e7fd      	b.n	800054e <main+0xea>
 8000552:	bf00      	nop
 8000554:	200001a0 	.word	0x200001a0
 8000558:	200001e8 	.word	0x200001e8
 800055c:	20000230 	.word	0x20000230
 8000560:	200002c0 	.word	0x200002c0
 8000564:	20000278 	.word	0x20000278
 8000568:	40011000 	.word	0x40011000

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b090      	sub	sp, #64	@ 0x40
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0318 	add.w	r3, r7, #24
 8000576:	2228      	movs	r2, #40	@ 0x28
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 fe0b 	bl	8004196 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058e:	2301      	movs	r3, #1
 8000590:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000592:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000596:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a0:	2302      	movs	r3, #2
 80005a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005aa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0318 	add.w	r3, r7, #24
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fc0b 	bl	8001dd0 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005c0:	f000 fd64 	bl	800108c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2302      	movs	r3, #2
 80005ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2102      	movs	r1, #2
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fe78 	bl	80022d4 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ea:	f000 fd4f 	bl	800108c <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3740      	adds	r7, #64	@ 0x40
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b092      	sub	sp, #72	@ 0x48
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
 8000618:	615a      	str	r2, [r3, #20]
 800061a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2220      	movs	r2, #32
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fdb7 	bl	8004196 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000628:	4b39      	ldr	r3, [pc, #228]	@ (8000710 <MX_TIM1_Init+0x118>)
 800062a:	4a3a      	ldr	r2, [pc, #232]	@ (8000714 <MX_TIM1_Init+0x11c>)
 800062c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 800062e:	4b38      	ldr	r3, [pc, #224]	@ (8000710 <MX_TIM1_Init+0x118>)
 8000630:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8000634:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000636:	4b36      	ldr	r3, [pc, #216]	@ (8000710 <MX_TIM1_Init+0x118>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800063c:	4b34      	ldr	r3, [pc, #208]	@ (8000710 <MX_TIM1_Init+0x118>)
 800063e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000642:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000644:	4b32      	ldr	r3, [pc, #200]	@ (8000710 <MX_TIM1_Init+0x118>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800064a:	4b31      	ldr	r3, [pc, #196]	@ (8000710 <MX_TIM1_Init+0x118>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000650:	4b2f      	ldr	r3, [pc, #188]	@ (8000710 <MX_TIM1_Init+0x118>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000656:	482e      	ldr	r0, [pc, #184]	@ (8000710 <MX_TIM1_Init+0x118>)
 8000658:	f001 ffca 	bl	80025f0 <HAL_TIM_PWM_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000662:	f000 fd13 	bl	800108c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000666:	2300      	movs	r3, #0
 8000668:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066a:	2300      	movs	r3, #0
 800066c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800066e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000672:	4619      	mov	r1, r3
 8000674:	4826      	ldr	r0, [pc, #152]	@ (8000710 <MX_TIM1_Init+0x118>)
 8000676:	f002 fb79 	bl	8002d6c <HAL_TIMEx_MasterConfigSynchronization>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000680:	f000 fd04 	bl	800108c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000684:	2360      	movs	r3, #96	@ 0x60
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800068c:	2300      	movs	r3, #0
 800068e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000690:	2300      	movs	r3, #0
 8000692:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000698:	2300      	movs	r3, #0
 800069a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800069c:	2300      	movs	r3, #0
 800069e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006a4:	2200      	movs	r2, #0
 80006a6:	4619      	mov	r1, r3
 80006a8:	4819      	ldr	r0, [pc, #100]	@ (8000710 <MX_TIM1_Init+0x118>)
 80006aa:	f002 f88d 	bl	80027c8 <HAL_TIM_PWM_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80006b4:	f000 fcea 	bl	800108c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006bc:	220c      	movs	r2, #12
 80006be:	4619      	mov	r1, r3
 80006c0:	4813      	ldr	r0, [pc, #76]	@ (8000710 <MX_TIM1_Init+0x118>)
 80006c2:	f002 f881 	bl	80027c8 <HAL_TIM_PWM_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80006cc:	f000 fcde 	bl	800108c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	4619      	mov	r1, r3
 80006f2:	4807      	ldr	r0, [pc, #28]	@ (8000710 <MX_TIM1_Init+0x118>)
 80006f4:	f002 fb92 	bl	8002e1c <HAL_TIMEx_ConfigBreakDeadTime>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80006fe:	f000 fcc5 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000702:	4803      	ldr	r0, [pc, #12]	@ (8000710 <MX_TIM1_Init+0x118>)
 8000704:	f000 fd5e 	bl	80011c4 <HAL_TIM_MspPostInit>

}
 8000708:	bf00      	nop
 800070a:	3748      	adds	r7, #72	@ 0x48
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200001a0 	.word	0x200001a0
 8000714:	40012c00 	.word	0x40012c00

08000718 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	@ 0x28
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
 8000736:	615a      	str	r2, [r3, #20]
 8000738:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800073a:	4b34      	ldr	r3, [pc, #208]	@ (800080c <MX_TIM2_Init+0xf4>)
 800073c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000740:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 8000742:	4b32      	ldr	r3, [pc, #200]	@ (800080c <MX_TIM2_Init+0xf4>)
 8000744:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8000748:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074a:	4b30      	ldr	r3, [pc, #192]	@ (800080c <MX_TIM2_Init+0xf4>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000750:	4b2e      	ldr	r3, [pc, #184]	@ (800080c <MX_TIM2_Init+0xf4>)
 8000752:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000756:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000758:	4b2c      	ldr	r3, [pc, #176]	@ (800080c <MX_TIM2_Init+0xf4>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075e:	4b2b      	ldr	r3, [pc, #172]	@ (800080c <MX_TIM2_Init+0xf4>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000764:	4829      	ldr	r0, [pc, #164]	@ (800080c <MX_TIM2_Init+0xf4>)
 8000766:	f001 ff43 	bl	80025f0 <HAL_TIM_PWM_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000770:	f000 fc8c 	bl	800108c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4619      	mov	r1, r3
 8000782:	4822      	ldr	r0, [pc, #136]	@ (800080c <MX_TIM2_Init+0xf4>)
 8000784:	f002 faf2 	bl	8002d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800078e:	f000 fc7d 	bl	800108c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000792:	2360      	movs	r3, #96	@ 0x60
 8000794:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	4818      	ldr	r0, [pc, #96]	@ (800080c <MX_TIM2_Init+0xf4>)
 80007aa:	f002 f80d 	bl	80027c8 <HAL_TIM_PWM_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80007b4:	f000 fc6a 	bl	800108c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2204      	movs	r2, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	4813      	ldr	r0, [pc, #76]	@ (800080c <MX_TIM2_Init+0xf4>)
 80007c0:	f002 f802 	bl	80027c8 <HAL_TIM_PWM_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80007ca:	f000 fc5f 	bl	800108c <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 80007ce:	2332      	movs	r3, #50	@ 0x32
 80007d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2208      	movs	r2, #8
 80007d6:	4619      	mov	r1, r3
 80007d8:	480c      	ldr	r0, [pc, #48]	@ (800080c <MX_TIM2_Init+0xf4>)
 80007da:	f001 fff5 	bl	80027c8 <HAL_TIM_PWM_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80007e4:	f000 fc52 	bl	800108c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	220c      	movs	r2, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	4807      	ldr	r0, [pc, #28]	@ (800080c <MX_TIM2_Init+0xf4>)
 80007f0:	f001 ffea 	bl	80027c8 <HAL_TIM_PWM_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80007fa:	f000 fc47 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007fe:	4803      	ldr	r0, [pc, #12]	@ (800080c <MX_TIM2_Init+0xf4>)
 8000800:	f000 fce0 	bl	80011c4 <HAL_TIM_MspPostInit>

}
 8000804:	bf00      	nop
 8000806:	3728      	adds	r7, #40	@ 0x28
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200001e8 	.word	0x200001e8

08000810 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	@ 0x28
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
 800082e:	615a      	str	r2, [r3, #20]
 8000830:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000832:	4b33      	ldr	r3, [pc, #204]	@ (8000900 <MX_TIM3_Init+0xf0>)
 8000834:	4a33      	ldr	r2, [pc, #204]	@ (8000904 <MX_TIM3_Init+0xf4>)
 8000836:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8000838:	4b31      	ldr	r3, [pc, #196]	@ (8000900 <MX_TIM3_Init+0xf0>)
 800083a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800083e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b2f      	ldr	r3, [pc, #188]	@ (8000900 <MX_TIM3_Init+0xf0>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8000846:	4b2e      	ldr	r3, [pc, #184]	@ (8000900 <MX_TIM3_Init+0xf0>)
 8000848:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800084c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084e:	4b2c      	ldr	r3, [pc, #176]	@ (8000900 <MX_TIM3_Init+0xf0>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000854:	4b2a      	ldr	r3, [pc, #168]	@ (8000900 <MX_TIM3_Init+0xf0>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800085a:	4829      	ldr	r0, [pc, #164]	@ (8000900 <MX_TIM3_Init+0xf0>)
 800085c:	f001 fec8 	bl	80025f0 <HAL_TIM_PWM_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000866:	f000 fc11 	bl	800108c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000872:	f107 0320 	add.w	r3, r7, #32
 8000876:	4619      	mov	r1, r3
 8000878:	4821      	ldr	r0, [pc, #132]	@ (8000900 <MX_TIM3_Init+0xf0>)
 800087a:	f002 fa77 	bl	8002d6c <HAL_TIMEx_MasterConfigSynchronization>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000884:	f000 fc02 	bl	800108c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000888:	2360      	movs	r3, #96	@ 0x60
 800088a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2200      	movs	r2, #0
 800089c:	4619      	mov	r1, r3
 800089e:	4818      	ldr	r0, [pc, #96]	@ (8000900 <MX_TIM3_Init+0xf0>)
 80008a0:	f001 ff92 	bl	80027c8 <HAL_TIM_PWM_ConfigChannel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80008aa:	f000 fbef 	bl	800108c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2204      	movs	r2, #4
 80008b2:	4619      	mov	r1, r3
 80008b4:	4812      	ldr	r0, [pc, #72]	@ (8000900 <MX_TIM3_Init+0xf0>)
 80008b6:	f001 ff87 	bl	80027c8 <HAL_TIM_PWM_ConfigChannel>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80008c0:	f000 fbe4 	bl	800108c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2208      	movs	r2, #8
 80008c8:	4619      	mov	r1, r3
 80008ca:	480d      	ldr	r0, [pc, #52]	@ (8000900 <MX_TIM3_Init+0xf0>)
 80008cc:	f001 ff7c 	bl	80027c8 <HAL_TIM_PWM_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80008d6:	f000 fbd9 	bl	800108c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	220c      	movs	r2, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	4807      	ldr	r0, [pc, #28]	@ (8000900 <MX_TIM3_Init+0xf0>)
 80008e2:	f001 ff71 	bl	80027c8 <HAL_TIM_PWM_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80008ec:	f000 fbce 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008f0:	4803      	ldr	r0, [pc, #12]	@ (8000900 <MX_TIM3_Init+0xf0>)
 80008f2:	f000 fc67 	bl	80011c4 <HAL_TIM_MspPostInit>

}
 80008f6:	bf00      	nop
 80008f8:	3728      	adds	r7, #40	@ 0x28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000230 	.word	0x20000230
 8000904:	40000400 	.word	0x40000400

08000908 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <MX_USART1_UART_Init+0x4c>)
 800090e:	4a12      	ldr	r2, [pc, #72]	@ (8000958 <MX_USART1_UART_Init+0x50>)
 8000910:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000912:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <MX_USART1_UART_Init+0x4c>)
 8000914:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000918:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <MX_USART1_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <MX_USART1_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <MX_USART1_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <MX_USART1_UART_Init+0x4c>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <MX_USART1_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <MX_USART1_UART_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	@ (8000954 <MX_USART1_UART_Init+0x4c>)
 8000940:	f002 fabd 	bl	8002ebe <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800094a:	f000 fb9f 	bl	800108c <Error_Handler>
  }
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000278 	.word	0x20000278
 8000958:	40013800 	.word	0x40013800

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000970:	4b38      	ldr	r3, [pc, #224]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a37      	ldr	r2, [pc, #220]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 8000976:	f043 0310 	orr.w	r3, r3, #16
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b35      	ldr	r3, [pc, #212]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0310 	and.w	r3, r3, #16
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000988:	4b32      	ldr	r3, [pc, #200]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a31      	ldr	r2, [pc, #196]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 800098e:	f043 0320 	orr.w	r3, r3, #32
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b2f      	ldr	r3, [pc, #188]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0320 	and.w	r3, r3, #32
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b29      	ldr	r3, [pc, #164]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0304 	and.w	r3, r3, #4
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b8:	4b26      	ldr	r3, [pc, #152]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a25      	ldr	r2, [pc, #148]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 80009be:	f043 0308 	orr.w	r3, r3, #8
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b23      	ldr	r3, [pc, #140]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0308 	and.w	r3, r3, #8
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d6:	4820      	ldr	r0, [pc, #128]	@ (8000a58 <MX_GPIO_Init+0xfc>)
 80009d8:	f001 f9c8 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2130      	movs	r1, #48	@ 0x30
 80009e0:	481e      	ldr	r0, [pc, #120]	@ (8000a5c <MX_GPIO_Init+0x100>)
 80009e2:	f001 f9c3 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4
 80009e6:	2200      	movs	r2, #0
 80009e8:	f243 0138 	movw	r1, #12344	@ 0x3038
 80009ec:	481c      	ldr	r0, [pc, #112]	@ (8000a60 <MX_GPIO_Init+0x104>)
 80009ee:	f001 f9bd 	bl	8001d6c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a00:	2301      	movs	r3, #1
 8000a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4813      	ldr	r0, [pc, #76]	@ (8000a58 <MX_GPIO_Init+0xfc>)
 8000a0c:	f001 f832 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a10:	2330      	movs	r3, #48	@ 0x30
 8000a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <MX_GPIO_Init+0x100>)
 8000a28:	f001 f824 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4
 8000a2c:	f243 0338 	movw	r3, #12344	@ 0x3038
 8000a30:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	4619      	mov	r1, r3
 8000a44:	4806      	ldr	r0, [pc, #24]	@ (8000a60 <MX_GPIO_Init+0x104>)
 8000a46:	f001 f815 	bl	8001a74 <HAL_GPIO_Init>

}
 8000a4a:	bf00      	nop
 8000a4c:	3720      	adds	r7, #32
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40011000 	.word	0x40011000
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	40010c00 	.word	0x40010c00

08000a64 <control_device>:

/* USER CODE BEGIN 4 */

void control_device(char *detail[]){
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b08b      	sub	sp, #44	@ 0x2c
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if(strcmp(detail[0], "LED_FAN") == 0){
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	496f      	ldr	r1, [pc, #444]	@ (8000c34 <control_device+0x1d0>)
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fb67 	bl	800014c <strcmp>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d13f      	bne.n	8000b04 <control_device+0xa0>
		Led_Fan *device = NULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
		for(int i = 0; i < NUMBER_OF_LED_FAN; i++){
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	e020      	b.n	8000ad0 <control_device+0x6c>
			if(array_led_fan[i].id == atoi(detail[1])){
 8000a8e:	496a      	ldr	r1, [pc, #424]	@ (8000c38 <control_device+0x1d4>)
 8000a90:	69fa      	ldr	r2, [r7, #28]
 8000a92:	4613      	mov	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	461c      	mov	r4, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3304      	adds	r3, #4
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f003 f90a 	bl	8003cc0 <atoi>
 8000aac:	4603      	mov	r3, r0
 8000aae:	429c      	cmp	r4, r3
 8000ab0:	d10b      	bne.n	8000aca <control_device+0x66>
				device = &array_led_fan[i];
 8000ab2:	69fa      	ldr	r2, [r7, #28]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	4413      	add	r3, r2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4a5e      	ldr	r2, [pc, #376]	@ (8000c38 <control_device+0x1d4>)
 8000abe:	4413      	add	r3, r2
 8000ac0:	623b      	str	r3, [r7, #32]
				flag = 1;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8000ac8:	e005      	b.n	8000ad6 <control_device+0x72>
		for(int i = 0; i < NUMBER_OF_LED_FAN; i++){
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3301      	adds	r3, #1
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	2b07      	cmp	r3, #7
 8000ad4:	dddb      	ble.n	8000a8e <control_device+0x2a>
			}
		}
		if(flag){
 8000ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f000 80a5 	beq.w	8000c2a <control_device+0x1c6>
			device->brightness = atoi(detail[2])*15;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3308      	adds	r3, #8
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f003 f8ea 	bl	8003cc0 <atoi>
 8000aec:	4603      	mov	r3, r0
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	0112      	lsls	r2, r2, #4
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	805a      	strh	r2, [r3, #2]
			Control_LED_FAN(device);
 8000afc:	6a38      	ldr	r0, [r7, #32]
 8000afe:	f7ff fc21 	bl	8000344 <Control_LED_FAN>
		if(flag){
			device->status = strcmp(detail[2], "ON") == 0;
			Control_Device(device);
		}
	}
}
 8000b02:	e092      	b.n	8000c2a <control_device+0x1c6>
	else if(strcmp(detail[0], "DOOR") == 0){
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	494c      	ldr	r1, [pc, #304]	@ (8000c3c <control_device+0x1d8>)
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fb1e 	bl	800014c <strcmp>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d140      	bne.n	8000b98 <control_device+0x134>
		Door *door = NULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
		for(int i = 0; i < NUMBER_OF_DOOR; i++){
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	e020      	b.n	8000b62 <control_device+0xfe>
			if(array_door[i].id == atoi(detail[1])){
 8000b20:	4947      	ldr	r1, [pc, #284]	@ (8000c40 <control_device+0x1dc>)
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	4613      	mov	r3, r2
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	4413      	add	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461c      	mov	r4, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3304      	adds	r3, #4
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 f8c1 	bl	8003cc0 <atoi>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	429c      	cmp	r4, r3
 8000b42:	d10b      	bne.n	8000b5c <control_device+0xf8>
				door = &array_door[i];
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	4613      	mov	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4a3c      	ldr	r2, [pc, #240]	@ (8000c40 <control_device+0x1dc>)
 8000b50:	4413      	add	r3, r2
 8000b52:	61bb      	str	r3, [r7, #24]
				flag = 1;
 8000b54:	2301      	movs	r3, #1
 8000b56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8000b5a:	e005      	b.n	8000b68 <control_device+0x104>
		for(int i = 0; i < NUMBER_OF_DOOR; i++){
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	dddb      	ble.n	8000b20 <control_device+0xbc>
		if(flag){
 8000b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d05c      	beq.n	8000c2a <control_device+0x1c6>
			door->status = strcmp(detail[2], "OPEN") == 0;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3308      	adds	r3, #8
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4933      	ldr	r1, [pc, #204]	@ (8000c44 <control_device+0x1e0>)
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fae7 	bl	800014c <strcmp>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	bf0c      	ite	eq
 8000b84:	2301      	moveq	r3, #1
 8000b86:	2300      	movne	r3, #0
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	705a      	strb	r2, [r3, #1]
			Control_DOOR(door);
 8000b90:	69b8      	ldr	r0, [r7, #24]
 8000b92:	f7ff faed 	bl	8000170 <Control_DOOR>
}
 8000b96:	e048      	b.n	8000c2a <control_device+0x1c6>
	else if(strcmp(detail[0], "DEVICES") == 0){
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	492a      	ldr	r1, [pc, #168]	@ (8000c48 <control_device+0x1e4>)
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fad4 	bl	800014c <strcmp>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d13f      	bne.n	8000c2a <control_device+0x1c6>
		Oher_Devices *device = NULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
		for(int i = 0; i < NUMBER_OF_DEVICES; i++){
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	e020      	b.n	8000bf6 <control_device+0x192>
			if(array_devices[i].id == atoi(detail[1])){
 8000bb4:	4925      	ldr	r1, [pc, #148]	@ (8000c4c <control_device+0x1e8>)
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461c      	mov	r4, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f003 f877 	bl	8003cc0 <atoi>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	429c      	cmp	r4, r3
 8000bd6:	d10b      	bne.n	8000bf0 <control_device+0x18c>
				device = &array_devices[i];
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	4413      	add	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c4c <control_device+0x1e8>)
 8000be4:	4413      	add	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
				flag = 1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8000bee:	e005      	b.n	8000bfc <control_device+0x198>
		for(int i = 0; i < NUMBER_OF_DEVICES; i++){
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b06      	cmp	r3, #6
 8000bfa:	dddb      	ble.n	8000bb4 <control_device+0x150>
		if(flag){
 8000bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d012      	beq.n	8000c2a <control_device+0x1c6>
			device->status = strcmp(detail[2], "ON") == 0;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3308      	adds	r3, #8
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4911      	ldr	r1, [pc, #68]	@ (8000c50 <control_device+0x1ec>)
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fa9d 	bl	800014c <strcmp>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	bf0c      	ite	eq
 8000c18:	2301      	moveq	r3, #1
 8000c1a:	2300      	movne	r3, #0
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	461a      	mov	r2, r3
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	705a      	strb	r2, [r3, #1]
			Control_Device(device);
 8000c24:	6938      	ldr	r0, [r7, #16]
 8000c26:	f000 fa37 	bl	8001098 <Control_Device>
}
 8000c2a:	bf00      	nop
 8000c2c:	372c      	adds	r7, #44	@ 0x2c
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd90      	pop	{r4, r7, pc}
 8000c32:	bf00      	nop
 8000c34:	080051dc 	.word	0x080051dc
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	080051e4 	.word	0x080051e4
 8000c40:	200000a0 	.word	0x200000a0
 8000c44:	080051ec 	.word	0x080051ec
 8000c48:	080051f4 	.word	0x080051f4
 8000c4c:	200000c8 	.word	0x200000c8
 8000c50:	080051fc 	.word	0x080051fc

08000c54 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b0c8      	sub	sp, #288	@ 0x120
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000c5e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000c62:	6018      	str	r0, [r3, #0]
	if(huart->Instance == USART1){
 8000c64:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000c68:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4ac0      	ldr	r2, [pc, #768]	@ (8000f74 <HAL_UART_RxCpltCallback+0x320>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	f040 81fc 	bne.w	8001070 <HAL_UART_RxCpltCallback+0x41c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c7c:	48be      	ldr	r0, [pc, #760]	@ (8000f78 <HAL_UART_RxCpltCallback+0x324>)
 8000c7e:	f001 f88d 	bl	8001d9c <HAL_GPIO_TogglePin>
		char *data = (char*) malloc(100);
 8000c82:	2064      	movs	r0, #100	@ 0x64
 8000c84:	f003 f820 	bl	8003cc8 <malloc>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
		uint8_t s = size;
 8000c8e:	4bbb      	ldr	r3, [pc, #748]	@ (8000f7c <HAL_UART_RxCpltCallback+0x328>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
		HAL_UART_Receive(huart, (uint8_t*)data, size, HAL_MAX_DELAY);
 8000c96:	4bb9      	ldr	r3, [pc, #740]	@ (8000f7c <HAL_UART_RxCpltCallback+0x328>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000ca0:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca8:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8000cac:	6800      	ldr	r0, [r0, #0]
 8000cae:	f002 f9e1 	bl	8003074 <HAL_UART_Receive>
		data[s] = '\0';
 8000cb2:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8000cb6:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8000cba:	4413      	add	r3, r2
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
	    char *token = strtok(data, "+");
 8000cc0:	49af      	ldr	r1, [pc, #700]	@ (8000f80 <HAL_UART_RxCpltCallback+0x32c>)
 8000cc2:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8000cc6:	f003 fa7d 	bl	80041c4 <strtok>
 8000cca:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
	    char *detail[4];
	    for (int j = 0; j < 4; j++) {
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000cd4:	e011      	b.n	8000cfa <HAL_UART_RxCpltCallback+0xa6>
	        detail[j] = malloc(20); // Giả sử chuỗi có thể chứa tối đa 100 ký tự
 8000cd6:	2014      	movs	r0, #20
 8000cd8:	f002 fff6 	bl	8003cc8 <malloc>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8000cea:	443b      	add	r3, r7
 8000cec:	f843 2c38 	str.w	r2, [r3, #-56]
	    for (int j = 0; j < 4; j++) {
 8000cf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	dde9      	ble.n	8000cd6 <HAL_UART_RxCpltCallback+0x82>
	    }

	    char *val = strtok(NULL, "+");
 8000d02:	499f      	ldr	r1, [pc, #636]	@ (8000f80 <HAL_UART_RxCpltCallback+0x32c>)
 8000d04:	2000      	movs	r0, #0
 8000d06:	f003 fa5d 	bl	80041c4 <strtok>
 8000d0a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
	    int i = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	    while(val != NULL && i < 4){
 8000d14:	e015      	b.n	8000d42 <HAL_UART_RxCpltCallback+0xee>
	    	strcpy(detail[i++], val);
 8000d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8000d26:	443b      	add	r3, r7
 8000d28:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000d2c:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 8000d30:	4618      	mov	r0, r3
 8000d32:	f003 fb26 	bl	8004382 <strcpy>
	    	val = strtok(NULL, "+");
 8000d36:	4992      	ldr	r1, [pc, #584]	@ (8000f80 <HAL_UART_RxCpltCallback+0x32c>)
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f003 fa43 	bl	80041c4 <strtok>
 8000d3e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
	    while(val != NULL && i < 4){
 8000d42:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <HAL_UART_RxCpltCallback+0xfe>
 8000d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	dde1      	ble.n	8000d16 <HAL_UART_RxCpltCallback+0xc2>
	    }

	    if(strcmp(token, "CONTROL") == 0){
 8000d52:	498c      	ldr	r1, [pc, #560]	@ (8000f84 <HAL_UART_RxCpltCallback+0x330>)
 8000d54:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8000d58:	f7ff f9f8 	bl	800014c <strcmp>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d105      	bne.n	8000d6e <HAL_UART_RxCpltCallback+0x11a>
	    	control_device(detail);
 8000d62:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fe7c 	bl	8000a64 <control_device>
 8000d6c:	e15b      	b.n	8001026 <HAL_UART_RxCpltCallback+0x3d2>
	    }
	    else if(strcmp(token, "FIRST_INIT") == 0){
 8000d6e:	4986      	ldr	r1, [pc, #536]	@ (8000f88 <HAL_UART_RxCpltCallback+0x334>)
 8000d70:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8000d74:	f7ff f9ea 	bl	800014c <strcmp>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f040 8153 	bne.w	8001026 <HAL_UART_RxCpltCallback+0x3d2>
	    	char mess[200] = "";
 8000d80:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d84:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	22c4      	movs	r2, #196	@ 0xc4
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 f9ff 	bl	8004196 <memset>
	    	for(int i = 0; i < NUMBER_OF_LED_FAN; i++){
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8000d9e:	e053      	b.n	8000e48 <HAL_UART_RxCpltCallback+0x1f4>
	    		char id[4], brightness[6];
	    		sprintf(id, "%d", array_led_fan[i].id);
 8000da0:	497a      	ldr	r1, [pc, #488]	@ (8000f8c <HAL_UART_RxCpltCallback+0x338>)
 8000da2:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	440b      	add	r3, r1
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8000db8:	4975      	ldr	r1, [pc, #468]	@ (8000f90 <HAL_UART_RxCpltCallback+0x33c>)
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f003 f988 	bl	80040d0 <siprintf>
	    		sprintf(brightness, "%d", array_led_fan[i].brightness);
 8000dc0:	4972      	ldr	r1, [pc, #456]	@ (8000f8c <HAL_UART_RxCpltCallback+0x338>)
 8000dc2:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	440b      	add	r3, r1
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8000dda:	496d      	ldr	r1, [pc, #436]	@ (8000f90 <HAL_UART_RxCpltCallback+0x33c>)
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f003 f977 	bl	80040d0 <siprintf>

	    		strcat(mess, id);
 8000de2:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 f9da 	bl	80041a6 <strcat>
	    		strcat(mess, "+");
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff f9b2 	bl	8000160 <strlen>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	4413      	add	r3, r2
 8000e06:	495e      	ldr	r1, [pc, #376]	@ (8000f80 <HAL_UART_RxCpltCallback+0x32c>)
 8000e08:	461a      	mov	r2, r3
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	8013      	strh	r3, [r2, #0]
	    		strcat(mess, brightness);
 8000e10:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 f9c3 	bl	80041a6 <strcat>
	    		strcat(mess, " ");
 8000e20:	f107 0308 	add.w	r3, r7, #8
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff f99b 	bl	8000160 <strlen>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	4413      	add	r3, r2
 8000e34:	4957      	ldr	r1, [pc, #348]	@ (8000f94 <HAL_UART_RxCpltCallback+0x340>)
 8000e36:	461a      	mov	r2, r3
 8000e38:	460b      	mov	r3, r1
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	8013      	strh	r3, [r2, #0]
	    	for(int i = 0; i < NUMBER_OF_LED_FAN; i++){
 8000e3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e42:	3301      	adds	r3, #1
 8000e44:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8000e48:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e4c:	2b07      	cmp	r3, #7
 8000e4e:	dda7      	ble.n	8000da0 <HAL_UART_RxCpltCallback+0x14c>
	    	}
	    	for(int i = 0; i < NUMBER_OF_DOOR; i++){
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000e56:	e04f      	b.n	8000ef8 <HAL_UART_RxCpltCallback+0x2a4>
	    		char id[4];
	    		sprintf(id, "%d", array_door[i].id);
 8000e58:	494f      	ldr	r1, [pc, #316]	@ (8000f98 <HAL_UART_RxCpltCallback+0x344>)
 8000e5a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000e5e:	4613      	mov	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e70:	4947      	ldr	r1, [pc, #284]	@ (8000f90 <HAL_UART_RxCpltCallback+0x33c>)
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 f92c 	bl	80040d0 <siprintf>

				strcat(mess, id);
 8000e78:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f003 f98f 	bl	80041a6 <strcat>
				strcat(mess, "+");
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff f967 	bl	8000160 <strlen>
 8000e92:	4603      	mov	r3, r0
 8000e94:	461a      	mov	r2, r3
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4938      	ldr	r1, [pc, #224]	@ (8000f80 <HAL_UART_RxCpltCallback+0x32c>)
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	8013      	strh	r3, [r2, #0]
				strcat(mess, array_door[i].status == 0 ? "CLOSE" : "OPEN");
 8000ea6:	493c      	ldr	r1, [pc, #240]	@ (8000f98 <HAL_UART_RxCpltCallback+0x344>)
 8000ea8:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <HAL_UART_RxCpltCallback+0x26e>
 8000ebe:	4a37      	ldr	r2, [pc, #220]	@ (8000f9c <HAL_UART_RxCpltCallback+0x348>)
 8000ec0:	e000      	b.n	8000ec4 <HAL_UART_RxCpltCallback+0x270>
 8000ec2:	4a37      	ldr	r2, [pc, #220]	@ (8000fa0 <HAL_UART_RxCpltCallback+0x34c>)
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 f96b 	bl	80041a6 <strcat>
				strcat(mess, " ");
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff f943 	bl	8000160 <strlen>
 8000eda:	4603      	mov	r3, r0
 8000edc:	461a      	mov	r2, r3
 8000ede:	f107 0308 	add.w	r3, r7, #8
 8000ee2:	4413      	add	r3, r2
 8000ee4:	492b      	ldr	r1, [pc, #172]	@ (8000f94 <HAL_UART_RxCpltCallback+0x340>)
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	460b      	mov	r3, r1
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	8013      	strh	r3, [r2, #0]
	    	for(int i = 0; i < NUMBER_OF_DOOR; i++){
 8000eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	ddab      	ble.n	8000e58 <HAL_UART_RxCpltCallback+0x204>
			}
	    	for(int i = 0; i < NUMBER_OF_DEVICES; i++){
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000f06:	e06c      	b.n	8000fe2 <HAL_UART_RxCpltCallback+0x38e>
	    		char id[4];
	    		sprintf(id, "%d", array_devices[i].id);
 8000f08:	4926      	ldr	r1, [pc, #152]	@ (8000fa4 <HAL_UART_RxCpltCallback+0x350>)
 8000f0a:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	440b      	add	r3, r1
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000f20:	491b      	ldr	r1, [pc, #108]	@ (8000f90 <HAL_UART_RxCpltCallback+0x33c>)
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 f8d4 	bl	80040d0 <siprintf>

				strcat(mess, id);
 8000f28:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 f937 	bl	80041a6 <strcat>
				strcat(mess, "+");
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff f90f 	bl	8000160 <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	4413      	add	r3, r2
 8000f4c:	490c      	ldr	r1, [pc, #48]	@ (8000f80 <HAL_UART_RxCpltCallback+0x32c>)
 8000f4e:	461a      	mov	r2, r3
 8000f50:	460b      	mov	r3, r1
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	8013      	strh	r3, [r2, #0]
				strcat(mess, array_devices[i].status == 0 ? "OFF" : "ON");
 8000f56:	4913      	ldr	r1, [pc, #76]	@ (8000fa4 <HAL_UART_RxCpltCallback+0x350>)
 8000f58:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	3301      	adds	r3, #1
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d11e      	bne.n	8000fac <HAL_UART_RxCpltCallback+0x358>
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa8 <HAL_UART_RxCpltCallback+0x354>)
 8000f70:	e01d      	b.n	8000fae <HAL_UART_RxCpltCallback+0x35a>
 8000f72:	bf00      	nop
 8000f74:	40013800 	.word	0x40013800
 8000f78:	40011000 	.word	0x40011000
 8000f7c:	200002c0 	.word	0x200002c0
 8000f80:	08005200 	.word	0x08005200
 8000f84:	08005204 	.word	0x08005204
 8000f88:	0800520c 	.word	0x0800520c
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	08005218 	.word	0x08005218
 8000f94:	0800521c 	.word	0x0800521c
 8000f98:	200000a0 	.word	0x200000a0
 8000f9c:	08005220 	.word	0x08005220
 8000fa0:	080051ec 	.word	0x080051ec
 8000fa4:	200000c8 	.word	0x200000c8
 8000fa8:	08005228 	.word	0x08005228
 8000fac:	4a33      	ldr	r2, [pc, #204]	@ (800107c <HAL_UART_RxCpltCallback+0x428>)
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 f8f6 	bl	80041a6 <strcat>
				strcat(mess, " ");
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff f8ce 	bl	8000160 <strlen>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	4413      	add	r3, r2
 8000fce:	492c      	ldr	r1, [pc, #176]	@ (8001080 <HAL_UART_RxCpltCallback+0x42c>)
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	8013      	strh	r3, [r2, #0]
	    	for(int i = 0; i < NUMBER_OF_DEVICES; i++){
 8000fd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000fdc:	3301      	adds	r3, #1
 8000fde:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000fe2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	dd8e      	ble.n	8000f08 <HAL_UART_RxCpltCallback+0x2b4>
			}

	    	uint8_t len = strlen(mess);
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff f8b6 	bl	8000160 <strlen>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	    	HAL_UART_Transmit(&huart1, &len, 1, HAL_MAX_DELAY);
 8000ffc:	f107 01e7 	add.w	r1, r7, #231	@ 0xe7
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	2201      	movs	r2, #1
 8001006:	481f      	ldr	r0, [pc, #124]	@ (8001084 <HAL_UART_RxCpltCallback+0x430>)
 8001008:	f001 ffa9 	bl	8002f5e <HAL_UART_Transmit>
	    	HAL_Delay(10);
 800100c:	200a      	movs	r0, #10
 800100e:	f000 fb4d 	bl	80016ac <HAL_Delay>
	    	HAL_UART_Transmit(&huart1, (uint8_t*)mess, len, HAL_MAX_DELAY);
 8001012:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8001016:	461a      	mov	r2, r3
 8001018:	f107 0108 	add.w	r1, r7, #8
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
 8001020:	4818      	ldr	r0, [pc, #96]	@ (8001084 <HAL_UART_RxCpltCallback+0x430>)
 8001022:	f001 ff9c 	bl	8002f5e <HAL_UART_Transmit>
	    }
		free(data);
 8001026:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 800102a:	f002 fe55 	bl	8003cd8 <free>
		for (int j = 0; j < 4; j++) {
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001034:	e00f      	b.n	8001056 <HAL_UART_RxCpltCallback+0x402>
		    free(detail[j]);
 8001036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8001040:	443b      	add	r3, r7
 8001042:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001046:	4618      	mov	r0, r3
 8001048:	f002 fe46 	bl	8003cd8 <free>
		for (int j = 0; j < 4; j++) {
 800104c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001050:	3301      	adds	r3, #1
 8001052:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800105a:	2b03      	cmp	r3, #3
 800105c:	ddeb      	ble.n	8001036 <HAL_UART_RxCpltCallback+0x3e2>
		}
		HAL_UART_Receive_IT(huart, &size, 1);
 800105e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001062:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001066:	2201      	movs	r2, #1
 8001068:	4907      	ldr	r1, [pc, #28]	@ (8001088 <HAL_UART_RxCpltCallback+0x434>)
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	f002 f899 	bl	80031a2 <HAL_UART_Receive_IT>
	}
}
 8001070:	bf00      	nop
 8001072:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	080051fc 	.word	0x080051fc
 8001080:	0800521c 	.word	0x0800521c
 8001084:	20000278 	.word	0x20000278
 8001088:	200002c0 	.word	0x200002c0

0800108c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <Error_Handler+0x8>

08001098 <Control_Device>:
//	device->id = atoi(detail[1]);
//
//	convert_gpio(NULL, NULL, &device->gpio_port, &device->gpio_pin, detail[2]);
//	Device_MspInit(device);
//}
void Control_Device(Oher_Devices *device){
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	if(device->status == 1){
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	785b      	ldrb	r3, [r3, #1]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d109      	bne.n	80010bc <Control_Device+0x24>
		HAL_GPIO_WritePin(device->gpio_port, device->gpio_pin, ENABLE);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6858      	ldr	r0, [r3, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	2201      	movs	r2, #1
 80010b4:	4619      	mov	r1, r3
 80010b6:	f000 fe59 	bl	8001d6c <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(device->gpio_port, device->gpio_pin, DISABLE);
	}
}
 80010ba:	e008      	b.n	80010ce <Control_Device+0x36>
		HAL_GPIO_WritePin(device->gpio_port, device->gpio_pin, DISABLE);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6858      	ldr	r0, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	f000 fe4f 	bl	8001d6c <HAL_GPIO_WritePin>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010de:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <HAL_MspInit+0x5c>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	4a14      	ldr	r2, [pc, #80]	@ (8001134 <HAL_MspInit+0x5c>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6193      	str	r3, [r2, #24]
 80010ea:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_MspInit+0x5c>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <HAL_MspInit+0x5c>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001134 <HAL_MspInit+0x5c>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001100:	61d3      	str	r3, [r2, #28]
 8001102:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <HAL_MspInit+0x5c>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800110e:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <HAL_MspInit+0x60>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	4a04      	ldr	r2, [pc, #16]	@ (8001138 <HAL_MspInit+0x60>)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	40021000 	.word	0x40021000
 8001138:	40010000 	.word	0x40010000

0800113c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800113c:	b480      	push	{r7}
 800113e:	b087      	sub	sp, #28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a1b      	ldr	r2, [pc, #108]	@ (80011b8 <HAL_TIM_PWM_MspInit+0x7c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d10c      	bne.n	8001168 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800114e:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <HAL_TIM_PWM_MspInit+0x80>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	4a1a      	ldr	r2, [pc, #104]	@ (80011bc <HAL_TIM_PWM_MspInit+0x80>)
 8001154:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001158:	6193      	str	r3, [r2, #24]
 800115a:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <HAL_TIM_PWM_MspInit+0x80>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001166:	e022      	b.n	80011ae <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM2)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001170:	d10c      	bne.n	800118c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001172:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <HAL_TIM_PWM_MspInit+0x80>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	4a11      	ldr	r2, [pc, #68]	@ (80011bc <HAL_TIM_PWM_MspInit+0x80>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	61d3      	str	r3, [r2, #28]
 800117e:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <HAL_TIM_PWM_MspInit+0x80>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
}
 800118a:	e010      	b.n	80011ae <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0b      	ldr	r2, [pc, #44]	@ (80011c0 <HAL_TIM_PWM_MspInit+0x84>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d10b      	bne.n	80011ae <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001196:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <HAL_TIM_PWM_MspInit+0x80>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a08      	ldr	r2, [pc, #32]	@ (80011bc <HAL_TIM_PWM_MspInit+0x80>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_TIM_PWM_MspInit+0x80>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
}
 80011ae:	bf00      	nop
 80011b0:	371c      	adds	r7, #28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	40012c00 	.word	0x40012c00
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40000400 	.word	0x40000400

080011c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	@ 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0318 	add.w	r3, r7, #24
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a3a      	ldr	r2, [pc, #232]	@ (80012c8 <HAL_TIM_MspPostInit+0x104>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d119      	bne.n	8001218 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b39      	ldr	r3, [pc, #228]	@ (80012cc <HAL_TIM_MspPostInit+0x108>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a38      	ldr	r2, [pc, #224]	@ (80012cc <HAL_TIM_MspPostInit+0x108>)
 80011ea:	f043 0304 	orr.w	r3, r3, #4
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b36      	ldr	r3, [pc, #216]	@ (80012cc <HAL_TIM_MspPostInit+0x108>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80011fc:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8001200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2302      	movs	r3, #2
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0318 	add.w	r3, r7, #24
 800120e:	4619      	mov	r1, r3
 8001210:	482f      	ldr	r0, [pc, #188]	@ (80012d0 <HAL_TIM_MspPostInit+0x10c>)
 8001212:	f000 fc2f 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */
////
  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001216:	e052      	b.n	80012be <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM2)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001220:	d118      	bne.n	8001254 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	4b2a      	ldr	r3, [pc, #168]	@ (80012cc <HAL_TIM_MspPostInit+0x108>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	4a29      	ldr	r2, [pc, #164]	@ (80012cc <HAL_TIM_MspPostInit+0x108>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6193      	str	r3, [r2, #24]
 800122e:	4b27      	ldr	r3, [pc, #156]	@ (80012cc <HAL_TIM_MspPostInit+0x108>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800123a:	230f      	movs	r3, #15
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2302      	movs	r3, #2
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 0318 	add.w	r3, r7, #24
 800124a:	4619      	mov	r1, r3
 800124c:	4820      	ldr	r0, [pc, #128]	@ (80012d0 <HAL_TIM_MspPostInit+0x10c>)
 800124e:	f000 fc11 	bl	8001a74 <HAL_GPIO_Init>
}
 8001252:	e034      	b.n	80012be <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM3)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a1e      	ldr	r2, [pc, #120]	@ (80012d4 <HAL_TIM_MspPostInit+0x110>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d12f      	bne.n	80012be <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <HAL_TIM_MspPostInit+0x108>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	4a1a      	ldr	r2, [pc, #104]	@ (80012cc <HAL_TIM_MspPostInit+0x108>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	6193      	str	r3, [r2, #24]
 800126a:	4b18      	ldr	r3, [pc, #96]	@ (80012cc <HAL_TIM_MspPostInit+0x108>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <HAL_TIM_MspPostInit+0x108>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	4a14      	ldr	r2, [pc, #80]	@ (80012cc <HAL_TIM_MspPostInit+0x108>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	6193      	str	r3, [r2, #24]
 8001282:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <HAL_TIM_MspPostInit+0x108>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800128e:	23c0      	movs	r3, #192	@ 0xc0
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2302      	movs	r3, #2
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0318 	add.w	r3, r7, #24
 800129e:	4619      	mov	r1, r3
 80012a0:	480b      	ldr	r0, [pc, #44]	@ (80012d0 <HAL_TIM_MspPostInit+0x10c>)
 80012a2:	f000 fbe7 	bl	8001a74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012a6:	2303      	movs	r3, #3
 80012a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2302      	movs	r3, #2
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	4619      	mov	r1, r3
 80012b8:	4807      	ldr	r0, [pc, #28]	@ (80012d8 <HAL_TIM_MspPostInit+0x114>)
 80012ba:	f000 fbdb 	bl	8001a74 <HAL_GPIO_Init>
}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	@ 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40012c00 	.word	0x40012c00
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010800 	.word	0x40010800
 80012d4:	40000400 	.word	0x40000400
 80012d8:	40010c00 	.word	0x40010c00

080012dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	@ 0x28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a26      	ldr	r2, [pc, #152]	@ (8001390 <HAL_UART_MspInit+0xb4>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d145      	bne.n	8001388 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012fc:	4b25      	ldr	r3, [pc, #148]	@ (8001394 <HAL_UART_MspInit+0xb8>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a24      	ldr	r2, [pc, #144]	@ (8001394 <HAL_UART_MspInit+0xb8>)
 8001302:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b22      	ldr	r3, [pc, #136]	@ (8001394 <HAL_UART_MspInit+0xb8>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001314:	4b1f      	ldr	r3, [pc, #124]	@ (8001394 <HAL_UART_MspInit+0xb8>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a1e      	ldr	r2, [pc, #120]	@ (8001394 <HAL_UART_MspInit+0xb8>)
 800131a:	f043 0308 	orr.w	r3, r3, #8
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <HAL_UART_MspInit+0xb8>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800132c:	2340      	movs	r3, #64	@ 0x40
 800132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4816      	ldr	r0, [pc, #88]	@ (8001398 <HAL_UART_MspInit+0xbc>)
 8001340:	f000 fb98 	bl	8001a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001344:	2380      	movs	r3, #128	@ 0x80
 8001346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	4810      	ldr	r0, [pc, #64]	@ (8001398 <HAL_UART_MspInit+0xbc>)
 8001358:	f000 fb8c 	bl	8001a74 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800135c:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <HAL_UART_MspInit+0xc0>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
 8001362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001364:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
 800136a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
 8001372:	4a0a      	ldr	r2, [pc, #40]	@ (800139c <HAL_UART_MspInit+0xc0>)
 8001374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001376:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	210e      	movs	r1, #14
 800137c:	2025      	movs	r0, #37	@ 0x25
 800137e:	f000 fa90 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001382:	2025      	movs	r0, #37	@ 0x25
 8001384:	f000 faa9 	bl	80018da <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	@ 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40013800 	.word	0x40013800
 8001394:	40021000 	.word	0x40021000
 8001398:	40010c00 	.word	0x40010c00
 800139c:	40010000 	.word	0x40010000

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <NMI_Handler+0x4>

080013a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <MemManage_Handler+0x4>

080013b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f0:	f000 f940 	bl	8001674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013fc:	4802      	ldr	r0, [pc, #8]	@ (8001408 <USART1_IRQHandler+0x10>)
 80013fe:	f001 fef5 	bl	80031ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000278 	.word	0x20000278

0800140c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return 1;
 8001410:	2301      	movs	r3, #1
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <_kill>:

int _kill(int pid, int sig)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001424:	f002 ff80 	bl	8004328 <__errno>
 8001428:	4603      	mov	r3, r0
 800142a:	2216      	movs	r2, #22
 800142c:	601a      	str	r2, [r3, #0]
  return -1;
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <_exit>:

void _exit (int status)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001442:	f04f 31ff 	mov.w	r1, #4294967295
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffe7 	bl	800141a <_kill>
  while (1) {}    /* Make sure we hang here */
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <_exit+0x12>

08001450 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	e00a      	b.n	8001478 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001462:	f3af 8000 	nop.w
 8001466:	4601      	mov	r1, r0
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	60ba      	str	r2, [r7, #8]
 800146e:	b2ca      	uxtb	r2, r1
 8001470:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	429a      	cmp	r2, r3
 800147e:	dbf0      	blt.n	8001462 <_read+0x12>
  }

  return len;
 8001480:	687b      	ldr	r3, [r7, #4]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e009      	b.n	80014b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	60ba      	str	r2, [r7, #8]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3301      	adds	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dbf1      	blt.n	800149c <_write+0x12>
  }
  return len;
 80014b8:	687b      	ldr	r3, [r7, #4]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <_close>:

int _close(int file)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014e8:	605a      	str	r2, [r3, #4]
  return 0;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <_isatty>:

int _isatty(int file)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800150a:	b480      	push	{r7}
 800150c:	b085      	sub	sp, #20
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
	...

08001524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800152c:	4a14      	ldr	r2, [pc, #80]	@ (8001580 <_sbrk+0x5c>)
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <_sbrk+0x60>)
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001538:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001540:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <_sbrk+0x64>)
 8001542:	4a12      	ldr	r2, [pc, #72]	@ (800158c <_sbrk+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	429a      	cmp	r2, r3
 8001552:	d207      	bcs.n	8001564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001554:	f002 fee8 	bl	8004328 <__errno>
 8001558:	4603      	mov	r3, r0
 800155a:	220c      	movs	r2, #12
 800155c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	e009      	b.n	8001578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156a:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <_sbrk+0x64>)
 8001574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20002800 	.word	0x20002800
 8001584:	00000400 	.word	0x00000400
 8001588:	200002c4 	.word	0x200002c4
 800158c:	20000418 	.word	0x20000418

08001590 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800159c:	f7ff fff8 	bl	8001590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a0:	480b      	ldr	r0, [pc, #44]	@ (80015d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015a2:	490c      	ldr	r1, [pc, #48]	@ (80015d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015a4:	4a0c      	ldr	r2, [pc, #48]	@ (80015d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b6:	4a09      	ldr	r2, [pc, #36]	@ (80015dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015b8:	4c09      	ldr	r4, [pc, #36]	@ (80015e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015c6:	f002 feb5 	bl	8004334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ca:	f7fe ff4b 	bl	8000464 <main>
  bx lr
 80015ce:	4770      	bx	lr
  ldr r0, =_sdata
 80015d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80015d8:	08005448 	.word	0x08005448
  ldr r2, =_sbss
 80015dc:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80015e0:	20000418 	.word	0x20000418

080015e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC1_2_IRQHandler>
	...

080015e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ec:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <HAL_Init+0x28>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a07      	ldr	r2, [pc, #28]	@ (8001610 <HAL_Init+0x28>)
 80015f2:	f043 0310 	orr.w	r3, r3, #16
 80015f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f8:	2003      	movs	r0, #3
 80015fa:	f000 f947 	bl	800188c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fe:	200d      	movs	r0, #13
 8001600:	f000 f808 	bl	8001614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001604:	f7ff fd68 	bl	80010d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40022000 	.word	0x40022000

08001614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <HAL_InitTick+0x54>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <HAL_InitTick+0x58>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800162a:	fbb3 f3f1 	udiv	r3, r3, r1
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f95f 	bl	80018f6 <HAL_SYSTICK_Config>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e00e      	b.n	8001660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b0f      	cmp	r3, #15
 8001646:	d80a      	bhi.n	800165e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001648:	2200      	movs	r2, #0
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	f000 f927 	bl	80018a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001654:	4a06      	ldr	r2, [pc, #24]	@ (8001670 <HAL_InitTick+0x5c>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	e000      	b.n	8001660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	2000011c 	.word	0x2000011c
 800166c:	20000124 	.word	0x20000124
 8001670:	20000120 	.word	0x20000120

08001674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <HAL_IncTick+0x1c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <HAL_IncTick+0x20>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4413      	add	r3, r2
 8001684:	4a03      	ldr	r2, [pc, #12]	@ (8001694 <HAL_IncTick+0x20>)
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	20000124 	.word	0x20000124
 8001694:	200002c8 	.word	0x200002c8

08001698 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return uwTick;
 800169c:	4b02      	ldr	r3, [pc, #8]	@ (80016a8 <HAL_GetTick+0x10>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	200002c8 	.word	0x200002c8

080016ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b4:	f7ff fff0 	bl	8001698 <HAL_GetTick>
 80016b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c4:	d005      	beq.n	80016d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016c6:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <HAL_Delay+0x44>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4413      	add	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016d2:	bf00      	nop
 80016d4:	f7ff ffe0 	bl	8001698 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d8f7      	bhi.n	80016d4 <HAL_Delay+0x28>
  {
  }
}
 80016e4:	bf00      	nop
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000124 	.word	0x20000124

080016f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001704:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001710:	4013      	ands	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800171c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001726:	4a04      	ldr	r2, [pc, #16]	@ (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	60d3      	str	r3, [r2, #12]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001740:	4b04      	ldr	r3, [pc, #16]	@ (8001754 <__NVIC_GetPriorityGrouping+0x18>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	f003 0307 	and.w	r3, r3, #7
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	2b00      	cmp	r3, #0
 8001768:	db0b      	blt.n	8001782 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	f003 021f 	and.w	r2, r3, #31
 8001770:	4906      	ldr	r1, [pc, #24]	@ (800178c <__NVIC_EnableIRQ+0x34>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	095b      	lsrs	r3, r3, #5
 8001778:	2001      	movs	r0, #1
 800177a:	fa00 f202 	lsl.w	r2, r0, r2
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0a      	blt.n	80017ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	490c      	ldr	r1, [pc, #48]	@ (80017dc <__NVIC_SetPriority+0x4c>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	0112      	lsls	r2, r2, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b8:	e00a      	b.n	80017d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4908      	ldr	r1, [pc, #32]	@ (80017e0 <__NVIC_SetPriority+0x50>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3b04      	subs	r3, #4
 80017c8:	0112      	lsls	r2, r2, #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	440b      	add	r3, r1
 80017ce:	761a      	strb	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	@ 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2b04      	cmp	r3, #4
 8001800:	bf28      	it	cs
 8001802:	2304      	movcs	r3, #4
 8001804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3304      	adds	r3, #4
 800180a:	2b06      	cmp	r3, #6
 800180c:	d902      	bls.n	8001814 <NVIC_EncodePriority+0x30>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b03      	subs	r3, #3
 8001812:	e000      	b.n	8001816 <NVIC_EncodePriority+0x32>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800182c:	f04f 31ff 	mov.w	r1, #4294967295
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	43d9      	mvns	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	4313      	orrs	r3, r2
         );
}
 800183e:	4618      	mov	r0, r3
 8001840:	3724      	adds	r7, #36	@ 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	210f      	movs	r1, #15
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f7ff ff90 	bl	8001790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff2d 	bl	80016f4 <__NVIC_SetPriorityGrouping>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b4:	f7ff ff42 	bl	800173c <__NVIC_GetPriorityGrouping>
 80018b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f7ff ff90 	bl	80017e4 <NVIC_EncodePriority>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff5f 	bl	8001790 <__NVIC_SetPriority>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff35 	bl	8001758 <__NVIC_EnableIRQ>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffa2 	bl	8001848 <SysTick_Config>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800190e:	b480      	push	{r7}
 8001910:	b085      	sub	sp, #20
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d008      	beq.n	8001938 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2204      	movs	r2, #4
 800192a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e020      	b.n	800197a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 020e 	bic.w	r2, r2, #14
 8001946:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0201 	bic.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001960:	2101      	movs	r1, #1
 8001962:	fa01 f202 	lsl.w	r2, r1, r2
 8001966:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001978:	7bfb      	ldrb	r3, [r7, #15]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d005      	beq.n	80019a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2204      	movs	r2, #4
 80019a0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
 80019a6:	e051      	b.n	8001a4c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 020e 	bic.w	r2, r2, #14
 80019b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a22      	ldr	r2, [pc, #136]	@ (8001a58 <HAL_DMA_Abort_IT+0xd4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d029      	beq.n	8001a26 <HAL_DMA_Abort_IT+0xa2>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a21      	ldr	r2, [pc, #132]	@ (8001a5c <HAL_DMA_Abort_IT+0xd8>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d022      	beq.n	8001a22 <HAL_DMA_Abort_IT+0x9e>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001a60 <HAL_DMA_Abort_IT+0xdc>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d01a      	beq.n	8001a1c <HAL_DMA_Abort_IT+0x98>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001a64 <HAL_DMA_Abort_IT+0xe0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d012      	beq.n	8001a16 <HAL_DMA_Abort_IT+0x92>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a68 <HAL_DMA_Abort_IT+0xe4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d00a      	beq.n	8001a10 <HAL_DMA_Abort_IT+0x8c>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a1b      	ldr	r2, [pc, #108]	@ (8001a6c <HAL_DMA_Abort_IT+0xe8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d102      	bne.n	8001a0a <HAL_DMA_Abort_IT+0x86>
 8001a04:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001a08:	e00e      	b.n	8001a28 <HAL_DMA_Abort_IT+0xa4>
 8001a0a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a0e:	e00b      	b.n	8001a28 <HAL_DMA_Abort_IT+0xa4>
 8001a10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a14:	e008      	b.n	8001a28 <HAL_DMA_Abort_IT+0xa4>
 8001a16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a1a:	e005      	b.n	8001a28 <HAL_DMA_Abort_IT+0xa4>
 8001a1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a20:	e002      	b.n	8001a28 <HAL_DMA_Abort_IT+0xa4>
 8001a22:	2310      	movs	r3, #16
 8001a24:	e000      	b.n	8001a28 <HAL_DMA_Abort_IT+0xa4>
 8001a26:	2301      	movs	r3, #1
 8001a28:	4a11      	ldr	r2, [pc, #68]	@ (8001a70 <HAL_DMA_Abort_IT+0xec>)
 8001a2a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	4798      	blx	r3
    } 
  }
  return status;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40020008 	.word	0x40020008
 8001a5c:	4002001c 	.word	0x4002001c
 8001a60:	40020030 	.word	0x40020030
 8001a64:	40020044 	.word	0x40020044
 8001a68:	40020058 	.word	0x40020058
 8001a6c:	4002006c 	.word	0x4002006c
 8001a70:	40020000 	.word	0x40020000

08001a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b08b      	sub	sp, #44	@ 0x2c
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a86:	e161      	b.n	8001d4c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	f040 8150 	bne.w	8001d46 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	4a97      	ldr	r2, [pc, #604]	@ (8001d08 <HAL_GPIO_Init+0x294>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d05e      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001ab0:	4a95      	ldr	r2, [pc, #596]	@ (8001d08 <HAL_GPIO_Init+0x294>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d875      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ab6:	4a95      	ldr	r2, [pc, #596]	@ (8001d0c <HAL_GPIO_Init+0x298>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d058      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001abc:	4a93      	ldr	r2, [pc, #588]	@ (8001d0c <HAL_GPIO_Init+0x298>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d86f      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ac2:	4a93      	ldr	r2, [pc, #588]	@ (8001d10 <HAL_GPIO_Init+0x29c>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d052      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001ac8:	4a91      	ldr	r2, [pc, #580]	@ (8001d10 <HAL_GPIO_Init+0x29c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d869      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ace:	4a91      	ldr	r2, [pc, #580]	@ (8001d14 <HAL_GPIO_Init+0x2a0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d04c      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001ad4:	4a8f      	ldr	r2, [pc, #572]	@ (8001d14 <HAL_GPIO_Init+0x2a0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d863      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ada:	4a8f      	ldr	r2, [pc, #572]	@ (8001d18 <HAL_GPIO_Init+0x2a4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d046      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001ae0:	4a8d      	ldr	r2, [pc, #564]	@ (8001d18 <HAL_GPIO_Init+0x2a4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d85d      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ae6:	2b12      	cmp	r3, #18
 8001ae8:	d82a      	bhi.n	8001b40 <HAL_GPIO_Init+0xcc>
 8001aea:	2b12      	cmp	r3, #18
 8001aec:	d859      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001aee:	a201      	add	r2, pc, #4	@ (adr r2, 8001af4 <HAL_GPIO_Init+0x80>)
 8001af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af4:	08001b6f 	.word	0x08001b6f
 8001af8:	08001b49 	.word	0x08001b49
 8001afc:	08001b5b 	.word	0x08001b5b
 8001b00:	08001b9d 	.word	0x08001b9d
 8001b04:	08001ba3 	.word	0x08001ba3
 8001b08:	08001ba3 	.word	0x08001ba3
 8001b0c:	08001ba3 	.word	0x08001ba3
 8001b10:	08001ba3 	.word	0x08001ba3
 8001b14:	08001ba3 	.word	0x08001ba3
 8001b18:	08001ba3 	.word	0x08001ba3
 8001b1c:	08001ba3 	.word	0x08001ba3
 8001b20:	08001ba3 	.word	0x08001ba3
 8001b24:	08001ba3 	.word	0x08001ba3
 8001b28:	08001ba3 	.word	0x08001ba3
 8001b2c:	08001ba3 	.word	0x08001ba3
 8001b30:	08001ba3 	.word	0x08001ba3
 8001b34:	08001ba3 	.word	0x08001ba3
 8001b38:	08001b51 	.word	0x08001b51
 8001b3c:	08001b65 	.word	0x08001b65
 8001b40:	4a76      	ldr	r2, [pc, #472]	@ (8001d1c <HAL_GPIO_Init+0x2a8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d013      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b46:	e02c      	b.n	8001ba2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	623b      	str	r3, [r7, #32]
          break;
 8001b4e:	e029      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	3304      	adds	r3, #4
 8001b56:	623b      	str	r3, [r7, #32]
          break;
 8001b58:	e024      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	3308      	adds	r3, #8
 8001b60:	623b      	str	r3, [r7, #32]
          break;
 8001b62:	e01f      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	330c      	adds	r3, #12
 8001b6a:	623b      	str	r3, [r7, #32]
          break;
 8001b6c:	e01a      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d102      	bne.n	8001b7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b76:	2304      	movs	r3, #4
 8001b78:	623b      	str	r3, [r7, #32]
          break;
 8001b7a:	e013      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d105      	bne.n	8001b90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b84:	2308      	movs	r3, #8
 8001b86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	611a      	str	r2, [r3, #16]
          break;
 8001b8e:	e009      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b90:	2308      	movs	r3, #8
 8001b92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	615a      	str	r2, [r3, #20]
          break;
 8001b9a:	e003      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	623b      	str	r3, [r7, #32]
          break;
 8001ba0:	e000      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          break;
 8001ba2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2bff      	cmp	r3, #255	@ 0xff
 8001ba8:	d801      	bhi.n	8001bae <HAL_GPIO_Init+0x13a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	e001      	b.n	8001bb2 <HAL_GPIO_Init+0x13e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2bff      	cmp	r3, #255	@ 0xff
 8001bb8:	d802      	bhi.n	8001bc0 <HAL_GPIO_Init+0x14c>
 8001bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	e002      	b.n	8001bc6 <HAL_GPIO_Init+0x152>
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc2:	3b08      	subs	r3, #8
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	210f      	movs	r1, #15
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	6a39      	ldr	r1, [r7, #32]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	431a      	orrs	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 80a9 	beq.w	8001d46 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf4:	4b4a      	ldr	r3, [pc, #296]	@ (8001d20 <HAL_GPIO_Init+0x2ac>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4a49      	ldr	r2, [pc, #292]	@ (8001d20 <HAL_GPIO_Init+0x2ac>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6193      	str	r3, [r2, #24]
 8001c00:	4b47      	ldr	r3, [pc, #284]	@ (8001d20 <HAL_GPIO_Init+0x2ac>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c0c:	4a45      	ldr	r2, [pc, #276]	@ (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	220f      	movs	r2, #15
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a3d      	ldr	r2, [pc, #244]	@ (8001d28 <HAL_GPIO_Init+0x2b4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d00d      	beq.n	8001c54 <HAL_GPIO_Init+0x1e0>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a3c      	ldr	r2, [pc, #240]	@ (8001d2c <HAL_GPIO_Init+0x2b8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d007      	beq.n	8001c50 <HAL_GPIO_Init+0x1dc>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a3b      	ldr	r2, [pc, #236]	@ (8001d30 <HAL_GPIO_Init+0x2bc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d101      	bne.n	8001c4c <HAL_GPIO_Init+0x1d8>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e004      	b.n	8001c56 <HAL_GPIO_Init+0x1e2>
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e002      	b.n	8001c56 <HAL_GPIO_Init+0x1e2>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <HAL_GPIO_Init+0x1e2>
 8001c54:	2300      	movs	r3, #0
 8001c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c58:	f002 0203 	and.w	r2, r2, #3
 8001c5c:	0092      	lsls	r2, r2, #2
 8001c5e:	4093      	lsls	r3, r2
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c66:	492f      	ldr	r1, [pc, #188]	@ (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d006      	beq.n	8001c8e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c80:	4b2c      	ldr	r3, [pc, #176]	@ (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	492b      	ldr	r1, [pc, #172]	@ (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	608b      	str	r3, [r1, #8]
 8001c8c:	e006      	b.n	8001c9c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c8e:	4b29      	ldr	r3, [pc, #164]	@ (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	4927      	ldr	r1, [pc, #156]	@ (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ca8:	4b22      	ldr	r3, [pc, #136]	@ (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	4921      	ldr	r1, [pc, #132]	@ (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60cb      	str	r3, [r1, #12]
 8001cb4:	e006      	b.n	8001cc4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	491d      	ldr	r1, [pc, #116]	@ (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d006      	beq.n	8001cde <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cd0:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	4917      	ldr	r1, [pc, #92]	@ (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
 8001cdc:	e006      	b.n	8001cec <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cde:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	4913      	ldr	r1, [pc, #76]	@ (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d01f      	beq.n	8001d38 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	490d      	ldr	r1, [pc, #52]	@ (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	600b      	str	r3, [r1, #0]
 8001d04:	e01f      	b.n	8001d46 <HAL_GPIO_Init+0x2d2>
 8001d06:	bf00      	nop
 8001d08:	10320000 	.word	0x10320000
 8001d0c:	10310000 	.word	0x10310000
 8001d10:	10220000 	.word	0x10220000
 8001d14:	10210000 	.word	0x10210000
 8001d18:	10120000 	.word	0x10120000
 8001d1c:	10110000 	.word	0x10110000
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40010800 	.word	0x40010800
 8001d2c:	40010c00 	.word	0x40010c00
 8001d30:	40011000 	.word	0x40011000
 8001d34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <HAL_GPIO_Init+0x2f4>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	4909      	ldr	r1, [pc, #36]	@ (8001d68 <HAL_GPIO_Init+0x2f4>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	3301      	adds	r3, #1
 8001d4a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	fa22 f303 	lsr.w	r3, r2, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f47f ae96 	bne.w	8001a88 <HAL_GPIO_Init+0x14>
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	372c      	adds	r7, #44	@ 0x2c
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	40010400 	.word	0x40010400

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d88:	e003      	b.n	8001d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	611a      	str	r2, [r3, #16]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4013      	ands	r3, r2
 8001db4:	041a      	lsls	r2, r3, #16
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	43d9      	mvns	r1, r3
 8001dba:	887b      	ldrh	r3, [r7, #2]
 8001dbc:	400b      	ands	r3, r1
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	611a      	str	r2, [r3, #16]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
	...

08001dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e272      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 8087 	beq.w	8001efe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df0:	4b92      	ldr	r3, [pc, #584]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d00c      	beq.n	8001e16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dfc:	4b8f      	ldr	r3, [pc, #572]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d112      	bne.n	8001e2e <HAL_RCC_OscConfig+0x5e>
 8001e08:	4b8c      	ldr	r3, [pc, #560]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e14:	d10b      	bne.n	8001e2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e16:	4b89      	ldr	r3, [pc, #548]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d06c      	beq.n	8001efc <HAL_RCC_OscConfig+0x12c>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d168      	bne.n	8001efc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e24c      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e36:	d106      	bne.n	8001e46 <HAL_RCC_OscConfig+0x76>
 8001e38:	4b80      	ldr	r3, [pc, #512]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a7f      	ldr	r2, [pc, #508]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	e02e      	b.n	8001ea4 <HAL_RCC_OscConfig+0xd4>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x98>
 8001e4e:	4b7b      	ldr	r3, [pc, #492]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a7a      	ldr	r2, [pc, #488]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b78      	ldr	r3, [pc, #480]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a77      	ldr	r2, [pc, #476]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	e01d      	b.n	8001ea4 <HAL_RCC_OscConfig+0xd4>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0xbc>
 8001e72:	4b72      	ldr	r3, [pc, #456]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a71      	ldr	r2, [pc, #452]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	4b6f      	ldr	r3, [pc, #444]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a6e      	ldr	r2, [pc, #440]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e00b      	b.n	8001ea4 <HAL_RCC_OscConfig+0xd4>
 8001e8c:	4b6b      	ldr	r3, [pc, #428]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a6a      	ldr	r2, [pc, #424]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b68      	ldr	r3, [pc, #416]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a67      	ldr	r2, [pc, #412]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ea2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d013      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fbf4 	bl	8001698 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7ff fbf0 	bl	8001698 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	@ 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e200      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0xe4>
 8001ed2:	e014      	b.n	8001efe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff fbe0 	bl	8001698 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7ff fbdc 	bl	8001698 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	@ 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e1ec      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eee:	4b53      	ldr	r3, [pc, #332]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x10c>
 8001efa:	e000      	b.n	8001efe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d063      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f0a:	4b4c      	ldr	r3, [pc, #304]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00b      	beq.n	8001f2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f16:	4b49      	ldr	r3, [pc, #292]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d11c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x18c>
 8001f22:	4b46      	ldr	r3, [pc, #280]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d116      	bne.n	8001f5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2e:	4b43      	ldr	r3, [pc, #268]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d005      	beq.n	8001f46 <HAL_RCC_OscConfig+0x176>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d001      	beq.n	8001f46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e1c0      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f46:	4b3d      	ldr	r3, [pc, #244]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4939      	ldr	r1, [pc, #228]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5a:	e03a      	b.n	8001fd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d020      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f64:	4b36      	ldr	r3, [pc, #216]	@ (8002040 <HAL_RCC_OscConfig+0x270>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7ff fb95 	bl	8001698 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f72:	f7ff fb91 	bl	8001698 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e1a1      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f84:	4b2d      	ldr	r3, [pc, #180]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f90:	4b2a      	ldr	r3, [pc, #168]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4927      	ldr	r1, [pc, #156]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
 8001fa4:	e015      	b.n	8001fd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa6:	4b26      	ldr	r3, [pc, #152]	@ (8002040 <HAL_RCC_OscConfig+0x270>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff fb74 	bl	8001698 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb4:	f7ff fb70 	bl	8001698 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e180      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d03a      	beq.n	8002054 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d019      	beq.n	800201a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe6:	4b17      	ldr	r3, [pc, #92]	@ (8002044 <HAL_RCC_OscConfig+0x274>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fec:	f7ff fb54 	bl	8001698 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff4:	f7ff fb50 	bl	8001698 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e160      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002006:	4b0d      	ldr	r3, [pc, #52]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8002008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002012:	2001      	movs	r0, #1
 8002014:	f000 face 	bl	80025b4 <RCC_Delay>
 8002018:	e01c      	b.n	8002054 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201a:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <HAL_RCC_OscConfig+0x274>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002020:	f7ff fb3a 	bl	8001698 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002026:	e00f      	b.n	8002048 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002028:	f7ff fb36 	bl	8001698 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d908      	bls.n	8002048 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e146      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	42420000 	.word	0x42420000
 8002044:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002048:	4b92      	ldr	r3, [pc, #584]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 800204a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1e9      	bne.n	8002028 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80a6 	beq.w	80021ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002066:	4b8b      	ldr	r3, [pc, #556]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10d      	bne.n	800208e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	4b88      	ldr	r3, [pc, #544]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	4a87      	ldr	r2, [pc, #540]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207c:	61d3      	str	r3, [r2, #28]
 800207e:	4b85      	ldr	r3, [pc, #532]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208a:	2301      	movs	r3, #1
 800208c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208e:	4b82      	ldr	r3, [pc, #520]	@ (8002298 <HAL_RCC_OscConfig+0x4c8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d118      	bne.n	80020cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209a:	4b7f      	ldr	r3, [pc, #508]	@ (8002298 <HAL_RCC_OscConfig+0x4c8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a7e      	ldr	r2, [pc, #504]	@ (8002298 <HAL_RCC_OscConfig+0x4c8>)
 80020a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a6:	f7ff faf7 	bl	8001698 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ae:	f7ff faf3 	bl	8001698 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b64      	cmp	r3, #100	@ 0x64
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e103      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	4b75      	ldr	r3, [pc, #468]	@ (8002298 <HAL_RCC_OscConfig+0x4c8>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d106      	bne.n	80020e2 <HAL_RCC_OscConfig+0x312>
 80020d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6213      	str	r3, [r2, #32]
 80020e0:	e02d      	b.n	800213e <HAL_RCC_OscConfig+0x36e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0x334>
 80020ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	4a69      	ldr	r2, [pc, #420]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	6213      	str	r3, [r2, #32]
 80020f6:	4b67      	ldr	r3, [pc, #412]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4a66      	ldr	r2, [pc, #408]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	f023 0304 	bic.w	r3, r3, #4
 8002100:	6213      	str	r3, [r2, #32]
 8002102:	e01c      	b.n	800213e <HAL_RCC_OscConfig+0x36e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b05      	cmp	r3, #5
 800210a:	d10c      	bne.n	8002126 <HAL_RCC_OscConfig+0x356>
 800210c:	4b61      	ldr	r3, [pc, #388]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4a60      	ldr	r2, [pc, #384]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002112:	f043 0304 	orr.w	r3, r3, #4
 8002116:	6213      	str	r3, [r2, #32]
 8002118:	4b5e      	ldr	r3, [pc, #376]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4a5d      	ldr	r2, [pc, #372]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6213      	str	r3, [r2, #32]
 8002124:	e00b      	b.n	800213e <HAL_RCC_OscConfig+0x36e>
 8002126:	4b5b      	ldr	r3, [pc, #364]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	4a5a      	ldr	r2, [pc, #360]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	f023 0301 	bic.w	r3, r3, #1
 8002130:	6213      	str	r3, [r2, #32]
 8002132:	4b58      	ldr	r3, [pc, #352]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	4a57      	ldr	r2, [pc, #348]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	f023 0304 	bic.w	r3, r3, #4
 800213c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d015      	beq.n	8002172 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002146:	f7ff faa7 	bl	8001698 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7ff faa3 	bl	8001698 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e0b1      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002164:	4b4b      	ldr	r3, [pc, #300]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0ee      	beq.n	800214e <HAL_RCC_OscConfig+0x37e>
 8002170:	e014      	b.n	800219c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002172:	f7ff fa91 	bl	8001698 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7ff fa8d 	bl	8001698 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e09b      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002190:	4b40      	ldr	r3, [pc, #256]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1ee      	bne.n	800217a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800219c:	7dfb      	ldrb	r3, [r7, #23]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d105      	bne.n	80021ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 8087 	beq.w	80022c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b8:	4b36      	ldr	r3, [pc, #216]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d061      	beq.n	8002288 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d146      	bne.n	800225a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021cc:	4b33      	ldr	r3, [pc, #204]	@ (800229c <HAL_RCC_OscConfig+0x4cc>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d2:	f7ff fa61 	bl	8001698 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021da:	f7ff fa5d 	bl	8001698 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e06d      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ec:	4b29      	ldr	r3, [pc, #164]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f0      	bne.n	80021da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002200:	d108      	bne.n	8002214 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002202:	4b24      	ldr	r3, [pc, #144]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	4921      	ldr	r1, [pc, #132]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002214:	4b1f      	ldr	r3, [pc, #124]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a19      	ldr	r1, [r3, #32]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002224:	430b      	orrs	r3, r1
 8002226:	491b      	ldr	r1, [pc, #108]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800222c:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <HAL_RCC_OscConfig+0x4cc>)
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7ff fa31 	bl	8001698 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223a:	f7ff fa2d 	bl	8001698 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e03d      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800224c:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x46a>
 8002258:	e035      	b.n	80022c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225a:	4b10      	ldr	r3, [pc, #64]	@ (800229c <HAL_RCC_OscConfig+0x4cc>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7ff fa1a 	bl	8001698 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002268:	f7ff fa16 	bl	8001698 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e026      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227a:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x498>
 8002286:	e01e      	b.n	80022c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d107      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e019      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
 8002294:	40021000 	.word	0x40021000
 8002298:	40007000 	.word	0x40007000
 800229c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022a0:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <HAL_RCC_OscConfig+0x500>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d106      	bne.n	80022c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d001      	beq.n	80022c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40021000 	.word	0x40021000

080022d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0d0      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d910      	bls.n	8002318 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b67      	ldr	r3, [pc, #412]	@ (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 0207 	bic.w	r2, r3, #7
 80022fe:	4965      	ldr	r1, [pc, #404]	@ (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b63      	ldr	r3, [pc, #396]	@ (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0b8      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d020      	beq.n	8002366 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002330:	4b59      	ldr	r3, [pc, #356]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4a58      	ldr	r2, [pc, #352]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800233a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002348:	4b53      	ldr	r3, [pc, #332]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4a52      	ldr	r2, [pc, #328]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002352:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002354:	4b50      	ldr	r3, [pc, #320]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	494d      	ldr	r1, [pc, #308]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d040      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	4b47      	ldr	r3, [pc, #284]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d115      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e07f      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002392:	4b41      	ldr	r3, [pc, #260]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e073      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e06b      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b2:	4b39      	ldr	r3, [pc, #228]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f023 0203 	bic.w	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4936      	ldr	r1, [pc, #216]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c4:	f7ff f968 	bl	8001698 <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023cc:	f7ff f964 	bl	8001698 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e053      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 020c 	and.w	r2, r3, #12
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d1eb      	bne.n	80023cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f4:	4b27      	ldr	r3, [pc, #156]	@ (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d210      	bcs.n	8002424 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b24      	ldr	r3, [pc, #144]	@ (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 0207 	bic.w	r2, r3, #7
 800240a:	4922      	ldr	r1, [pc, #136]	@ (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	4b20      	ldr	r3, [pc, #128]	@ (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e032      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002430:	4b19      	ldr	r3, [pc, #100]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4916      	ldr	r1, [pc, #88]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d009      	beq.n	8002462 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800244e:	4b12      	ldr	r3, [pc, #72]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	490e      	ldr	r1, [pc, #56]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002462:	f000 f821 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8002466:	4602      	mov	r2, r0
 8002468:	4b0b      	ldr	r3, [pc, #44]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	490a      	ldr	r1, [pc, #40]	@ (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002474:	5ccb      	ldrb	r3, [r1, r3]
 8002476:	fa22 f303 	lsr.w	r3, r2, r3
 800247a:	4a09      	ldr	r2, [pc, #36]	@ (80024a0 <HAL_RCC_ClockConfig+0x1cc>)
 800247c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800247e:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff f8c6 	bl	8001614 <HAL_InitTick>

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40022000 	.word	0x40022000
 8002498:	40021000 	.word	0x40021000
 800249c:	0800522c 	.word	0x0800522c
 80024a0:	2000011c 	.word	0x2000011c
 80024a4:	20000120 	.word	0x20000120

080024a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	2300      	movs	r3, #0
 80024bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024c2:	4b1e      	ldr	r3, [pc, #120]	@ (800253c <HAL_RCC_GetSysClockFreq+0x94>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d002      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0x30>
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d003      	beq.n	80024de <HAL_RCC_GetSysClockFreq+0x36>
 80024d6:	e027      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024d8:	4b19      	ldr	r3, [pc, #100]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x98>)
 80024da:	613b      	str	r3, [r7, #16]
      break;
 80024dc:	e027      	b.n	800252e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	0c9b      	lsrs	r3, r3, #18
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	4a17      	ldr	r2, [pc, #92]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024e8:	5cd3      	ldrb	r3, [r2, r3]
 80024ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d010      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024f6:	4b11      	ldr	r3, [pc, #68]	@ (800253c <HAL_RCC_GetSysClockFreq+0x94>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	0c5b      	lsrs	r3, r3, #17
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	4a11      	ldr	r2, [pc, #68]	@ (8002548 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002502:	5cd3      	ldrb	r3, [r2, r3]
 8002504:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a0d      	ldr	r2, [pc, #52]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x98>)
 800250a:	fb03 f202 	mul.w	r2, r3, r2
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	fbb2 f3f3 	udiv	r3, r2, r3
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	e004      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a0c      	ldr	r2, [pc, #48]	@ (800254c <HAL_RCC_GetSysClockFreq+0xa4>)
 800251c:	fb02 f303 	mul.w	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	613b      	str	r3, [r7, #16]
      break;
 8002526:	e002      	b.n	800252e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002528:	4b05      	ldr	r3, [pc, #20]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x98>)
 800252a:	613b      	str	r3, [r7, #16]
      break;
 800252c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800252e:	693b      	ldr	r3, [r7, #16]
}
 8002530:	4618      	mov	r0, r3
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
 8002540:	007a1200 	.word	0x007a1200
 8002544:	08005244 	.word	0x08005244
 8002548:	08005254 	.word	0x08005254
 800254c:	003d0900 	.word	0x003d0900

08002550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002554:	4b02      	ldr	r3, [pc, #8]	@ (8002560 <HAL_RCC_GetHCLKFreq+0x10>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	2000011c 	.word	0x2000011c

08002564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002568:	f7ff fff2 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4903      	ldr	r1, [pc, #12]	@ (8002588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000
 8002588:	0800523c 	.word	0x0800523c

0800258c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002590:	f7ff ffde 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8002594:	4602      	mov	r2, r0
 8002596:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	0adb      	lsrs	r3, r3, #11
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	4903      	ldr	r1, [pc, #12]	@ (80025b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a2:	5ccb      	ldrb	r3, [r1, r3]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000
 80025b0:	0800523c 	.word	0x0800523c

080025b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025bc:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <RCC_Delay+0x34>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0a      	ldr	r2, [pc, #40]	@ (80025ec <RCC_Delay+0x38>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	0a5b      	lsrs	r3, r3, #9
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	fb02 f303 	mul.w	r3, r2, r3
 80025ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025d0:	bf00      	nop
  }
  while (Delay --);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1e5a      	subs	r2, r3, #1
 80025d6:	60fa      	str	r2, [r7, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f9      	bne.n	80025d0 <RCC_Delay+0x1c>
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	2000011c 	.word	0x2000011c
 80025ec:	10624dd3 	.word	0x10624dd3

080025f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e041      	b.n	8002686 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fe fd90 	bl	800113c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3304      	adds	r3, #4
 800262c:	4619      	mov	r1, r3
 800262e:	4610      	mov	r0, r2
 8002630:	f000 f98c 	bl	800294c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d109      	bne.n	80026b4 <HAL_TIM_PWM_Start+0x24>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	bf14      	ite	ne
 80026ac:	2301      	movne	r3, #1
 80026ae:	2300      	moveq	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	e022      	b.n	80026fa <HAL_TIM_PWM_Start+0x6a>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d109      	bne.n	80026ce <HAL_TIM_PWM_Start+0x3e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	bf14      	ite	ne
 80026c6:	2301      	movne	r3, #1
 80026c8:	2300      	moveq	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	e015      	b.n	80026fa <HAL_TIM_PWM_Start+0x6a>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d109      	bne.n	80026e8 <HAL_TIM_PWM_Start+0x58>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b01      	cmp	r3, #1
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	e008      	b.n	80026fa <HAL_TIM_PWM_Start+0x6a>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e059      	b.n	80027b6 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d104      	bne.n	8002712 <HAL_TIM_PWM_Start+0x82>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002710:	e013      	b.n	800273a <HAL_TIM_PWM_Start+0xaa>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d104      	bne.n	8002722 <HAL_TIM_PWM_Start+0x92>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002720:	e00b      	b.n	800273a <HAL_TIM_PWM_Start+0xaa>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b08      	cmp	r3, #8
 8002726:	d104      	bne.n	8002732 <HAL_TIM_PWM_Start+0xa2>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002730:	e003      	b.n	800273a <HAL_TIM_PWM_Start+0xaa>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2201      	movs	r2, #1
 8002740:	6839      	ldr	r1, [r7, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f000 faee 	bl	8002d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1c      	ldr	r2, [pc, #112]	@ (80027c0 <HAL_TIM_PWM_Start+0x130>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d107      	bne.n	8002762 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002760:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a16      	ldr	r2, [pc, #88]	@ (80027c0 <HAL_TIM_PWM_Start+0x130>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d009      	beq.n	8002780 <HAL_TIM_PWM_Start+0xf0>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002774:	d004      	beq.n	8002780 <HAL_TIM_PWM_Start+0xf0>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a12      	ldr	r2, [pc, #72]	@ (80027c4 <HAL_TIM_PWM_Start+0x134>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d111      	bne.n	80027a4 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b06      	cmp	r3, #6
 8002790:	d010      	beq.n	80027b4 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0201 	orr.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a2:	e007      	b.n	80027b4 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40012c00 	.word	0x40012c00
 80027c4:	40000400 	.word	0x40000400

080027c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e0ae      	b.n	8002944 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b0c      	cmp	r3, #12
 80027f2:	f200 809f 	bhi.w	8002934 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80027f6:	a201      	add	r2, pc, #4	@ (adr r2, 80027fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fc:	08002831 	.word	0x08002831
 8002800:	08002935 	.word	0x08002935
 8002804:	08002935 	.word	0x08002935
 8002808:	08002935 	.word	0x08002935
 800280c:	08002871 	.word	0x08002871
 8002810:	08002935 	.word	0x08002935
 8002814:	08002935 	.word	0x08002935
 8002818:	08002935 	.word	0x08002935
 800281c:	080028b3 	.word	0x080028b3
 8002820:	08002935 	.word	0x08002935
 8002824:	08002935 	.word	0x08002935
 8002828:	08002935 	.word	0x08002935
 800282c:	080028f3 	.word	0x080028f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	4618      	mov	r0, r3
 8002838:	f000 f8ec 	bl	8002a14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699a      	ldr	r2, [r3, #24]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0208 	orr.w	r2, r2, #8
 800284a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0204 	bic.w	r2, r2, #4
 800285a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6999      	ldr	r1, [r3, #24]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	619a      	str	r2, [r3, #24]
      break;
 800286e:	e064      	b.n	800293a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f932 	bl	8002ae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800288a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800289a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6999      	ldr	r1, [r3, #24]
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	021a      	lsls	r2, r3, #8
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	619a      	str	r2, [r3, #24]
      break;
 80028b0:	e043      	b.n	800293a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 f97b 	bl	8002bb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	69da      	ldr	r2, [r3, #28]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0208 	orr.w	r2, r2, #8
 80028cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69da      	ldr	r2, [r3, #28]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0204 	bic.w	r2, r2, #4
 80028dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	69d9      	ldr	r1, [r3, #28]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	61da      	str	r2, [r3, #28]
      break;
 80028f0:	e023      	b.n	800293a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68b9      	ldr	r1, [r7, #8]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 f9c5 	bl	8002c88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	69da      	ldr	r2, [r3, #28]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800290c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	69da      	ldr	r2, [r3, #28]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800291c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69d9      	ldr	r1, [r3, #28]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	021a      	lsls	r2, r3, #8
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	61da      	str	r2, [r3, #28]
      break;
 8002932:	e002      	b.n	800293a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	75fb      	strb	r3, [r7, #23]
      break;
 8002938:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002942:	7dfb      	ldrb	r3, [r7, #23]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a2b      	ldr	r2, [pc, #172]	@ (8002a0c <TIM_Base_SetConfig+0xc0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d007      	beq.n	8002974 <TIM_Base_SetConfig+0x28>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800296a:	d003      	beq.n	8002974 <TIM_Base_SetConfig+0x28>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a28      	ldr	r2, [pc, #160]	@ (8002a10 <TIM_Base_SetConfig+0xc4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d108      	bne.n	8002986 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800297a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a20      	ldr	r2, [pc, #128]	@ (8002a0c <TIM_Base_SetConfig+0xc0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d007      	beq.n	800299e <TIM_Base_SetConfig+0x52>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002994:	d003      	beq.n	800299e <TIM_Base_SetConfig+0x52>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a1d      	ldr	r2, [pc, #116]	@ (8002a10 <TIM_Base_SetConfig+0xc4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d108      	bne.n	80029b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a0d      	ldr	r2, [pc, #52]	@ (8002a0c <TIM_Base_SetConfig+0xc0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d103      	bne.n	80029e4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f023 0201 	bic.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	611a      	str	r2, [r3, #16]
  }
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	40012c00 	.word	0x40012c00
 8002a10:	40000400 	.word	0x40000400

08002a14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	f023 0201 	bic.w	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f023 0303 	bic.w	r3, r3, #3
 8002a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f023 0302 	bic.w	r3, r3, #2
 8002a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002adc <TIM_OC1_SetConfig+0xc8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d10c      	bne.n	8002a8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f023 0308 	bic.w	r3, r3, #8
 8002a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f023 0304 	bic.w	r3, r3, #4
 8002a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a13      	ldr	r2, [pc, #76]	@ (8002adc <TIM_OC1_SetConfig+0xc8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d111      	bne.n	8002ab6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	621a      	str	r2, [r3, #32]
}
 8002ad0:	bf00      	nop
 8002ad2:	371c      	adds	r7, #28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40012c00 	.word	0x40012c00

08002ae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f023 0210 	bic.w	r2, r3, #16
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f023 0320 	bic.w	r3, r3, #32
 8002b2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb0 <TIM_OC2_SetConfig+0xd0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d10d      	bne.n	8002b5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a14      	ldr	r2, [pc, #80]	@ (8002bb0 <TIM_OC2_SetConfig+0xd0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d113      	bne.n	8002b8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	621a      	str	r2, [r3, #32]
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	40012c00 	.word	0x40012c00

08002bb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f023 0303 	bic.w	r3, r3, #3
 8002bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c84 <TIM_OC3_SetConfig+0xd0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d10d      	bne.n	8002c2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	021b      	lsls	r3, r3, #8
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a14      	ldr	r2, [pc, #80]	@ (8002c84 <TIM_OC3_SetConfig+0xd0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d113      	bne.n	8002c5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	621a      	str	r2, [r3, #32]
}
 8002c78:	bf00      	nop
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40012c00 	.word	0x40012c00

08002c88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	031b      	lsls	r3, r3, #12
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a0f      	ldr	r2, [pc, #60]	@ (8002d20 <TIM_OC4_SetConfig+0x98>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d109      	bne.n	8002cfc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	019b      	lsls	r3, r3, #6
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr
 8002d20:	40012c00 	.word	0x40012c00

08002d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	2201      	movs	r2, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a1a      	ldr	r2, [r3, #32]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	401a      	ands	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a1a      	ldr	r2, [r3, #32]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	621a      	str	r2, [r3, #32]
}
 8002d62:	bf00      	nop
 8002d64:	371c      	adds	r7, #28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e041      	b.n	8002e08 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002daa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a14      	ldr	r2, [pc, #80]	@ (8002e14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d009      	beq.n	8002ddc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd0:	d004      	beq.n	8002ddc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a10      	ldr	r2, [pc, #64]	@ (8002e18 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d10c      	bne.n	8002df6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002de2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40012c00 	.word	0x40012c00
 8002e18:	40000400 	.word	0x40000400

08002e1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e03d      	b.n	8002eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e042      	b.n	8002f56 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d106      	bne.n	8002eea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7fe f9f9 	bl	80012dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2224      	movs	r2, #36	@ 0x24
 8002eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f00:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fe4e 	bl	8003ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691a      	ldr	r2, [r3, #16]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f26:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f36:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b08a      	sub	sp, #40	@ 0x28
 8002f62:	af02      	add	r7, sp, #8
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	d175      	bne.n	800306a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <HAL_UART_Transmit+0x2c>
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e06e      	b.n	800306c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2221      	movs	r2, #33	@ 0x21
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f9c:	f7fe fb7c 	bl	8001698 <HAL_GetTick>
 8002fa0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	88fa      	ldrh	r2, [r7, #6]
 8002fa6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	88fa      	ldrh	r2, [r7, #6]
 8002fac:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fb6:	d108      	bne.n	8002fca <HAL_UART_Transmit+0x6c>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d104      	bne.n	8002fca <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	e003      	b.n	8002fd2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fd2:	e02e      	b.n	8003032 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2180      	movs	r1, #128	@ 0x80
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fbb3 	bl	800374a <UART_WaitOnFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d005      	beq.n	8002ff6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e03a      	b.n	800306c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10b      	bne.n	8003014 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800300a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	3302      	adds	r3, #2
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	e007      	b.n	8003024 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	781a      	ldrb	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3301      	adds	r3, #1
 8003022:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1cb      	bne.n	8002fd4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2200      	movs	r2, #0
 8003044:	2140      	movs	r1, #64	@ 0x40
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fb7f 	bl	800374a <UART_WaitOnFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e006      	b.n	800306c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	e000      	b.n	800306c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800306a:	2302      	movs	r3, #2
  }
}
 800306c:	4618      	mov	r0, r3
 800306e:	3720      	adds	r7, #32
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	@ 0x28
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	4613      	mov	r3, r2
 8003082:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b20      	cmp	r3, #32
 8003092:	f040 8081 	bne.w	8003198 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <HAL_UART_Receive+0x2e>
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e079      	b.n	800319a <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2222      	movs	r2, #34	@ 0x22
 80030b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030ba:	f7fe faed 	bl	8001698 <HAL_GetTick>
 80030be:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	88fa      	ldrh	r2, [r7, #6]
 80030c4:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	88fa      	ldrh	r2, [r7, #6]
 80030ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030d4:	d108      	bne.n	80030e8 <HAL_UART_Receive+0x74>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d104      	bne.n	80030e8 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	e003      	b.n	80030f0 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80030f0:	e047      	b.n	8003182 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2200      	movs	r2, #0
 80030fa:	2120      	movs	r1, #32
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 fb24 	bl	800374a <UART_WaitOnFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e042      	b.n	800319a <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10c      	bne.n	8003134 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	b29b      	uxth	r3, r3
 8003122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003126:	b29a      	uxth	r2, r3
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	3302      	adds	r3, #2
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	e01f      	b.n	8003174 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800313c:	d007      	beq.n	800314e <HAL_UART_Receive+0xda>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10a      	bne.n	800315c <HAL_UART_Receive+0xe8>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	e008      	b.n	800316e <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003168:	b2da      	uxtb	r2, r3
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3301      	adds	r3, #1
 8003172:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1b2      	bne.n	80030f2 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	e000      	b.n	800319a <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003198:	2302      	movs	r3, #2
  }
}
 800319a:	4618      	mov	r0, r3
 800319c:	3720      	adds	r7, #32
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	4613      	mov	r3, r2
 80031ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d112      	bne.n	80031e2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_UART_Receive_IT+0x26>
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e00b      	b.n	80031e4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	461a      	mov	r2, r3
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fb0f 	bl	80037fc <UART_Start_Receive_IT>
 80031de:	4603      	mov	r3, r0
 80031e0:	e000      	b.n	80031e4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80031e2:	2302      	movs	r3, #2
  }
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b0ba      	sub	sp, #232	@ 0xe8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003212:	2300      	movs	r3, #0
 8003214:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003218:	2300      	movs	r3, #0
 800321a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800321e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800322a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10f      	bne.n	8003252 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <HAL_UART_IRQHandler+0x66>
 800323e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fbec 	bl	8003a28 <UART_Receive_IT>
      return;
 8003250:	e25b      	b.n	800370a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003252:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80de 	beq.w	8003418 <HAL_UART_IRQHandler+0x22c>
 800325c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800326c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80d1 	beq.w	8003418 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00b      	beq.n	800329a <HAL_UART_IRQHandler+0xae>
 8003282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	f043 0201 	orr.w	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800329a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00b      	beq.n	80032be <HAL_UART_IRQHandler+0xd2>
 80032a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b6:	f043 0202 	orr.w	r2, r3, #2
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <HAL_UART_IRQHandler+0xf6>
 80032ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032da:	f043 0204 	orr.w	r2, r3, #4
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d011      	beq.n	8003312 <HAL_UART_IRQHandler+0x126>
 80032ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d105      	bne.n	8003306 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330a:	f043 0208 	orr.w	r2, r3, #8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 81f2 	beq.w	8003700 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800331c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_UART_IRQHandler+0x14e>
 8003328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fb77 	bl	8003a28 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf14      	ite	ne
 8003348:	2301      	movne	r3, #1
 800334a:	2300      	moveq	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <HAL_UART_IRQHandler+0x17a>
 800335e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003362:	2b00      	cmp	r3, #0
 8003364:	d04f      	beq.n	8003406 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fa81 	bl	800386e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d041      	beq.n	80033fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3314      	adds	r3, #20
 8003380:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003384:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003390:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003394:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003398:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3314      	adds	r3, #20
 80033a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80033aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80033b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033b6:	e841 2300 	strex	r3, r2, [r1]
 80033ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80033be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1d9      	bne.n	800337a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d013      	beq.n	80033f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d2:	4a7e      	ldr	r2, [pc, #504]	@ (80035cc <HAL_UART_IRQHandler+0x3e0>)
 80033d4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fe fad2 	bl	8001984 <HAL_DMA_Abort_IT>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d016      	beq.n	8003414 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033f0:	4610      	mov	r0, r2
 80033f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f4:	e00e      	b.n	8003414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f993 	bl	8003722 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033fc:	e00a      	b.n	8003414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f98f 	bl	8003722 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003404:	e006      	b.n	8003414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f98b 	bl	8003722 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003412:	e175      	b.n	8003700 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003414:	bf00      	nop
    return;
 8003416:	e173      	b.n	8003700 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341c:	2b01      	cmp	r3, #1
 800341e:	f040 814f 	bne.w	80036c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 8148 	beq.w	80036c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 8141 	beq.w	80036c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800343e:	2300      	movs	r3, #0
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80b6 	beq.w	80035d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003470:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 8145 	beq.w	8003704 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800347e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003482:	429a      	cmp	r2, r3
 8003484:	f080 813e 	bcs.w	8003704 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800348e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b20      	cmp	r3, #32
 8003498:	f000 8088 	beq.w	80035ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	330c      	adds	r3, #12
 80034a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80034b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	330c      	adds	r3, #12
 80034c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80034c8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034d8:	e841 2300 	strex	r3, r2, [r1]
 80034dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80034e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1d9      	bne.n	800349c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3314      	adds	r3, #20
 80034ee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034f2:	e853 3f00 	ldrex	r3, [r3]
 80034f6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80034f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3314      	adds	r3, #20
 8003508:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800350c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003510:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003512:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003514:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003518:	e841 2300 	strex	r3, r2, [r1]
 800351c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800351e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1e1      	bne.n	80034e8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3314      	adds	r3, #20
 800352a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800352e:	e853 3f00 	ldrex	r3, [r3]
 8003532:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003534:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003536:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800353a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3314      	adds	r3, #20
 8003544:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003548:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800354a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800354e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003550:	e841 2300 	strex	r3, r2, [r1]
 8003554:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003556:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e3      	bne.n	8003524 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003574:	e853 3f00 	ldrex	r3, [r3]
 8003578:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800357a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800357c:	f023 0310 	bic.w	r3, r3, #16
 8003580:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	330c      	adds	r3, #12
 800358a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800358e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003590:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003594:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800359c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e3      	bne.n	800356a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fe f9b1 	bl	800190e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	b29b      	uxth	r3, r3
 80035c0:	4619      	mov	r1, r3
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f8b6 	bl	8003734 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035c8:	e09c      	b.n	8003704 <HAL_UART_IRQHandler+0x518>
 80035ca:	bf00      	nop
 80035cc:	08003933 	.word	0x08003933
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035d8:	b29b      	uxth	r3, r3
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 808e 	beq.w	8003708 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80035ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8089 	beq.w	8003708 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	330c      	adds	r3, #12
 80035fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003600:	e853 3f00 	ldrex	r3, [r3]
 8003604:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003608:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800360c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	330c      	adds	r3, #12
 8003616:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800361a:	647a      	str	r2, [r7, #68]	@ 0x44
 800361c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003620:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003622:	e841 2300 	strex	r3, r2, [r1]
 8003626:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1e3      	bne.n	80035f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3314      	adds	r3, #20
 8003634:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003638:	e853 3f00 	ldrex	r3, [r3]
 800363c:	623b      	str	r3, [r7, #32]
   return(result);
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3314      	adds	r3, #20
 800364e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003652:	633a      	str	r2, [r7, #48]	@ 0x30
 8003654:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003656:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e3      	bne.n	800362e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	330c      	adds	r3, #12
 800367a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	e853 3f00 	ldrex	r3, [r3]
 8003682:	60fb      	str	r3, [r7, #12]
   return(result);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0310 	bic.w	r3, r3, #16
 800368a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	330c      	adds	r3, #12
 8003694:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003698:	61fa      	str	r2, [r7, #28]
 800369a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369c:	69b9      	ldr	r1, [r7, #24]
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	e841 2300 	strex	r3, r2, [r1]
 80036a4:	617b      	str	r3, [r7, #20]
   return(result);
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e3      	bne.n	8003674 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036b6:	4619      	mov	r1, r3
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f83b 	bl	8003734 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036be:	e023      	b.n	8003708 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d009      	beq.n	80036e0 <HAL_UART_IRQHandler+0x4f4>
 80036cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f93e 	bl	800395a <UART_Transmit_IT>
    return;
 80036de:	e014      	b.n	800370a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00e      	beq.n	800370a <HAL_UART_IRQHandler+0x51e>
 80036ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f97d 	bl	80039f8 <UART_EndTransmit_IT>
    return;
 80036fe:	e004      	b.n	800370a <HAL_UART_IRQHandler+0x51e>
    return;
 8003700:	bf00      	nop
 8003702:	e002      	b.n	800370a <HAL_UART_IRQHandler+0x51e>
      return;
 8003704:	bf00      	nop
 8003706:	e000      	b.n	800370a <HAL_UART_IRQHandler+0x51e>
      return;
 8003708:	bf00      	nop
  }
}
 800370a:	37e8      	adds	r7, #232	@ 0xe8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr

08003722 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr

08003734 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr

0800374a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800375a:	e03b      	b.n	80037d4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003762:	d037      	beq.n	80037d4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003764:	f7fd ff98 	bl	8001698 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	6a3a      	ldr	r2, [r7, #32]
 8003770:	429a      	cmp	r2, r3
 8003772:	d302      	bcc.n	800377a <UART_WaitOnFlagUntilTimeout+0x30>
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e03a      	b.n	80037f4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d023      	beq.n	80037d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b80      	cmp	r3, #128	@ 0x80
 8003790:	d020      	beq.n	80037d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b40      	cmp	r3, #64	@ 0x40
 8003796:	d01d      	beq.n	80037d4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d116      	bne.n	80037d4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f856 	bl	800386e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2208      	movs	r2, #8
 80037c6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e00f      	b.n	80037f4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4013      	ands	r3, r2
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d0b4      	beq.n	800375c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	4613      	mov	r3, r2
 8003808:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	88fa      	ldrh	r2, [r7, #6]
 8003814:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	88fa      	ldrh	r2, [r7, #6]
 800381a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2222      	movs	r2, #34	@ 0x22
 8003826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d007      	beq.n	8003842 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003840:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 0201 	orr.w	r2, r2, #1
 8003850:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0220 	orr.w	r2, r2, #32
 8003860:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr

0800386e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800386e:	b480      	push	{r7}
 8003870:	b095      	sub	sp, #84	@ 0x54
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	330c      	adds	r3, #12
 800387c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003888:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800388c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	330c      	adds	r3, #12
 8003894:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003896:	643a      	str	r2, [r7, #64]	@ 0x40
 8003898:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800389c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800389e:	e841 2300 	strex	r3, r2, [r1]
 80038a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1e5      	bne.n	8003876 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3314      	adds	r3, #20
 80038b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3314      	adds	r3, #20
 80038c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e5      	bne.n	80038aa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d119      	bne.n	800391a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	330c      	adds	r3, #12
 80038ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	e853 3f00 	ldrex	r3, [r3]
 80038f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f023 0310 	bic.w	r3, r3, #16
 80038fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	330c      	adds	r3, #12
 8003904:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003906:	61ba      	str	r2, [r7, #24]
 8003908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390a:	6979      	ldr	r1, [r7, #20]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	e841 2300 	strex	r3, r2, [r1]
 8003912:	613b      	str	r3, [r7, #16]
   return(result);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1e5      	bne.n	80038e6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003928:	bf00      	nop
 800392a:	3754      	adds	r7, #84	@ 0x54
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr

08003932 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f7ff fee8 	bl	8003722 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800395a:	b480      	push	{r7}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b21      	cmp	r3, #33	@ 0x21
 800396c:	d13e      	bne.n	80039ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003976:	d114      	bne.n	80039a2 <UART_Transmit_IT+0x48>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d110      	bne.n	80039a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003994:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	1c9a      	adds	r2, r3, #2
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	621a      	str	r2, [r3, #32]
 80039a0:	e008      	b.n	80039b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	1c59      	adds	r1, r3, #1
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6211      	str	r1, [r2, #32]
 80039ac:	781a      	ldrb	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29b      	uxth	r3, r3
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	4619      	mov	r1, r3
 80039c2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10f      	bne.n	80039e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	e000      	b.n	80039ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039ec:	2302      	movs	r3, #2
  }
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a0e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff fe79 	bl	8003710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08c      	sub	sp, #48	@ 0x30
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b22      	cmp	r3, #34	@ 0x22
 8003a3a:	f040 80ae 	bne.w	8003b9a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a46:	d117      	bne.n	8003a78 <UART_Receive_IT+0x50>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d113      	bne.n	8003a78 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a58:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a70:	1c9a      	adds	r2, r3, #2
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a76:	e026      	b.n	8003ac6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a8a:	d007      	beq.n	8003a9c <UART_Receive_IT+0x74>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10a      	bne.n	8003aaa <UART_Receive_IT+0x82>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d106      	bne.n	8003aaa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa6:	701a      	strb	r2, [r3, #0]
 8003aa8:	e008      	b.n	8003abc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d15d      	bne.n	8003b96 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0220 	bic.w	r2, r2, #32
 8003ae8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003af8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695a      	ldr	r2, [r3, #20]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0201 	bic.w	r2, r2, #1
 8003b08:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d135      	bne.n	8003b8c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	330c      	adds	r3, #12
 8003b2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	613b      	str	r3, [r7, #16]
   return(result);
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f023 0310 	bic.w	r3, r3, #16
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	330c      	adds	r3, #12
 8003b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b46:	623a      	str	r2, [r7, #32]
 8003b48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4a:	69f9      	ldr	r1, [r7, #28]
 8003b4c:	6a3a      	ldr	r2, [r7, #32]
 8003b4e:	e841 2300 	strex	r3, r2, [r1]
 8003b52:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1e5      	bne.n	8003b26 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	2b10      	cmp	r3, #16
 8003b66:	d10a      	bne.n	8003b7e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b82:	4619      	mov	r1, r3
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff fdd5 	bl	8003734 <HAL_UARTEx_RxEventCallback>
 8003b8a:	e002      	b.n	8003b92 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7fd f861 	bl	8000c54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e002      	b.n	8003b9c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	e000      	b.n	8003b9c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b9a:	2302      	movs	r3, #2
  }
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3730      	adds	r7, #48	@ 0x30
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003bde:	f023 030c 	bic.w	r3, r3, #12
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	68b9      	ldr	r1, [r7, #8]
 8003be8:	430b      	orrs	r3, r1
 8003bea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a2c      	ldr	r2, [pc, #176]	@ (8003cb8 <UART_SetConfig+0x114>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d103      	bne.n	8003c14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c0c:	f7fe fcbe 	bl	800258c <HAL_RCC_GetPCLK2Freq>
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	e002      	b.n	8003c1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c14:	f7fe fca6 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 8003c18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	009a      	lsls	r2, r3, #2
 8003c24:	441a      	add	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	4a22      	ldr	r2, [pc, #136]	@ (8003cbc <UART_SetConfig+0x118>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	0119      	lsls	r1, r3, #4
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	009a      	lsls	r2, r3, #2
 8003c44:	441a      	add	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c50:	4b1a      	ldr	r3, [pc, #104]	@ (8003cbc <UART_SetConfig+0x118>)
 8003c52:	fba3 0302 	umull	r0, r3, r3, r2
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	2064      	movs	r0, #100	@ 0x64
 8003c5a:	fb00 f303 	mul.w	r3, r0, r3
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	3332      	adds	r3, #50	@ 0x32
 8003c64:	4a15      	ldr	r2, [pc, #84]	@ (8003cbc <UART_SetConfig+0x118>)
 8003c66:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c70:	4419      	add	r1, r3
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	009a      	lsls	r2, r3, #2
 8003c7c:	441a      	add	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c88:	4b0c      	ldr	r3, [pc, #48]	@ (8003cbc <UART_SetConfig+0x118>)
 8003c8a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	2064      	movs	r0, #100	@ 0x64
 8003c92:	fb00 f303 	mul.w	r3, r0, r3
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	3332      	adds	r3, #50	@ 0x32
 8003c9c:	4a07      	ldr	r2, [pc, #28]	@ (8003cbc <UART_SetConfig+0x118>)
 8003c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	f003 020f 	and.w	r2, r3, #15
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	440a      	add	r2, r1
 8003cae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cb0:	bf00      	nop
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40013800 	.word	0x40013800
 8003cbc:	51eb851f 	.word	0x51eb851f

08003cc0 <atoi>:
 8003cc0:	220a      	movs	r2, #10
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	f000 b938 	b.w	8003f38 <strtol>

08003cc8 <malloc>:
 8003cc8:	4b02      	ldr	r3, [pc, #8]	@ (8003cd4 <malloc+0xc>)
 8003cca:	4601      	mov	r1, r0
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	f000 b82d 	b.w	8003d2c <_malloc_r>
 8003cd2:	bf00      	nop
 8003cd4:	20000134 	.word	0x20000134

08003cd8 <free>:
 8003cd8:	4b02      	ldr	r3, [pc, #8]	@ (8003ce4 <free+0xc>)
 8003cda:	4601      	mov	r1, r0
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	f000 bb77 	b.w	80043d0 <_free_r>
 8003ce2:	bf00      	nop
 8003ce4:	20000134 	.word	0x20000134

08003ce8 <sbrk_aligned>:
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	4e0f      	ldr	r6, [pc, #60]	@ (8003d28 <sbrk_aligned+0x40>)
 8003cec:	460c      	mov	r4, r1
 8003cee:	6831      	ldr	r1, [r6, #0]
 8003cf0:	4605      	mov	r5, r0
 8003cf2:	b911      	cbnz	r1, 8003cfa <sbrk_aligned+0x12>
 8003cf4:	f000 faf6 	bl	80042e4 <_sbrk_r>
 8003cf8:	6030      	str	r0, [r6, #0]
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	f000 faf1 	bl	80042e4 <_sbrk_r>
 8003d02:	1c43      	adds	r3, r0, #1
 8003d04:	d103      	bne.n	8003d0e <sbrk_aligned+0x26>
 8003d06:	f04f 34ff 	mov.w	r4, #4294967295
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	bd70      	pop	{r4, r5, r6, pc}
 8003d0e:	1cc4      	adds	r4, r0, #3
 8003d10:	f024 0403 	bic.w	r4, r4, #3
 8003d14:	42a0      	cmp	r0, r4
 8003d16:	d0f8      	beq.n	8003d0a <sbrk_aligned+0x22>
 8003d18:	1a21      	subs	r1, r4, r0
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	f000 fae2 	bl	80042e4 <_sbrk_r>
 8003d20:	3001      	adds	r0, #1
 8003d22:	d1f2      	bne.n	8003d0a <sbrk_aligned+0x22>
 8003d24:	e7ef      	b.n	8003d06 <sbrk_aligned+0x1e>
 8003d26:	bf00      	nop
 8003d28:	200002cc 	.word	0x200002cc

08003d2c <_malloc_r>:
 8003d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d30:	1ccd      	adds	r5, r1, #3
 8003d32:	f025 0503 	bic.w	r5, r5, #3
 8003d36:	3508      	adds	r5, #8
 8003d38:	2d0c      	cmp	r5, #12
 8003d3a:	bf38      	it	cc
 8003d3c:	250c      	movcc	r5, #12
 8003d3e:	2d00      	cmp	r5, #0
 8003d40:	4606      	mov	r6, r0
 8003d42:	db01      	blt.n	8003d48 <_malloc_r+0x1c>
 8003d44:	42a9      	cmp	r1, r5
 8003d46:	d904      	bls.n	8003d52 <_malloc_r+0x26>
 8003d48:	230c      	movs	r3, #12
 8003d4a:	6033      	str	r3, [r6, #0]
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e28 <_malloc_r+0xfc>
 8003d56:	f000 f869 	bl	8003e2c <__malloc_lock>
 8003d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d5e:	461c      	mov	r4, r3
 8003d60:	bb44      	cbnz	r4, 8003db4 <_malloc_r+0x88>
 8003d62:	4629      	mov	r1, r5
 8003d64:	4630      	mov	r0, r6
 8003d66:	f7ff ffbf 	bl	8003ce8 <sbrk_aligned>
 8003d6a:	1c43      	adds	r3, r0, #1
 8003d6c:	4604      	mov	r4, r0
 8003d6e:	d158      	bne.n	8003e22 <_malloc_r+0xf6>
 8003d70:	f8d8 4000 	ldr.w	r4, [r8]
 8003d74:	4627      	mov	r7, r4
 8003d76:	2f00      	cmp	r7, #0
 8003d78:	d143      	bne.n	8003e02 <_malloc_r+0xd6>
 8003d7a:	2c00      	cmp	r4, #0
 8003d7c:	d04b      	beq.n	8003e16 <_malloc_r+0xea>
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	4639      	mov	r1, r7
 8003d82:	4630      	mov	r0, r6
 8003d84:	eb04 0903 	add.w	r9, r4, r3
 8003d88:	f000 faac 	bl	80042e4 <_sbrk_r>
 8003d8c:	4581      	cmp	r9, r0
 8003d8e:	d142      	bne.n	8003e16 <_malloc_r+0xea>
 8003d90:	6821      	ldr	r1, [r4, #0]
 8003d92:	4630      	mov	r0, r6
 8003d94:	1a6d      	subs	r5, r5, r1
 8003d96:	4629      	mov	r1, r5
 8003d98:	f7ff ffa6 	bl	8003ce8 <sbrk_aligned>
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d03a      	beq.n	8003e16 <_malloc_r+0xea>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	442b      	add	r3, r5
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	f8d8 3000 	ldr.w	r3, [r8]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	bb62      	cbnz	r2, 8003e08 <_malloc_r+0xdc>
 8003dae:	f8c8 7000 	str.w	r7, [r8]
 8003db2:	e00f      	b.n	8003dd4 <_malloc_r+0xa8>
 8003db4:	6822      	ldr	r2, [r4, #0]
 8003db6:	1b52      	subs	r2, r2, r5
 8003db8:	d420      	bmi.n	8003dfc <_malloc_r+0xd0>
 8003dba:	2a0b      	cmp	r2, #11
 8003dbc:	d917      	bls.n	8003dee <_malloc_r+0xc2>
 8003dbe:	1961      	adds	r1, r4, r5
 8003dc0:	42a3      	cmp	r3, r4
 8003dc2:	6025      	str	r5, [r4, #0]
 8003dc4:	bf18      	it	ne
 8003dc6:	6059      	strne	r1, [r3, #4]
 8003dc8:	6863      	ldr	r3, [r4, #4]
 8003dca:	bf08      	it	eq
 8003dcc:	f8c8 1000 	streq.w	r1, [r8]
 8003dd0:	5162      	str	r2, [r4, r5]
 8003dd2:	604b      	str	r3, [r1, #4]
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	f000 f82f 	bl	8003e38 <__malloc_unlock>
 8003dda:	f104 000b 	add.w	r0, r4, #11
 8003dde:	1d23      	adds	r3, r4, #4
 8003de0:	f020 0007 	bic.w	r0, r0, #7
 8003de4:	1ac2      	subs	r2, r0, r3
 8003de6:	bf1c      	itt	ne
 8003de8:	1a1b      	subne	r3, r3, r0
 8003dea:	50a3      	strne	r3, [r4, r2]
 8003dec:	e7af      	b.n	8003d4e <_malloc_r+0x22>
 8003dee:	6862      	ldr	r2, [r4, #4]
 8003df0:	42a3      	cmp	r3, r4
 8003df2:	bf0c      	ite	eq
 8003df4:	f8c8 2000 	streq.w	r2, [r8]
 8003df8:	605a      	strne	r2, [r3, #4]
 8003dfa:	e7eb      	b.n	8003dd4 <_malloc_r+0xa8>
 8003dfc:	4623      	mov	r3, r4
 8003dfe:	6864      	ldr	r4, [r4, #4]
 8003e00:	e7ae      	b.n	8003d60 <_malloc_r+0x34>
 8003e02:	463c      	mov	r4, r7
 8003e04:	687f      	ldr	r7, [r7, #4]
 8003e06:	e7b6      	b.n	8003d76 <_malloc_r+0x4a>
 8003e08:	461a      	mov	r2, r3
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	42a3      	cmp	r3, r4
 8003e0e:	d1fb      	bne.n	8003e08 <_malloc_r+0xdc>
 8003e10:	2300      	movs	r3, #0
 8003e12:	6053      	str	r3, [r2, #4]
 8003e14:	e7de      	b.n	8003dd4 <_malloc_r+0xa8>
 8003e16:	230c      	movs	r3, #12
 8003e18:	4630      	mov	r0, r6
 8003e1a:	6033      	str	r3, [r6, #0]
 8003e1c:	f000 f80c 	bl	8003e38 <__malloc_unlock>
 8003e20:	e794      	b.n	8003d4c <_malloc_r+0x20>
 8003e22:	6005      	str	r5, [r0, #0]
 8003e24:	e7d6      	b.n	8003dd4 <_malloc_r+0xa8>
 8003e26:	bf00      	nop
 8003e28:	200002d0 	.word	0x200002d0

08003e2c <__malloc_lock>:
 8003e2c:	4801      	ldr	r0, [pc, #4]	@ (8003e34 <__malloc_lock+0x8>)
 8003e2e:	f000 baa6 	b.w	800437e <__retarget_lock_acquire_recursive>
 8003e32:	bf00      	nop
 8003e34:	20000414 	.word	0x20000414

08003e38 <__malloc_unlock>:
 8003e38:	4801      	ldr	r0, [pc, #4]	@ (8003e40 <__malloc_unlock+0x8>)
 8003e3a:	f000 baa1 	b.w	8004380 <__retarget_lock_release_recursive>
 8003e3e:	bf00      	nop
 8003e40:	20000414 	.word	0x20000414

08003e44 <_strtol_l.constprop.0>:
 8003e44:	2b24      	cmp	r3, #36	@ 0x24
 8003e46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e4a:	4686      	mov	lr, r0
 8003e4c:	4690      	mov	r8, r2
 8003e4e:	d801      	bhi.n	8003e54 <_strtol_l.constprop.0+0x10>
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d106      	bne.n	8003e62 <_strtol_l.constprop.0+0x1e>
 8003e54:	f000 fa68 	bl	8004328 <__errno>
 8003e58:	2316      	movs	r3, #22
 8003e5a:	6003      	str	r3, [r0, #0]
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e62:	460d      	mov	r5, r1
 8003e64:	4833      	ldr	r0, [pc, #204]	@ (8003f34 <_strtol_l.constprop.0+0xf0>)
 8003e66:	462a      	mov	r2, r5
 8003e68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003e6c:	5d06      	ldrb	r6, [r0, r4]
 8003e6e:	f016 0608 	ands.w	r6, r6, #8
 8003e72:	d1f8      	bne.n	8003e66 <_strtol_l.constprop.0+0x22>
 8003e74:	2c2d      	cmp	r4, #45	@ 0x2d
 8003e76:	d12d      	bne.n	8003ed4 <_strtol_l.constprop.0+0x90>
 8003e78:	2601      	movs	r6, #1
 8003e7a:	782c      	ldrb	r4, [r5, #0]
 8003e7c:	1c95      	adds	r5, r2, #2
 8003e7e:	f033 0210 	bics.w	r2, r3, #16
 8003e82:	d109      	bne.n	8003e98 <_strtol_l.constprop.0+0x54>
 8003e84:	2c30      	cmp	r4, #48	@ 0x30
 8003e86:	d12a      	bne.n	8003ede <_strtol_l.constprop.0+0x9a>
 8003e88:	782a      	ldrb	r2, [r5, #0]
 8003e8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003e8e:	2a58      	cmp	r2, #88	@ 0x58
 8003e90:	d125      	bne.n	8003ede <_strtol_l.constprop.0+0x9a>
 8003e92:	2310      	movs	r3, #16
 8003e94:	786c      	ldrb	r4, [r5, #1]
 8003e96:	3502      	adds	r5, #2
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003e9e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003ea2:	fbbc f9f3 	udiv	r9, ip, r3
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	fb03 ca19 	mls	sl, r3, r9, ip
 8003eac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003eb0:	2f09      	cmp	r7, #9
 8003eb2:	d81b      	bhi.n	8003eec <_strtol_l.constprop.0+0xa8>
 8003eb4:	463c      	mov	r4, r7
 8003eb6:	42a3      	cmp	r3, r4
 8003eb8:	dd27      	ble.n	8003f0a <_strtol_l.constprop.0+0xc6>
 8003eba:	1c57      	adds	r7, r2, #1
 8003ebc:	d007      	beq.n	8003ece <_strtol_l.constprop.0+0x8a>
 8003ebe:	4581      	cmp	r9, r0
 8003ec0:	d320      	bcc.n	8003f04 <_strtol_l.constprop.0+0xc0>
 8003ec2:	d101      	bne.n	8003ec8 <_strtol_l.constprop.0+0x84>
 8003ec4:	45a2      	cmp	sl, r4
 8003ec6:	db1d      	blt.n	8003f04 <_strtol_l.constprop.0+0xc0>
 8003ec8:	2201      	movs	r2, #1
 8003eca:	fb00 4003 	mla	r0, r0, r3, r4
 8003ece:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ed2:	e7eb      	b.n	8003eac <_strtol_l.constprop.0+0x68>
 8003ed4:	2c2b      	cmp	r4, #43	@ 0x2b
 8003ed6:	bf04      	itt	eq
 8003ed8:	782c      	ldrbeq	r4, [r5, #0]
 8003eda:	1c95      	addeq	r5, r2, #2
 8003edc:	e7cf      	b.n	8003e7e <_strtol_l.constprop.0+0x3a>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1da      	bne.n	8003e98 <_strtol_l.constprop.0+0x54>
 8003ee2:	2c30      	cmp	r4, #48	@ 0x30
 8003ee4:	bf0c      	ite	eq
 8003ee6:	2308      	moveq	r3, #8
 8003ee8:	230a      	movne	r3, #10
 8003eea:	e7d5      	b.n	8003e98 <_strtol_l.constprop.0+0x54>
 8003eec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003ef0:	2f19      	cmp	r7, #25
 8003ef2:	d801      	bhi.n	8003ef8 <_strtol_l.constprop.0+0xb4>
 8003ef4:	3c37      	subs	r4, #55	@ 0x37
 8003ef6:	e7de      	b.n	8003eb6 <_strtol_l.constprop.0+0x72>
 8003ef8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003efc:	2f19      	cmp	r7, #25
 8003efe:	d804      	bhi.n	8003f0a <_strtol_l.constprop.0+0xc6>
 8003f00:	3c57      	subs	r4, #87	@ 0x57
 8003f02:	e7d8      	b.n	8003eb6 <_strtol_l.constprop.0+0x72>
 8003f04:	f04f 32ff 	mov.w	r2, #4294967295
 8003f08:	e7e1      	b.n	8003ece <_strtol_l.constprop.0+0x8a>
 8003f0a:	1c53      	adds	r3, r2, #1
 8003f0c:	d108      	bne.n	8003f20 <_strtol_l.constprop.0+0xdc>
 8003f0e:	2322      	movs	r3, #34	@ 0x22
 8003f10:	4660      	mov	r0, ip
 8003f12:	f8ce 3000 	str.w	r3, [lr]
 8003f16:	f1b8 0f00 	cmp.w	r8, #0
 8003f1a:	d0a0      	beq.n	8003e5e <_strtol_l.constprop.0+0x1a>
 8003f1c:	1e69      	subs	r1, r5, #1
 8003f1e:	e006      	b.n	8003f2e <_strtol_l.constprop.0+0xea>
 8003f20:	b106      	cbz	r6, 8003f24 <_strtol_l.constprop.0+0xe0>
 8003f22:	4240      	negs	r0, r0
 8003f24:	f1b8 0f00 	cmp.w	r8, #0
 8003f28:	d099      	beq.n	8003e5e <_strtol_l.constprop.0+0x1a>
 8003f2a:	2a00      	cmp	r2, #0
 8003f2c:	d1f6      	bne.n	8003f1c <_strtol_l.constprop.0+0xd8>
 8003f2e:	f8c8 1000 	str.w	r1, [r8]
 8003f32:	e794      	b.n	8003e5e <_strtol_l.constprop.0+0x1a>
 8003f34:	08005257 	.word	0x08005257

08003f38 <strtol>:
 8003f38:	4613      	mov	r3, r2
 8003f3a:	460a      	mov	r2, r1
 8003f3c:	4601      	mov	r1, r0
 8003f3e:	4802      	ldr	r0, [pc, #8]	@ (8003f48 <strtol+0x10>)
 8003f40:	6800      	ldr	r0, [r0, #0]
 8003f42:	f7ff bf7f 	b.w	8003e44 <_strtol_l.constprop.0>
 8003f46:	bf00      	nop
 8003f48:	20000134 	.word	0x20000134

08003f4c <std>:
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	b510      	push	{r4, lr}
 8003f50:	4604      	mov	r4, r0
 8003f52:	e9c0 3300 	strd	r3, r3, [r0]
 8003f56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f5a:	6083      	str	r3, [r0, #8]
 8003f5c:	8181      	strh	r1, [r0, #12]
 8003f5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f60:	81c2      	strh	r2, [r0, #14]
 8003f62:	6183      	str	r3, [r0, #24]
 8003f64:	4619      	mov	r1, r3
 8003f66:	2208      	movs	r2, #8
 8003f68:	305c      	adds	r0, #92	@ 0x5c
 8003f6a:	f000 f914 	bl	8004196 <memset>
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa4 <std+0x58>)
 8003f70:	6224      	str	r4, [r4, #32]
 8003f72:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f74:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <std+0x5c>)
 8003f76:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f78:	4b0c      	ldr	r3, [pc, #48]	@ (8003fac <std+0x60>)
 8003f7a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb0 <std+0x64>)
 8003f7e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f80:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb4 <std+0x68>)
 8003f82:	429c      	cmp	r4, r3
 8003f84:	d006      	beq.n	8003f94 <std+0x48>
 8003f86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f8a:	4294      	cmp	r4, r2
 8003f8c:	d002      	beq.n	8003f94 <std+0x48>
 8003f8e:	33d0      	adds	r3, #208	@ 0xd0
 8003f90:	429c      	cmp	r4, r3
 8003f92:	d105      	bne.n	8003fa0 <std+0x54>
 8003f94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f9c:	f000 b9ee 	b.w	800437c <__retarget_lock_init_recursive>
 8003fa0:	bd10      	pop	{r4, pc}
 8003fa2:	bf00      	nop
 8003fa4:	08004111 	.word	0x08004111
 8003fa8:	08004133 	.word	0x08004133
 8003fac:	0800416b 	.word	0x0800416b
 8003fb0:	0800418f 	.word	0x0800418f
 8003fb4:	200002d4 	.word	0x200002d4

08003fb8 <stdio_exit_handler>:
 8003fb8:	4a02      	ldr	r2, [pc, #8]	@ (8003fc4 <stdio_exit_handler+0xc>)
 8003fba:	4903      	ldr	r1, [pc, #12]	@ (8003fc8 <stdio_exit_handler+0x10>)
 8003fbc:	4803      	ldr	r0, [pc, #12]	@ (8003fcc <stdio_exit_handler+0x14>)
 8003fbe:	f000 b869 	b.w	8004094 <_fwalk_sglue>
 8003fc2:	bf00      	nop
 8003fc4:	20000128 	.word	0x20000128
 8003fc8:	08004b35 	.word	0x08004b35
 8003fcc:	20000138 	.word	0x20000138

08003fd0 <cleanup_stdio>:
 8003fd0:	6841      	ldr	r1, [r0, #4]
 8003fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8004004 <cleanup_stdio+0x34>)
 8003fd4:	b510      	push	{r4, lr}
 8003fd6:	4299      	cmp	r1, r3
 8003fd8:	4604      	mov	r4, r0
 8003fda:	d001      	beq.n	8003fe0 <cleanup_stdio+0x10>
 8003fdc:	f000 fdaa 	bl	8004b34 <_fflush_r>
 8003fe0:	68a1      	ldr	r1, [r4, #8]
 8003fe2:	4b09      	ldr	r3, [pc, #36]	@ (8004008 <cleanup_stdio+0x38>)
 8003fe4:	4299      	cmp	r1, r3
 8003fe6:	d002      	beq.n	8003fee <cleanup_stdio+0x1e>
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f000 fda3 	bl	8004b34 <_fflush_r>
 8003fee:	68e1      	ldr	r1, [r4, #12]
 8003ff0:	4b06      	ldr	r3, [pc, #24]	@ (800400c <cleanup_stdio+0x3c>)
 8003ff2:	4299      	cmp	r1, r3
 8003ff4:	d004      	beq.n	8004000 <cleanup_stdio+0x30>
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ffc:	f000 bd9a 	b.w	8004b34 <_fflush_r>
 8004000:	bd10      	pop	{r4, pc}
 8004002:	bf00      	nop
 8004004:	200002d4 	.word	0x200002d4
 8004008:	2000033c 	.word	0x2000033c
 800400c:	200003a4 	.word	0x200003a4

08004010 <global_stdio_init.part.0>:
 8004010:	b510      	push	{r4, lr}
 8004012:	4b0b      	ldr	r3, [pc, #44]	@ (8004040 <global_stdio_init.part.0+0x30>)
 8004014:	4c0b      	ldr	r4, [pc, #44]	@ (8004044 <global_stdio_init.part.0+0x34>)
 8004016:	4a0c      	ldr	r2, [pc, #48]	@ (8004048 <global_stdio_init.part.0+0x38>)
 8004018:	4620      	mov	r0, r4
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	2104      	movs	r1, #4
 800401e:	2200      	movs	r2, #0
 8004020:	f7ff ff94 	bl	8003f4c <std>
 8004024:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004028:	2201      	movs	r2, #1
 800402a:	2109      	movs	r1, #9
 800402c:	f7ff ff8e 	bl	8003f4c <std>
 8004030:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004034:	2202      	movs	r2, #2
 8004036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800403a:	2112      	movs	r1, #18
 800403c:	f7ff bf86 	b.w	8003f4c <std>
 8004040:	2000040c 	.word	0x2000040c
 8004044:	200002d4 	.word	0x200002d4
 8004048:	08003fb9 	.word	0x08003fb9

0800404c <__sfp_lock_acquire>:
 800404c:	4801      	ldr	r0, [pc, #4]	@ (8004054 <__sfp_lock_acquire+0x8>)
 800404e:	f000 b996 	b.w	800437e <__retarget_lock_acquire_recursive>
 8004052:	bf00      	nop
 8004054:	20000415 	.word	0x20000415

08004058 <__sfp_lock_release>:
 8004058:	4801      	ldr	r0, [pc, #4]	@ (8004060 <__sfp_lock_release+0x8>)
 800405a:	f000 b991 	b.w	8004380 <__retarget_lock_release_recursive>
 800405e:	bf00      	nop
 8004060:	20000415 	.word	0x20000415

08004064 <__sinit>:
 8004064:	b510      	push	{r4, lr}
 8004066:	4604      	mov	r4, r0
 8004068:	f7ff fff0 	bl	800404c <__sfp_lock_acquire>
 800406c:	6a23      	ldr	r3, [r4, #32]
 800406e:	b11b      	cbz	r3, 8004078 <__sinit+0x14>
 8004070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004074:	f7ff bff0 	b.w	8004058 <__sfp_lock_release>
 8004078:	4b04      	ldr	r3, [pc, #16]	@ (800408c <__sinit+0x28>)
 800407a:	6223      	str	r3, [r4, #32]
 800407c:	4b04      	ldr	r3, [pc, #16]	@ (8004090 <__sinit+0x2c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1f5      	bne.n	8004070 <__sinit+0xc>
 8004084:	f7ff ffc4 	bl	8004010 <global_stdio_init.part.0>
 8004088:	e7f2      	b.n	8004070 <__sinit+0xc>
 800408a:	bf00      	nop
 800408c:	08003fd1 	.word	0x08003fd1
 8004090:	2000040c 	.word	0x2000040c

08004094 <_fwalk_sglue>:
 8004094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004098:	4607      	mov	r7, r0
 800409a:	4688      	mov	r8, r1
 800409c:	4614      	mov	r4, r2
 800409e:	2600      	movs	r6, #0
 80040a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040a4:	f1b9 0901 	subs.w	r9, r9, #1
 80040a8:	d505      	bpl.n	80040b6 <_fwalk_sglue+0x22>
 80040aa:	6824      	ldr	r4, [r4, #0]
 80040ac:	2c00      	cmp	r4, #0
 80040ae:	d1f7      	bne.n	80040a0 <_fwalk_sglue+0xc>
 80040b0:	4630      	mov	r0, r6
 80040b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040b6:	89ab      	ldrh	r3, [r5, #12]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d907      	bls.n	80040cc <_fwalk_sglue+0x38>
 80040bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040c0:	3301      	adds	r3, #1
 80040c2:	d003      	beq.n	80040cc <_fwalk_sglue+0x38>
 80040c4:	4629      	mov	r1, r5
 80040c6:	4638      	mov	r0, r7
 80040c8:	47c0      	blx	r8
 80040ca:	4306      	orrs	r6, r0
 80040cc:	3568      	adds	r5, #104	@ 0x68
 80040ce:	e7e9      	b.n	80040a4 <_fwalk_sglue+0x10>

080040d0 <siprintf>:
 80040d0:	b40e      	push	{r1, r2, r3}
 80040d2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80040d6:	b500      	push	{lr}
 80040d8:	b09c      	sub	sp, #112	@ 0x70
 80040da:	ab1d      	add	r3, sp, #116	@ 0x74
 80040dc:	9002      	str	r0, [sp, #8]
 80040de:	9006      	str	r0, [sp, #24]
 80040e0:	9107      	str	r1, [sp, #28]
 80040e2:	9104      	str	r1, [sp, #16]
 80040e4:	4808      	ldr	r0, [pc, #32]	@ (8004108 <siprintf+0x38>)
 80040e6:	4909      	ldr	r1, [pc, #36]	@ (800410c <siprintf+0x3c>)
 80040e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80040ec:	9105      	str	r1, [sp, #20]
 80040ee:	6800      	ldr	r0, [r0, #0]
 80040f0:	a902      	add	r1, sp, #8
 80040f2:	9301      	str	r3, [sp, #4]
 80040f4:	f000 fa10 	bl	8004518 <_svfiprintf_r>
 80040f8:	2200      	movs	r2, #0
 80040fa:	9b02      	ldr	r3, [sp, #8]
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	b01c      	add	sp, #112	@ 0x70
 8004100:	f85d eb04 	ldr.w	lr, [sp], #4
 8004104:	b003      	add	sp, #12
 8004106:	4770      	bx	lr
 8004108:	20000134 	.word	0x20000134
 800410c:	ffff0208 	.word	0xffff0208

08004110 <__sread>:
 8004110:	b510      	push	{r4, lr}
 8004112:	460c      	mov	r4, r1
 8004114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004118:	f000 f8d2 	bl	80042c0 <_read_r>
 800411c:	2800      	cmp	r0, #0
 800411e:	bfab      	itete	ge
 8004120:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004122:	89a3      	ldrhlt	r3, [r4, #12]
 8004124:	181b      	addge	r3, r3, r0
 8004126:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800412a:	bfac      	ite	ge
 800412c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800412e:	81a3      	strhlt	r3, [r4, #12]
 8004130:	bd10      	pop	{r4, pc}

08004132 <__swrite>:
 8004132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004136:	461f      	mov	r7, r3
 8004138:	898b      	ldrh	r3, [r1, #12]
 800413a:	4605      	mov	r5, r0
 800413c:	05db      	lsls	r3, r3, #23
 800413e:	460c      	mov	r4, r1
 8004140:	4616      	mov	r6, r2
 8004142:	d505      	bpl.n	8004150 <__swrite+0x1e>
 8004144:	2302      	movs	r3, #2
 8004146:	2200      	movs	r2, #0
 8004148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800414c:	f000 f8a6 	bl	800429c <_lseek_r>
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	4632      	mov	r2, r6
 8004154:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004158:	81a3      	strh	r3, [r4, #12]
 800415a:	4628      	mov	r0, r5
 800415c:	463b      	mov	r3, r7
 800415e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004166:	f000 b8cd 	b.w	8004304 <_write_r>

0800416a <__sseek>:
 800416a:	b510      	push	{r4, lr}
 800416c:	460c      	mov	r4, r1
 800416e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004172:	f000 f893 	bl	800429c <_lseek_r>
 8004176:	1c43      	adds	r3, r0, #1
 8004178:	89a3      	ldrh	r3, [r4, #12]
 800417a:	bf15      	itete	ne
 800417c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800417e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004182:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004186:	81a3      	strheq	r3, [r4, #12]
 8004188:	bf18      	it	ne
 800418a:	81a3      	strhne	r3, [r4, #12]
 800418c:	bd10      	pop	{r4, pc}

0800418e <__sclose>:
 800418e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004192:	f000 b873 	b.w	800427c <_close_r>

08004196 <memset>:
 8004196:	4603      	mov	r3, r0
 8004198:	4402      	add	r2, r0
 800419a:	4293      	cmp	r3, r2
 800419c:	d100      	bne.n	80041a0 <memset+0xa>
 800419e:	4770      	bx	lr
 80041a0:	f803 1b01 	strb.w	r1, [r3], #1
 80041a4:	e7f9      	b.n	800419a <memset+0x4>

080041a6 <strcat>:
 80041a6:	4602      	mov	r2, r0
 80041a8:	b510      	push	{r4, lr}
 80041aa:	7814      	ldrb	r4, [r2, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	3201      	adds	r2, #1
 80041b0:	2c00      	cmp	r4, #0
 80041b2:	d1fa      	bne.n	80041aa <strcat+0x4>
 80041b4:	3b01      	subs	r3, #1
 80041b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041be:	2a00      	cmp	r2, #0
 80041c0:	d1f9      	bne.n	80041b6 <strcat+0x10>
 80041c2:	bd10      	pop	{r4, pc}

080041c4 <strtok>:
 80041c4:	4b16      	ldr	r3, [pc, #88]	@ (8004220 <strtok+0x5c>)
 80041c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ca:	681f      	ldr	r7, [r3, #0]
 80041cc:	4605      	mov	r5, r0
 80041ce:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80041d0:	460e      	mov	r6, r1
 80041d2:	b9ec      	cbnz	r4, 8004210 <strtok+0x4c>
 80041d4:	2050      	movs	r0, #80	@ 0x50
 80041d6:	f7ff fd77 	bl	8003cc8 <malloc>
 80041da:	4602      	mov	r2, r0
 80041dc:	6478      	str	r0, [r7, #68]	@ 0x44
 80041de:	b920      	cbnz	r0, 80041ea <strtok+0x26>
 80041e0:	215b      	movs	r1, #91	@ 0x5b
 80041e2:	4b10      	ldr	r3, [pc, #64]	@ (8004224 <strtok+0x60>)
 80041e4:	4810      	ldr	r0, [pc, #64]	@ (8004228 <strtok+0x64>)
 80041e6:	f000 f8d5 	bl	8004394 <__assert_func>
 80041ea:	e9c0 4400 	strd	r4, r4, [r0]
 80041ee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80041f2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80041f6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80041fa:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80041fe:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8004202:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8004206:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800420a:	6184      	str	r4, [r0, #24]
 800420c:	7704      	strb	r4, [r0, #28]
 800420e:	6244      	str	r4, [r0, #36]	@ 0x24
 8004210:	4631      	mov	r1, r6
 8004212:	4628      	mov	r0, r5
 8004214:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004216:	2301      	movs	r3, #1
 8004218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800421c:	f000 b806 	b.w	800422c <__strtok_r>
 8004220:	20000134 	.word	0x20000134
 8004224:	08005357 	.word	0x08005357
 8004228:	0800536e 	.word	0x0800536e

0800422c <__strtok_r>:
 800422c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800422e:	4604      	mov	r4, r0
 8004230:	b908      	cbnz	r0, 8004236 <__strtok_r+0xa>
 8004232:	6814      	ldr	r4, [r2, #0]
 8004234:	b144      	cbz	r4, 8004248 <__strtok_r+0x1c>
 8004236:	460f      	mov	r7, r1
 8004238:	4620      	mov	r0, r4
 800423a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800423e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004242:	b91e      	cbnz	r6, 800424c <__strtok_r+0x20>
 8004244:	b965      	cbnz	r5, 8004260 <__strtok_r+0x34>
 8004246:	6015      	str	r5, [r2, #0]
 8004248:	2000      	movs	r0, #0
 800424a:	e005      	b.n	8004258 <__strtok_r+0x2c>
 800424c:	42b5      	cmp	r5, r6
 800424e:	d1f6      	bne.n	800423e <__strtok_r+0x12>
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1f0      	bne.n	8004236 <__strtok_r+0xa>
 8004254:	6014      	str	r4, [r2, #0]
 8004256:	7003      	strb	r3, [r0, #0]
 8004258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800425a:	461c      	mov	r4, r3
 800425c:	e00c      	b.n	8004278 <__strtok_r+0x4c>
 800425e:	b915      	cbnz	r5, 8004266 <__strtok_r+0x3a>
 8004260:	460e      	mov	r6, r1
 8004262:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004266:	f816 5b01 	ldrb.w	r5, [r6], #1
 800426a:	42ab      	cmp	r3, r5
 800426c:	d1f7      	bne.n	800425e <__strtok_r+0x32>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f3      	beq.n	800425a <__strtok_r+0x2e>
 8004272:	2300      	movs	r3, #0
 8004274:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004278:	6014      	str	r4, [r2, #0]
 800427a:	e7ed      	b.n	8004258 <__strtok_r+0x2c>

0800427c <_close_r>:
 800427c:	b538      	push	{r3, r4, r5, lr}
 800427e:	2300      	movs	r3, #0
 8004280:	4d05      	ldr	r5, [pc, #20]	@ (8004298 <_close_r+0x1c>)
 8004282:	4604      	mov	r4, r0
 8004284:	4608      	mov	r0, r1
 8004286:	602b      	str	r3, [r5, #0]
 8004288:	f7fd f91b 	bl	80014c2 <_close>
 800428c:	1c43      	adds	r3, r0, #1
 800428e:	d102      	bne.n	8004296 <_close_r+0x1a>
 8004290:	682b      	ldr	r3, [r5, #0]
 8004292:	b103      	cbz	r3, 8004296 <_close_r+0x1a>
 8004294:	6023      	str	r3, [r4, #0]
 8004296:	bd38      	pop	{r3, r4, r5, pc}
 8004298:	20000410 	.word	0x20000410

0800429c <_lseek_r>:
 800429c:	b538      	push	{r3, r4, r5, lr}
 800429e:	4604      	mov	r4, r0
 80042a0:	4608      	mov	r0, r1
 80042a2:	4611      	mov	r1, r2
 80042a4:	2200      	movs	r2, #0
 80042a6:	4d05      	ldr	r5, [pc, #20]	@ (80042bc <_lseek_r+0x20>)
 80042a8:	602a      	str	r2, [r5, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f7fd f92d 	bl	800150a <_lseek>
 80042b0:	1c43      	adds	r3, r0, #1
 80042b2:	d102      	bne.n	80042ba <_lseek_r+0x1e>
 80042b4:	682b      	ldr	r3, [r5, #0]
 80042b6:	b103      	cbz	r3, 80042ba <_lseek_r+0x1e>
 80042b8:	6023      	str	r3, [r4, #0]
 80042ba:	bd38      	pop	{r3, r4, r5, pc}
 80042bc:	20000410 	.word	0x20000410

080042c0 <_read_r>:
 80042c0:	b538      	push	{r3, r4, r5, lr}
 80042c2:	4604      	mov	r4, r0
 80042c4:	4608      	mov	r0, r1
 80042c6:	4611      	mov	r1, r2
 80042c8:	2200      	movs	r2, #0
 80042ca:	4d05      	ldr	r5, [pc, #20]	@ (80042e0 <_read_r+0x20>)
 80042cc:	602a      	str	r2, [r5, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	f7fd f8be 	bl	8001450 <_read>
 80042d4:	1c43      	adds	r3, r0, #1
 80042d6:	d102      	bne.n	80042de <_read_r+0x1e>
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	b103      	cbz	r3, 80042de <_read_r+0x1e>
 80042dc:	6023      	str	r3, [r4, #0]
 80042de:	bd38      	pop	{r3, r4, r5, pc}
 80042e0:	20000410 	.word	0x20000410

080042e4 <_sbrk_r>:
 80042e4:	b538      	push	{r3, r4, r5, lr}
 80042e6:	2300      	movs	r3, #0
 80042e8:	4d05      	ldr	r5, [pc, #20]	@ (8004300 <_sbrk_r+0x1c>)
 80042ea:	4604      	mov	r4, r0
 80042ec:	4608      	mov	r0, r1
 80042ee:	602b      	str	r3, [r5, #0]
 80042f0:	f7fd f918 	bl	8001524 <_sbrk>
 80042f4:	1c43      	adds	r3, r0, #1
 80042f6:	d102      	bne.n	80042fe <_sbrk_r+0x1a>
 80042f8:	682b      	ldr	r3, [r5, #0]
 80042fa:	b103      	cbz	r3, 80042fe <_sbrk_r+0x1a>
 80042fc:	6023      	str	r3, [r4, #0]
 80042fe:	bd38      	pop	{r3, r4, r5, pc}
 8004300:	20000410 	.word	0x20000410

08004304 <_write_r>:
 8004304:	b538      	push	{r3, r4, r5, lr}
 8004306:	4604      	mov	r4, r0
 8004308:	4608      	mov	r0, r1
 800430a:	4611      	mov	r1, r2
 800430c:	2200      	movs	r2, #0
 800430e:	4d05      	ldr	r5, [pc, #20]	@ (8004324 <_write_r+0x20>)
 8004310:	602a      	str	r2, [r5, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	f7fd f8b9 	bl	800148a <_write>
 8004318:	1c43      	adds	r3, r0, #1
 800431a:	d102      	bne.n	8004322 <_write_r+0x1e>
 800431c:	682b      	ldr	r3, [r5, #0]
 800431e:	b103      	cbz	r3, 8004322 <_write_r+0x1e>
 8004320:	6023      	str	r3, [r4, #0]
 8004322:	bd38      	pop	{r3, r4, r5, pc}
 8004324:	20000410 	.word	0x20000410

08004328 <__errno>:
 8004328:	4b01      	ldr	r3, [pc, #4]	@ (8004330 <__errno+0x8>)
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	20000134 	.word	0x20000134

08004334 <__libc_init_array>:
 8004334:	b570      	push	{r4, r5, r6, lr}
 8004336:	2600      	movs	r6, #0
 8004338:	4d0c      	ldr	r5, [pc, #48]	@ (800436c <__libc_init_array+0x38>)
 800433a:	4c0d      	ldr	r4, [pc, #52]	@ (8004370 <__libc_init_array+0x3c>)
 800433c:	1b64      	subs	r4, r4, r5
 800433e:	10a4      	asrs	r4, r4, #2
 8004340:	42a6      	cmp	r6, r4
 8004342:	d109      	bne.n	8004358 <__libc_init_array+0x24>
 8004344:	f000 ff3e 	bl	80051c4 <_init>
 8004348:	2600      	movs	r6, #0
 800434a:	4d0a      	ldr	r5, [pc, #40]	@ (8004374 <__libc_init_array+0x40>)
 800434c:	4c0a      	ldr	r4, [pc, #40]	@ (8004378 <__libc_init_array+0x44>)
 800434e:	1b64      	subs	r4, r4, r5
 8004350:	10a4      	asrs	r4, r4, #2
 8004352:	42a6      	cmp	r6, r4
 8004354:	d105      	bne.n	8004362 <__libc_init_array+0x2e>
 8004356:	bd70      	pop	{r4, r5, r6, pc}
 8004358:	f855 3b04 	ldr.w	r3, [r5], #4
 800435c:	4798      	blx	r3
 800435e:	3601      	adds	r6, #1
 8004360:	e7ee      	b.n	8004340 <__libc_init_array+0xc>
 8004362:	f855 3b04 	ldr.w	r3, [r5], #4
 8004366:	4798      	blx	r3
 8004368:	3601      	adds	r6, #1
 800436a:	e7f2      	b.n	8004352 <__libc_init_array+0x1e>
 800436c:	08005440 	.word	0x08005440
 8004370:	08005440 	.word	0x08005440
 8004374:	08005440 	.word	0x08005440
 8004378:	08005444 	.word	0x08005444

0800437c <__retarget_lock_init_recursive>:
 800437c:	4770      	bx	lr

0800437e <__retarget_lock_acquire_recursive>:
 800437e:	4770      	bx	lr

08004380 <__retarget_lock_release_recursive>:
 8004380:	4770      	bx	lr

08004382 <strcpy>:
 8004382:	4603      	mov	r3, r0
 8004384:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004388:	f803 2b01 	strb.w	r2, [r3], #1
 800438c:	2a00      	cmp	r2, #0
 800438e:	d1f9      	bne.n	8004384 <strcpy+0x2>
 8004390:	4770      	bx	lr
	...

08004394 <__assert_func>:
 8004394:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004396:	4614      	mov	r4, r2
 8004398:	461a      	mov	r2, r3
 800439a:	4b09      	ldr	r3, [pc, #36]	@ (80043c0 <__assert_func+0x2c>)
 800439c:	4605      	mov	r5, r0
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68d8      	ldr	r0, [r3, #12]
 80043a2:	b954      	cbnz	r4, 80043ba <__assert_func+0x26>
 80043a4:	4b07      	ldr	r3, [pc, #28]	@ (80043c4 <__assert_func+0x30>)
 80043a6:	461c      	mov	r4, r3
 80043a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80043ac:	9100      	str	r1, [sp, #0]
 80043ae:	462b      	mov	r3, r5
 80043b0:	4905      	ldr	r1, [pc, #20]	@ (80043c8 <__assert_func+0x34>)
 80043b2:	f000 fbe7 	bl	8004b84 <fiprintf>
 80043b6:	f000 fc2d 	bl	8004c14 <abort>
 80043ba:	4b04      	ldr	r3, [pc, #16]	@ (80043cc <__assert_func+0x38>)
 80043bc:	e7f4      	b.n	80043a8 <__assert_func+0x14>
 80043be:	bf00      	nop
 80043c0:	20000134 	.word	0x20000134
 80043c4:	08005403 	.word	0x08005403
 80043c8:	080053d5 	.word	0x080053d5
 80043cc:	080053c8 	.word	0x080053c8

080043d0 <_free_r>:
 80043d0:	b538      	push	{r3, r4, r5, lr}
 80043d2:	4605      	mov	r5, r0
 80043d4:	2900      	cmp	r1, #0
 80043d6:	d040      	beq.n	800445a <_free_r+0x8a>
 80043d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043dc:	1f0c      	subs	r4, r1, #4
 80043de:	2b00      	cmp	r3, #0
 80043e0:	bfb8      	it	lt
 80043e2:	18e4      	addlt	r4, r4, r3
 80043e4:	f7ff fd22 	bl	8003e2c <__malloc_lock>
 80043e8:	4a1c      	ldr	r2, [pc, #112]	@ (800445c <_free_r+0x8c>)
 80043ea:	6813      	ldr	r3, [r2, #0]
 80043ec:	b933      	cbnz	r3, 80043fc <_free_r+0x2c>
 80043ee:	6063      	str	r3, [r4, #4]
 80043f0:	6014      	str	r4, [r2, #0]
 80043f2:	4628      	mov	r0, r5
 80043f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043f8:	f7ff bd1e 	b.w	8003e38 <__malloc_unlock>
 80043fc:	42a3      	cmp	r3, r4
 80043fe:	d908      	bls.n	8004412 <_free_r+0x42>
 8004400:	6820      	ldr	r0, [r4, #0]
 8004402:	1821      	adds	r1, r4, r0
 8004404:	428b      	cmp	r3, r1
 8004406:	bf01      	itttt	eq
 8004408:	6819      	ldreq	r1, [r3, #0]
 800440a:	685b      	ldreq	r3, [r3, #4]
 800440c:	1809      	addeq	r1, r1, r0
 800440e:	6021      	streq	r1, [r4, #0]
 8004410:	e7ed      	b.n	80043ee <_free_r+0x1e>
 8004412:	461a      	mov	r2, r3
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	b10b      	cbz	r3, 800441c <_free_r+0x4c>
 8004418:	42a3      	cmp	r3, r4
 800441a:	d9fa      	bls.n	8004412 <_free_r+0x42>
 800441c:	6811      	ldr	r1, [r2, #0]
 800441e:	1850      	adds	r0, r2, r1
 8004420:	42a0      	cmp	r0, r4
 8004422:	d10b      	bne.n	800443c <_free_r+0x6c>
 8004424:	6820      	ldr	r0, [r4, #0]
 8004426:	4401      	add	r1, r0
 8004428:	1850      	adds	r0, r2, r1
 800442a:	4283      	cmp	r3, r0
 800442c:	6011      	str	r1, [r2, #0]
 800442e:	d1e0      	bne.n	80043f2 <_free_r+0x22>
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4408      	add	r0, r1
 8004436:	6010      	str	r0, [r2, #0]
 8004438:	6053      	str	r3, [r2, #4]
 800443a:	e7da      	b.n	80043f2 <_free_r+0x22>
 800443c:	d902      	bls.n	8004444 <_free_r+0x74>
 800443e:	230c      	movs	r3, #12
 8004440:	602b      	str	r3, [r5, #0]
 8004442:	e7d6      	b.n	80043f2 <_free_r+0x22>
 8004444:	6820      	ldr	r0, [r4, #0]
 8004446:	1821      	adds	r1, r4, r0
 8004448:	428b      	cmp	r3, r1
 800444a:	bf01      	itttt	eq
 800444c:	6819      	ldreq	r1, [r3, #0]
 800444e:	685b      	ldreq	r3, [r3, #4]
 8004450:	1809      	addeq	r1, r1, r0
 8004452:	6021      	streq	r1, [r4, #0]
 8004454:	6063      	str	r3, [r4, #4]
 8004456:	6054      	str	r4, [r2, #4]
 8004458:	e7cb      	b.n	80043f2 <_free_r+0x22>
 800445a:	bd38      	pop	{r3, r4, r5, pc}
 800445c:	200002d0 	.word	0x200002d0

08004460 <__ssputs_r>:
 8004460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004464:	461f      	mov	r7, r3
 8004466:	688e      	ldr	r6, [r1, #8]
 8004468:	4682      	mov	sl, r0
 800446a:	42be      	cmp	r6, r7
 800446c:	460c      	mov	r4, r1
 800446e:	4690      	mov	r8, r2
 8004470:	680b      	ldr	r3, [r1, #0]
 8004472:	d82d      	bhi.n	80044d0 <__ssputs_r+0x70>
 8004474:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004478:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800447c:	d026      	beq.n	80044cc <__ssputs_r+0x6c>
 800447e:	6965      	ldr	r5, [r4, #20]
 8004480:	6909      	ldr	r1, [r1, #16]
 8004482:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004486:	eba3 0901 	sub.w	r9, r3, r1
 800448a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800448e:	1c7b      	adds	r3, r7, #1
 8004490:	444b      	add	r3, r9
 8004492:	106d      	asrs	r5, r5, #1
 8004494:	429d      	cmp	r5, r3
 8004496:	bf38      	it	cc
 8004498:	461d      	movcc	r5, r3
 800449a:	0553      	lsls	r3, r2, #21
 800449c:	d527      	bpl.n	80044ee <__ssputs_r+0x8e>
 800449e:	4629      	mov	r1, r5
 80044a0:	f7ff fc44 	bl	8003d2c <_malloc_r>
 80044a4:	4606      	mov	r6, r0
 80044a6:	b360      	cbz	r0, 8004502 <__ssputs_r+0xa2>
 80044a8:	464a      	mov	r2, r9
 80044aa:	6921      	ldr	r1, [r4, #16]
 80044ac:	f000 fba4 	bl	8004bf8 <memcpy>
 80044b0:	89a3      	ldrh	r3, [r4, #12]
 80044b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80044b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ba:	81a3      	strh	r3, [r4, #12]
 80044bc:	6126      	str	r6, [r4, #16]
 80044be:	444e      	add	r6, r9
 80044c0:	6026      	str	r6, [r4, #0]
 80044c2:	463e      	mov	r6, r7
 80044c4:	6165      	str	r5, [r4, #20]
 80044c6:	eba5 0509 	sub.w	r5, r5, r9
 80044ca:	60a5      	str	r5, [r4, #8]
 80044cc:	42be      	cmp	r6, r7
 80044ce:	d900      	bls.n	80044d2 <__ssputs_r+0x72>
 80044d0:	463e      	mov	r6, r7
 80044d2:	4632      	mov	r2, r6
 80044d4:	4641      	mov	r1, r8
 80044d6:	6820      	ldr	r0, [r4, #0]
 80044d8:	f000 fb66 	bl	8004ba8 <memmove>
 80044dc:	2000      	movs	r0, #0
 80044de:	68a3      	ldr	r3, [r4, #8]
 80044e0:	1b9b      	subs	r3, r3, r6
 80044e2:	60a3      	str	r3, [r4, #8]
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	4433      	add	r3, r6
 80044e8:	6023      	str	r3, [r4, #0]
 80044ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ee:	462a      	mov	r2, r5
 80044f0:	f000 fb97 	bl	8004c22 <_realloc_r>
 80044f4:	4606      	mov	r6, r0
 80044f6:	2800      	cmp	r0, #0
 80044f8:	d1e0      	bne.n	80044bc <__ssputs_r+0x5c>
 80044fa:	4650      	mov	r0, sl
 80044fc:	6921      	ldr	r1, [r4, #16]
 80044fe:	f7ff ff67 	bl	80043d0 <_free_r>
 8004502:	230c      	movs	r3, #12
 8004504:	f8ca 3000 	str.w	r3, [sl]
 8004508:	89a3      	ldrh	r3, [r4, #12]
 800450a:	f04f 30ff 	mov.w	r0, #4294967295
 800450e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004512:	81a3      	strh	r3, [r4, #12]
 8004514:	e7e9      	b.n	80044ea <__ssputs_r+0x8a>
	...

08004518 <_svfiprintf_r>:
 8004518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800451c:	4698      	mov	r8, r3
 800451e:	898b      	ldrh	r3, [r1, #12]
 8004520:	4607      	mov	r7, r0
 8004522:	061b      	lsls	r3, r3, #24
 8004524:	460d      	mov	r5, r1
 8004526:	4614      	mov	r4, r2
 8004528:	b09d      	sub	sp, #116	@ 0x74
 800452a:	d510      	bpl.n	800454e <_svfiprintf_r+0x36>
 800452c:	690b      	ldr	r3, [r1, #16]
 800452e:	b973      	cbnz	r3, 800454e <_svfiprintf_r+0x36>
 8004530:	2140      	movs	r1, #64	@ 0x40
 8004532:	f7ff fbfb 	bl	8003d2c <_malloc_r>
 8004536:	6028      	str	r0, [r5, #0]
 8004538:	6128      	str	r0, [r5, #16]
 800453a:	b930      	cbnz	r0, 800454a <_svfiprintf_r+0x32>
 800453c:	230c      	movs	r3, #12
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	f04f 30ff 	mov.w	r0, #4294967295
 8004544:	b01d      	add	sp, #116	@ 0x74
 8004546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800454a:	2340      	movs	r3, #64	@ 0x40
 800454c:	616b      	str	r3, [r5, #20]
 800454e:	2300      	movs	r3, #0
 8004550:	9309      	str	r3, [sp, #36]	@ 0x24
 8004552:	2320      	movs	r3, #32
 8004554:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004558:	2330      	movs	r3, #48	@ 0x30
 800455a:	f04f 0901 	mov.w	r9, #1
 800455e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004562:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80046fc <_svfiprintf_r+0x1e4>
 8004566:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800456a:	4623      	mov	r3, r4
 800456c:	469a      	mov	sl, r3
 800456e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004572:	b10a      	cbz	r2, 8004578 <_svfiprintf_r+0x60>
 8004574:	2a25      	cmp	r2, #37	@ 0x25
 8004576:	d1f9      	bne.n	800456c <_svfiprintf_r+0x54>
 8004578:	ebba 0b04 	subs.w	fp, sl, r4
 800457c:	d00b      	beq.n	8004596 <_svfiprintf_r+0x7e>
 800457e:	465b      	mov	r3, fp
 8004580:	4622      	mov	r2, r4
 8004582:	4629      	mov	r1, r5
 8004584:	4638      	mov	r0, r7
 8004586:	f7ff ff6b 	bl	8004460 <__ssputs_r>
 800458a:	3001      	adds	r0, #1
 800458c:	f000 80a7 	beq.w	80046de <_svfiprintf_r+0x1c6>
 8004590:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004592:	445a      	add	r2, fp
 8004594:	9209      	str	r2, [sp, #36]	@ 0x24
 8004596:	f89a 3000 	ldrb.w	r3, [sl]
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 809f 	beq.w	80046de <_svfiprintf_r+0x1c6>
 80045a0:	2300      	movs	r3, #0
 80045a2:	f04f 32ff 	mov.w	r2, #4294967295
 80045a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045aa:	f10a 0a01 	add.w	sl, sl, #1
 80045ae:	9304      	str	r3, [sp, #16]
 80045b0:	9307      	str	r3, [sp, #28]
 80045b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80045b8:	4654      	mov	r4, sl
 80045ba:	2205      	movs	r2, #5
 80045bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045c0:	484e      	ldr	r0, [pc, #312]	@ (80046fc <_svfiprintf_r+0x1e4>)
 80045c2:	f000 fb0b 	bl	8004bdc <memchr>
 80045c6:	9a04      	ldr	r2, [sp, #16]
 80045c8:	b9d8      	cbnz	r0, 8004602 <_svfiprintf_r+0xea>
 80045ca:	06d0      	lsls	r0, r2, #27
 80045cc:	bf44      	itt	mi
 80045ce:	2320      	movmi	r3, #32
 80045d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045d4:	0711      	lsls	r1, r2, #28
 80045d6:	bf44      	itt	mi
 80045d8:	232b      	movmi	r3, #43	@ 0x2b
 80045da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045de:	f89a 3000 	ldrb.w	r3, [sl]
 80045e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80045e4:	d015      	beq.n	8004612 <_svfiprintf_r+0xfa>
 80045e6:	4654      	mov	r4, sl
 80045e8:	2000      	movs	r0, #0
 80045ea:	f04f 0c0a 	mov.w	ip, #10
 80045ee:	9a07      	ldr	r2, [sp, #28]
 80045f0:	4621      	mov	r1, r4
 80045f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045f6:	3b30      	subs	r3, #48	@ 0x30
 80045f8:	2b09      	cmp	r3, #9
 80045fa:	d94b      	bls.n	8004694 <_svfiprintf_r+0x17c>
 80045fc:	b1b0      	cbz	r0, 800462c <_svfiprintf_r+0x114>
 80045fe:	9207      	str	r2, [sp, #28]
 8004600:	e014      	b.n	800462c <_svfiprintf_r+0x114>
 8004602:	eba0 0308 	sub.w	r3, r0, r8
 8004606:	fa09 f303 	lsl.w	r3, r9, r3
 800460a:	4313      	orrs	r3, r2
 800460c:	46a2      	mov	sl, r4
 800460e:	9304      	str	r3, [sp, #16]
 8004610:	e7d2      	b.n	80045b8 <_svfiprintf_r+0xa0>
 8004612:	9b03      	ldr	r3, [sp, #12]
 8004614:	1d19      	adds	r1, r3, #4
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	9103      	str	r1, [sp, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	bfbb      	ittet	lt
 800461e:	425b      	neglt	r3, r3
 8004620:	f042 0202 	orrlt.w	r2, r2, #2
 8004624:	9307      	strge	r3, [sp, #28]
 8004626:	9307      	strlt	r3, [sp, #28]
 8004628:	bfb8      	it	lt
 800462a:	9204      	strlt	r2, [sp, #16]
 800462c:	7823      	ldrb	r3, [r4, #0]
 800462e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004630:	d10a      	bne.n	8004648 <_svfiprintf_r+0x130>
 8004632:	7863      	ldrb	r3, [r4, #1]
 8004634:	2b2a      	cmp	r3, #42	@ 0x2a
 8004636:	d132      	bne.n	800469e <_svfiprintf_r+0x186>
 8004638:	9b03      	ldr	r3, [sp, #12]
 800463a:	3402      	adds	r4, #2
 800463c:	1d1a      	adds	r2, r3, #4
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	9203      	str	r2, [sp, #12]
 8004642:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004646:	9305      	str	r3, [sp, #20]
 8004648:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004700 <_svfiprintf_r+0x1e8>
 800464c:	2203      	movs	r2, #3
 800464e:	4650      	mov	r0, sl
 8004650:	7821      	ldrb	r1, [r4, #0]
 8004652:	f000 fac3 	bl	8004bdc <memchr>
 8004656:	b138      	cbz	r0, 8004668 <_svfiprintf_r+0x150>
 8004658:	2240      	movs	r2, #64	@ 0x40
 800465a:	9b04      	ldr	r3, [sp, #16]
 800465c:	eba0 000a 	sub.w	r0, r0, sl
 8004660:	4082      	lsls	r2, r0
 8004662:	4313      	orrs	r3, r2
 8004664:	3401      	adds	r4, #1
 8004666:	9304      	str	r3, [sp, #16]
 8004668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800466c:	2206      	movs	r2, #6
 800466e:	4825      	ldr	r0, [pc, #148]	@ (8004704 <_svfiprintf_r+0x1ec>)
 8004670:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004674:	f000 fab2 	bl	8004bdc <memchr>
 8004678:	2800      	cmp	r0, #0
 800467a:	d036      	beq.n	80046ea <_svfiprintf_r+0x1d2>
 800467c:	4b22      	ldr	r3, [pc, #136]	@ (8004708 <_svfiprintf_r+0x1f0>)
 800467e:	bb1b      	cbnz	r3, 80046c8 <_svfiprintf_r+0x1b0>
 8004680:	9b03      	ldr	r3, [sp, #12]
 8004682:	3307      	adds	r3, #7
 8004684:	f023 0307 	bic.w	r3, r3, #7
 8004688:	3308      	adds	r3, #8
 800468a:	9303      	str	r3, [sp, #12]
 800468c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800468e:	4433      	add	r3, r6
 8004690:	9309      	str	r3, [sp, #36]	@ 0x24
 8004692:	e76a      	b.n	800456a <_svfiprintf_r+0x52>
 8004694:	460c      	mov	r4, r1
 8004696:	2001      	movs	r0, #1
 8004698:	fb0c 3202 	mla	r2, ip, r2, r3
 800469c:	e7a8      	b.n	80045f0 <_svfiprintf_r+0xd8>
 800469e:	2300      	movs	r3, #0
 80046a0:	f04f 0c0a 	mov.w	ip, #10
 80046a4:	4619      	mov	r1, r3
 80046a6:	3401      	adds	r4, #1
 80046a8:	9305      	str	r3, [sp, #20]
 80046aa:	4620      	mov	r0, r4
 80046ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046b0:	3a30      	subs	r2, #48	@ 0x30
 80046b2:	2a09      	cmp	r2, #9
 80046b4:	d903      	bls.n	80046be <_svfiprintf_r+0x1a6>
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0c6      	beq.n	8004648 <_svfiprintf_r+0x130>
 80046ba:	9105      	str	r1, [sp, #20]
 80046bc:	e7c4      	b.n	8004648 <_svfiprintf_r+0x130>
 80046be:	4604      	mov	r4, r0
 80046c0:	2301      	movs	r3, #1
 80046c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80046c6:	e7f0      	b.n	80046aa <_svfiprintf_r+0x192>
 80046c8:	ab03      	add	r3, sp, #12
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	462a      	mov	r2, r5
 80046ce:	4638      	mov	r0, r7
 80046d0:	4b0e      	ldr	r3, [pc, #56]	@ (800470c <_svfiprintf_r+0x1f4>)
 80046d2:	a904      	add	r1, sp, #16
 80046d4:	f3af 8000 	nop.w
 80046d8:	1c42      	adds	r2, r0, #1
 80046da:	4606      	mov	r6, r0
 80046dc:	d1d6      	bne.n	800468c <_svfiprintf_r+0x174>
 80046de:	89ab      	ldrh	r3, [r5, #12]
 80046e0:	065b      	lsls	r3, r3, #25
 80046e2:	f53f af2d 	bmi.w	8004540 <_svfiprintf_r+0x28>
 80046e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80046e8:	e72c      	b.n	8004544 <_svfiprintf_r+0x2c>
 80046ea:	ab03      	add	r3, sp, #12
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	462a      	mov	r2, r5
 80046f0:	4638      	mov	r0, r7
 80046f2:	4b06      	ldr	r3, [pc, #24]	@ (800470c <_svfiprintf_r+0x1f4>)
 80046f4:	a904      	add	r1, sp, #16
 80046f6:	f000 f87d 	bl	80047f4 <_printf_i>
 80046fa:	e7ed      	b.n	80046d8 <_svfiprintf_r+0x1c0>
 80046fc:	08005404 	.word	0x08005404
 8004700:	0800540a 	.word	0x0800540a
 8004704:	0800540e 	.word	0x0800540e
 8004708:	00000000 	.word	0x00000000
 800470c:	08004461 	.word	0x08004461

08004710 <_printf_common>:
 8004710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004714:	4616      	mov	r6, r2
 8004716:	4698      	mov	r8, r3
 8004718:	688a      	ldr	r2, [r1, #8]
 800471a:	690b      	ldr	r3, [r1, #16]
 800471c:	4607      	mov	r7, r0
 800471e:	4293      	cmp	r3, r2
 8004720:	bfb8      	it	lt
 8004722:	4613      	movlt	r3, r2
 8004724:	6033      	str	r3, [r6, #0]
 8004726:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800472a:	460c      	mov	r4, r1
 800472c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004730:	b10a      	cbz	r2, 8004736 <_printf_common+0x26>
 8004732:	3301      	adds	r3, #1
 8004734:	6033      	str	r3, [r6, #0]
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	0699      	lsls	r1, r3, #26
 800473a:	bf42      	ittt	mi
 800473c:	6833      	ldrmi	r3, [r6, #0]
 800473e:	3302      	addmi	r3, #2
 8004740:	6033      	strmi	r3, [r6, #0]
 8004742:	6825      	ldr	r5, [r4, #0]
 8004744:	f015 0506 	ands.w	r5, r5, #6
 8004748:	d106      	bne.n	8004758 <_printf_common+0x48>
 800474a:	f104 0a19 	add.w	sl, r4, #25
 800474e:	68e3      	ldr	r3, [r4, #12]
 8004750:	6832      	ldr	r2, [r6, #0]
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	42ab      	cmp	r3, r5
 8004756:	dc2b      	bgt.n	80047b0 <_printf_common+0xa0>
 8004758:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800475c:	6822      	ldr	r2, [r4, #0]
 800475e:	3b00      	subs	r3, #0
 8004760:	bf18      	it	ne
 8004762:	2301      	movne	r3, #1
 8004764:	0692      	lsls	r2, r2, #26
 8004766:	d430      	bmi.n	80047ca <_printf_common+0xba>
 8004768:	4641      	mov	r1, r8
 800476a:	4638      	mov	r0, r7
 800476c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004770:	47c8      	blx	r9
 8004772:	3001      	adds	r0, #1
 8004774:	d023      	beq.n	80047be <_printf_common+0xae>
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	6922      	ldr	r2, [r4, #16]
 800477a:	f003 0306 	and.w	r3, r3, #6
 800477e:	2b04      	cmp	r3, #4
 8004780:	bf14      	ite	ne
 8004782:	2500      	movne	r5, #0
 8004784:	6833      	ldreq	r3, [r6, #0]
 8004786:	f04f 0600 	mov.w	r6, #0
 800478a:	bf08      	it	eq
 800478c:	68e5      	ldreq	r5, [r4, #12]
 800478e:	f104 041a 	add.w	r4, r4, #26
 8004792:	bf08      	it	eq
 8004794:	1aed      	subeq	r5, r5, r3
 8004796:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800479a:	bf08      	it	eq
 800479c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047a0:	4293      	cmp	r3, r2
 80047a2:	bfc4      	itt	gt
 80047a4:	1a9b      	subgt	r3, r3, r2
 80047a6:	18ed      	addgt	r5, r5, r3
 80047a8:	42b5      	cmp	r5, r6
 80047aa:	d11a      	bne.n	80047e2 <_printf_common+0xd2>
 80047ac:	2000      	movs	r0, #0
 80047ae:	e008      	b.n	80047c2 <_printf_common+0xb2>
 80047b0:	2301      	movs	r3, #1
 80047b2:	4652      	mov	r2, sl
 80047b4:	4641      	mov	r1, r8
 80047b6:	4638      	mov	r0, r7
 80047b8:	47c8      	blx	r9
 80047ba:	3001      	adds	r0, #1
 80047bc:	d103      	bne.n	80047c6 <_printf_common+0xb6>
 80047be:	f04f 30ff 	mov.w	r0, #4294967295
 80047c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c6:	3501      	adds	r5, #1
 80047c8:	e7c1      	b.n	800474e <_printf_common+0x3e>
 80047ca:	2030      	movs	r0, #48	@ 0x30
 80047cc:	18e1      	adds	r1, r4, r3
 80047ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047d8:	4422      	add	r2, r4
 80047da:	3302      	adds	r3, #2
 80047dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047e0:	e7c2      	b.n	8004768 <_printf_common+0x58>
 80047e2:	2301      	movs	r3, #1
 80047e4:	4622      	mov	r2, r4
 80047e6:	4641      	mov	r1, r8
 80047e8:	4638      	mov	r0, r7
 80047ea:	47c8      	blx	r9
 80047ec:	3001      	adds	r0, #1
 80047ee:	d0e6      	beq.n	80047be <_printf_common+0xae>
 80047f0:	3601      	adds	r6, #1
 80047f2:	e7d9      	b.n	80047a8 <_printf_common+0x98>

080047f4 <_printf_i>:
 80047f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047f8:	7e0f      	ldrb	r7, [r1, #24]
 80047fa:	4691      	mov	r9, r2
 80047fc:	2f78      	cmp	r7, #120	@ 0x78
 80047fe:	4680      	mov	r8, r0
 8004800:	460c      	mov	r4, r1
 8004802:	469a      	mov	sl, r3
 8004804:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004806:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800480a:	d807      	bhi.n	800481c <_printf_i+0x28>
 800480c:	2f62      	cmp	r7, #98	@ 0x62
 800480e:	d80a      	bhi.n	8004826 <_printf_i+0x32>
 8004810:	2f00      	cmp	r7, #0
 8004812:	f000 80d3 	beq.w	80049bc <_printf_i+0x1c8>
 8004816:	2f58      	cmp	r7, #88	@ 0x58
 8004818:	f000 80ba 	beq.w	8004990 <_printf_i+0x19c>
 800481c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004820:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004824:	e03a      	b.n	800489c <_printf_i+0xa8>
 8004826:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800482a:	2b15      	cmp	r3, #21
 800482c:	d8f6      	bhi.n	800481c <_printf_i+0x28>
 800482e:	a101      	add	r1, pc, #4	@ (adr r1, 8004834 <_printf_i+0x40>)
 8004830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004834:	0800488d 	.word	0x0800488d
 8004838:	080048a1 	.word	0x080048a1
 800483c:	0800481d 	.word	0x0800481d
 8004840:	0800481d 	.word	0x0800481d
 8004844:	0800481d 	.word	0x0800481d
 8004848:	0800481d 	.word	0x0800481d
 800484c:	080048a1 	.word	0x080048a1
 8004850:	0800481d 	.word	0x0800481d
 8004854:	0800481d 	.word	0x0800481d
 8004858:	0800481d 	.word	0x0800481d
 800485c:	0800481d 	.word	0x0800481d
 8004860:	080049a3 	.word	0x080049a3
 8004864:	080048cb 	.word	0x080048cb
 8004868:	0800495d 	.word	0x0800495d
 800486c:	0800481d 	.word	0x0800481d
 8004870:	0800481d 	.word	0x0800481d
 8004874:	080049c5 	.word	0x080049c5
 8004878:	0800481d 	.word	0x0800481d
 800487c:	080048cb 	.word	0x080048cb
 8004880:	0800481d 	.word	0x0800481d
 8004884:	0800481d 	.word	0x0800481d
 8004888:	08004965 	.word	0x08004965
 800488c:	6833      	ldr	r3, [r6, #0]
 800488e:	1d1a      	adds	r2, r3, #4
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6032      	str	r2, [r6, #0]
 8004894:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004898:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800489c:	2301      	movs	r3, #1
 800489e:	e09e      	b.n	80049de <_printf_i+0x1ea>
 80048a0:	6833      	ldr	r3, [r6, #0]
 80048a2:	6820      	ldr	r0, [r4, #0]
 80048a4:	1d19      	adds	r1, r3, #4
 80048a6:	6031      	str	r1, [r6, #0]
 80048a8:	0606      	lsls	r6, r0, #24
 80048aa:	d501      	bpl.n	80048b0 <_printf_i+0xbc>
 80048ac:	681d      	ldr	r5, [r3, #0]
 80048ae:	e003      	b.n	80048b8 <_printf_i+0xc4>
 80048b0:	0645      	lsls	r5, r0, #25
 80048b2:	d5fb      	bpl.n	80048ac <_printf_i+0xb8>
 80048b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048b8:	2d00      	cmp	r5, #0
 80048ba:	da03      	bge.n	80048c4 <_printf_i+0xd0>
 80048bc:	232d      	movs	r3, #45	@ 0x2d
 80048be:	426d      	negs	r5, r5
 80048c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048c4:	230a      	movs	r3, #10
 80048c6:	4859      	ldr	r0, [pc, #356]	@ (8004a2c <_printf_i+0x238>)
 80048c8:	e011      	b.n	80048ee <_printf_i+0xfa>
 80048ca:	6821      	ldr	r1, [r4, #0]
 80048cc:	6833      	ldr	r3, [r6, #0]
 80048ce:	0608      	lsls	r0, r1, #24
 80048d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80048d4:	d402      	bmi.n	80048dc <_printf_i+0xe8>
 80048d6:	0649      	lsls	r1, r1, #25
 80048d8:	bf48      	it	mi
 80048da:	b2ad      	uxthmi	r5, r5
 80048dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80048de:	6033      	str	r3, [r6, #0]
 80048e0:	bf14      	ite	ne
 80048e2:	230a      	movne	r3, #10
 80048e4:	2308      	moveq	r3, #8
 80048e6:	4851      	ldr	r0, [pc, #324]	@ (8004a2c <_printf_i+0x238>)
 80048e8:	2100      	movs	r1, #0
 80048ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80048ee:	6866      	ldr	r6, [r4, #4]
 80048f0:	2e00      	cmp	r6, #0
 80048f2:	bfa8      	it	ge
 80048f4:	6821      	ldrge	r1, [r4, #0]
 80048f6:	60a6      	str	r6, [r4, #8]
 80048f8:	bfa4      	itt	ge
 80048fa:	f021 0104 	bicge.w	r1, r1, #4
 80048fe:	6021      	strge	r1, [r4, #0]
 8004900:	b90d      	cbnz	r5, 8004906 <_printf_i+0x112>
 8004902:	2e00      	cmp	r6, #0
 8004904:	d04b      	beq.n	800499e <_printf_i+0x1aa>
 8004906:	4616      	mov	r6, r2
 8004908:	fbb5 f1f3 	udiv	r1, r5, r3
 800490c:	fb03 5711 	mls	r7, r3, r1, r5
 8004910:	5dc7      	ldrb	r7, [r0, r7]
 8004912:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004916:	462f      	mov	r7, r5
 8004918:	42bb      	cmp	r3, r7
 800491a:	460d      	mov	r5, r1
 800491c:	d9f4      	bls.n	8004908 <_printf_i+0x114>
 800491e:	2b08      	cmp	r3, #8
 8004920:	d10b      	bne.n	800493a <_printf_i+0x146>
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	07df      	lsls	r7, r3, #31
 8004926:	d508      	bpl.n	800493a <_printf_i+0x146>
 8004928:	6923      	ldr	r3, [r4, #16]
 800492a:	6861      	ldr	r1, [r4, #4]
 800492c:	4299      	cmp	r1, r3
 800492e:	bfde      	ittt	le
 8004930:	2330      	movle	r3, #48	@ 0x30
 8004932:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004936:	f106 36ff 	addle.w	r6, r6, #4294967295
 800493a:	1b92      	subs	r2, r2, r6
 800493c:	6122      	str	r2, [r4, #16]
 800493e:	464b      	mov	r3, r9
 8004940:	4621      	mov	r1, r4
 8004942:	4640      	mov	r0, r8
 8004944:	f8cd a000 	str.w	sl, [sp]
 8004948:	aa03      	add	r2, sp, #12
 800494a:	f7ff fee1 	bl	8004710 <_printf_common>
 800494e:	3001      	adds	r0, #1
 8004950:	d14a      	bne.n	80049e8 <_printf_i+0x1f4>
 8004952:	f04f 30ff 	mov.w	r0, #4294967295
 8004956:	b004      	add	sp, #16
 8004958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	f043 0320 	orr.w	r3, r3, #32
 8004962:	6023      	str	r3, [r4, #0]
 8004964:	2778      	movs	r7, #120	@ 0x78
 8004966:	4832      	ldr	r0, [pc, #200]	@ (8004a30 <_printf_i+0x23c>)
 8004968:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	6831      	ldr	r1, [r6, #0]
 8004970:	061f      	lsls	r7, r3, #24
 8004972:	f851 5b04 	ldr.w	r5, [r1], #4
 8004976:	d402      	bmi.n	800497e <_printf_i+0x18a>
 8004978:	065f      	lsls	r7, r3, #25
 800497a:	bf48      	it	mi
 800497c:	b2ad      	uxthmi	r5, r5
 800497e:	6031      	str	r1, [r6, #0]
 8004980:	07d9      	lsls	r1, r3, #31
 8004982:	bf44      	itt	mi
 8004984:	f043 0320 	orrmi.w	r3, r3, #32
 8004988:	6023      	strmi	r3, [r4, #0]
 800498a:	b11d      	cbz	r5, 8004994 <_printf_i+0x1a0>
 800498c:	2310      	movs	r3, #16
 800498e:	e7ab      	b.n	80048e8 <_printf_i+0xf4>
 8004990:	4826      	ldr	r0, [pc, #152]	@ (8004a2c <_printf_i+0x238>)
 8004992:	e7e9      	b.n	8004968 <_printf_i+0x174>
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	f023 0320 	bic.w	r3, r3, #32
 800499a:	6023      	str	r3, [r4, #0]
 800499c:	e7f6      	b.n	800498c <_printf_i+0x198>
 800499e:	4616      	mov	r6, r2
 80049a0:	e7bd      	b.n	800491e <_printf_i+0x12a>
 80049a2:	6833      	ldr	r3, [r6, #0]
 80049a4:	6825      	ldr	r5, [r4, #0]
 80049a6:	1d18      	adds	r0, r3, #4
 80049a8:	6961      	ldr	r1, [r4, #20]
 80049aa:	6030      	str	r0, [r6, #0]
 80049ac:	062e      	lsls	r6, r5, #24
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	d501      	bpl.n	80049b6 <_printf_i+0x1c2>
 80049b2:	6019      	str	r1, [r3, #0]
 80049b4:	e002      	b.n	80049bc <_printf_i+0x1c8>
 80049b6:	0668      	lsls	r0, r5, #25
 80049b8:	d5fb      	bpl.n	80049b2 <_printf_i+0x1be>
 80049ba:	8019      	strh	r1, [r3, #0]
 80049bc:	2300      	movs	r3, #0
 80049be:	4616      	mov	r6, r2
 80049c0:	6123      	str	r3, [r4, #16]
 80049c2:	e7bc      	b.n	800493e <_printf_i+0x14a>
 80049c4:	6833      	ldr	r3, [r6, #0]
 80049c6:	2100      	movs	r1, #0
 80049c8:	1d1a      	adds	r2, r3, #4
 80049ca:	6032      	str	r2, [r6, #0]
 80049cc:	681e      	ldr	r6, [r3, #0]
 80049ce:	6862      	ldr	r2, [r4, #4]
 80049d0:	4630      	mov	r0, r6
 80049d2:	f000 f903 	bl	8004bdc <memchr>
 80049d6:	b108      	cbz	r0, 80049dc <_printf_i+0x1e8>
 80049d8:	1b80      	subs	r0, r0, r6
 80049da:	6060      	str	r0, [r4, #4]
 80049dc:	6863      	ldr	r3, [r4, #4]
 80049de:	6123      	str	r3, [r4, #16]
 80049e0:	2300      	movs	r3, #0
 80049e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049e6:	e7aa      	b.n	800493e <_printf_i+0x14a>
 80049e8:	4632      	mov	r2, r6
 80049ea:	4649      	mov	r1, r9
 80049ec:	4640      	mov	r0, r8
 80049ee:	6923      	ldr	r3, [r4, #16]
 80049f0:	47d0      	blx	sl
 80049f2:	3001      	adds	r0, #1
 80049f4:	d0ad      	beq.n	8004952 <_printf_i+0x15e>
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	079b      	lsls	r3, r3, #30
 80049fa:	d413      	bmi.n	8004a24 <_printf_i+0x230>
 80049fc:	68e0      	ldr	r0, [r4, #12]
 80049fe:	9b03      	ldr	r3, [sp, #12]
 8004a00:	4298      	cmp	r0, r3
 8004a02:	bfb8      	it	lt
 8004a04:	4618      	movlt	r0, r3
 8004a06:	e7a6      	b.n	8004956 <_printf_i+0x162>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	4632      	mov	r2, r6
 8004a0c:	4649      	mov	r1, r9
 8004a0e:	4640      	mov	r0, r8
 8004a10:	47d0      	blx	sl
 8004a12:	3001      	adds	r0, #1
 8004a14:	d09d      	beq.n	8004952 <_printf_i+0x15e>
 8004a16:	3501      	adds	r5, #1
 8004a18:	68e3      	ldr	r3, [r4, #12]
 8004a1a:	9903      	ldr	r1, [sp, #12]
 8004a1c:	1a5b      	subs	r3, r3, r1
 8004a1e:	42ab      	cmp	r3, r5
 8004a20:	dcf2      	bgt.n	8004a08 <_printf_i+0x214>
 8004a22:	e7eb      	b.n	80049fc <_printf_i+0x208>
 8004a24:	2500      	movs	r5, #0
 8004a26:	f104 0619 	add.w	r6, r4, #25
 8004a2a:	e7f5      	b.n	8004a18 <_printf_i+0x224>
 8004a2c:	08005415 	.word	0x08005415
 8004a30:	08005426 	.word	0x08005426

08004a34 <__sflush_r>:
 8004a34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3a:	0716      	lsls	r6, r2, #28
 8004a3c:	4605      	mov	r5, r0
 8004a3e:	460c      	mov	r4, r1
 8004a40:	d454      	bmi.n	8004aec <__sflush_r+0xb8>
 8004a42:	684b      	ldr	r3, [r1, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	dc02      	bgt.n	8004a4e <__sflush_r+0x1a>
 8004a48:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	dd48      	ble.n	8004ae0 <__sflush_r+0xac>
 8004a4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a50:	2e00      	cmp	r6, #0
 8004a52:	d045      	beq.n	8004ae0 <__sflush_r+0xac>
 8004a54:	2300      	movs	r3, #0
 8004a56:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a5a:	682f      	ldr	r7, [r5, #0]
 8004a5c:	6a21      	ldr	r1, [r4, #32]
 8004a5e:	602b      	str	r3, [r5, #0]
 8004a60:	d030      	beq.n	8004ac4 <__sflush_r+0x90>
 8004a62:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a64:	89a3      	ldrh	r3, [r4, #12]
 8004a66:	0759      	lsls	r1, r3, #29
 8004a68:	d505      	bpl.n	8004a76 <__sflush_r+0x42>
 8004a6a:	6863      	ldr	r3, [r4, #4]
 8004a6c:	1ad2      	subs	r2, r2, r3
 8004a6e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a70:	b10b      	cbz	r3, 8004a76 <__sflush_r+0x42>
 8004a72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a74:	1ad2      	subs	r2, r2, r3
 8004a76:	2300      	movs	r3, #0
 8004a78:	4628      	mov	r0, r5
 8004a7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a7c:	6a21      	ldr	r1, [r4, #32]
 8004a7e:	47b0      	blx	r6
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	89a3      	ldrh	r3, [r4, #12]
 8004a84:	d106      	bne.n	8004a94 <__sflush_r+0x60>
 8004a86:	6829      	ldr	r1, [r5, #0]
 8004a88:	291d      	cmp	r1, #29
 8004a8a:	d82b      	bhi.n	8004ae4 <__sflush_r+0xb0>
 8004a8c:	4a28      	ldr	r2, [pc, #160]	@ (8004b30 <__sflush_r+0xfc>)
 8004a8e:	410a      	asrs	r2, r1
 8004a90:	07d6      	lsls	r6, r2, #31
 8004a92:	d427      	bmi.n	8004ae4 <__sflush_r+0xb0>
 8004a94:	2200      	movs	r2, #0
 8004a96:	6062      	str	r2, [r4, #4]
 8004a98:	6922      	ldr	r2, [r4, #16]
 8004a9a:	04d9      	lsls	r1, r3, #19
 8004a9c:	6022      	str	r2, [r4, #0]
 8004a9e:	d504      	bpl.n	8004aaa <__sflush_r+0x76>
 8004aa0:	1c42      	adds	r2, r0, #1
 8004aa2:	d101      	bne.n	8004aa8 <__sflush_r+0x74>
 8004aa4:	682b      	ldr	r3, [r5, #0]
 8004aa6:	b903      	cbnz	r3, 8004aaa <__sflush_r+0x76>
 8004aa8:	6560      	str	r0, [r4, #84]	@ 0x54
 8004aaa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004aac:	602f      	str	r7, [r5, #0]
 8004aae:	b1b9      	cbz	r1, 8004ae0 <__sflush_r+0xac>
 8004ab0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ab4:	4299      	cmp	r1, r3
 8004ab6:	d002      	beq.n	8004abe <__sflush_r+0x8a>
 8004ab8:	4628      	mov	r0, r5
 8004aba:	f7ff fc89 	bl	80043d0 <_free_r>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ac2:	e00d      	b.n	8004ae0 <__sflush_r+0xac>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	47b0      	blx	r6
 8004aca:	4602      	mov	r2, r0
 8004acc:	1c50      	adds	r0, r2, #1
 8004ace:	d1c9      	bne.n	8004a64 <__sflush_r+0x30>
 8004ad0:	682b      	ldr	r3, [r5, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0c6      	beq.n	8004a64 <__sflush_r+0x30>
 8004ad6:	2b1d      	cmp	r3, #29
 8004ad8:	d001      	beq.n	8004ade <__sflush_r+0xaa>
 8004ada:	2b16      	cmp	r3, #22
 8004adc:	d11d      	bne.n	8004b1a <__sflush_r+0xe6>
 8004ade:	602f      	str	r7, [r5, #0]
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	e021      	b.n	8004b28 <__sflush_r+0xf4>
 8004ae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ae8:	b21b      	sxth	r3, r3
 8004aea:	e01a      	b.n	8004b22 <__sflush_r+0xee>
 8004aec:	690f      	ldr	r7, [r1, #16]
 8004aee:	2f00      	cmp	r7, #0
 8004af0:	d0f6      	beq.n	8004ae0 <__sflush_r+0xac>
 8004af2:	0793      	lsls	r3, r2, #30
 8004af4:	bf18      	it	ne
 8004af6:	2300      	movne	r3, #0
 8004af8:	680e      	ldr	r6, [r1, #0]
 8004afa:	bf08      	it	eq
 8004afc:	694b      	ldreq	r3, [r1, #20]
 8004afe:	1bf6      	subs	r6, r6, r7
 8004b00:	600f      	str	r7, [r1, #0]
 8004b02:	608b      	str	r3, [r1, #8]
 8004b04:	2e00      	cmp	r6, #0
 8004b06:	ddeb      	ble.n	8004ae0 <__sflush_r+0xac>
 8004b08:	4633      	mov	r3, r6
 8004b0a:	463a      	mov	r2, r7
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	6a21      	ldr	r1, [r4, #32]
 8004b10:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004b14:	47e0      	blx	ip
 8004b16:	2800      	cmp	r0, #0
 8004b18:	dc07      	bgt.n	8004b2a <__sflush_r+0xf6>
 8004b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b22:	f04f 30ff 	mov.w	r0, #4294967295
 8004b26:	81a3      	strh	r3, [r4, #12]
 8004b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b2a:	4407      	add	r7, r0
 8004b2c:	1a36      	subs	r6, r6, r0
 8004b2e:	e7e9      	b.n	8004b04 <__sflush_r+0xd0>
 8004b30:	dfbffffe 	.word	0xdfbffffe

08004b34 <_fflush_r>:
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	690b      	ldr	r3, [r1, #16]
 8004b38:	4605      	mov	r5, r0
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	b913      	cbnz	r3, 8004b44 <_fflush_r+0x10>
 8004b3e:	2500      	movs	r5, #0
 8004b40:	4628      	mov	r0, r5
 8004b42:	bd38      	pop	{r3, r4, r5, pc}
 8004b44:	b118      	cbz	r0, 8004b4e <_fflush_r+0x1a>
 8004b46:	6a03      	ldr	r3, [r0, #32]
 8004b48:	b90b      	cbnz	r3, 8004b4e <_fflush_r+0x1a>
 8004b4a:	f7ff fa8b 	bl	8004064 <__sinit>
 8004b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f3      	beq.n	8004b3e <_fflush_r+0xa>
 8004b56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b58:	07d0      	lsls	r0, r2, #31
 8004b5a:	d404      	bmi.n	8004b66 <_fflush_r+0x32>
 8004b5c:	0599      	lsls	r1, r3, #22
 8004b5e:	d402      	bmi.n	8004b66 <_fflush_r+0x32>
 8004b60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b62:	f7ff fc0c 	bl	800437e <__retarget_lock_acquire_recursive>
 8004b66:	4628      	mov	r0, r5
 8004b68:	4621      	mov	r1, r4
 8004b6a:	f7ff ff63 	bl	8004a34 <__sflush_r>
 8004b6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b70:	4605      	mov	r5, r0
 8004b72:	07da      	lsls	r2, r3, #31
 8004b74:	d4e4      	bmi.n	8004b40 <_fflush_r+0xc>
 8004b76:	89a3      	ldrh	r3, [r4, #12]
 8004b78:	059b      	lsls	r3, r3, #22
 8004b7a:	d4e1      	bmi.n	8004b40 <_fflush_r+0xc>
 8004b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b7e:	f7ff fbff 	bl	8004380 <__retarget_lock_release_recursive>
 8004b82:	e7dd      	b.n	8004b40 <_fflush_r+0xc>

08004b84 <fiprintf>:
 8004b84:	b40e      	push	{r1, r2, r3}
 8004b86:	b503      	push	{r0, r1, lr}
 8004b88:	4601      	mov	r1, r0
 8004b8a:	ab03      	add	r3, sp, #12
 8004b8c:	4805      	ldr	r0, [pc, #20]	@ (8004ba4 <fiprintf+0x20>)
 8004b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b92:	6800      	ldr	r0, [r0, #0]
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	f000 f899 	bl	8004ccc <_vfiprintf_r>
 8004b9a:	b002      	add	sp, #8
 8004b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ba0:	b003      	add	sp, #12
 8004ba2:	4770      	bx	lr
 8004ba4:	20000134 	.word	0x20000134

08004ba8 <memmove>:
 8004ba8:	4288      	cmp	r0, r1
 8004baa:	b510      	push	{r4, lr}
 8004bac:	eb01 0402 	add.w	r4, r1, r2
 8004bb0:	d902      	bls.n	8004bb8 <memmove+0x10>
 8004bb2:	4284      	cmp	r4, r0
 8004bb4:	4623      	mov	r3, r4
 8004bb6:	d807      	bhi.n	8004bc8 <memmove+0x20>
 8004bb8:	1e43      	subs	r3, r0, #1
 8004bba:	42a1      	cmp	r1, r4
 8004bbc:	d008      	beq.n	8004bd0 <memmove+0x28>
 8004bbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bc6:	e7f8      	b.n	8004bba <memmove+0x12>
 8004bc8:	4601      	mov	r1, r0
 8004bca:	4402      	add	r2, r0
 8004bcc:	428a      	cmp	r2, r1
 8004bce:	d100      	bne.n	8004bd2 <memmove+0x2a>
 8004bd0:	bd10      	pop	{r4, pc}
 8004bd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bda:	e7f7      	b.n	8004bcc <memmove+0x24>

08004bdc <memchr>:
 8004bdc:	4603      	mov	r3, r0
 8004bde:	b510      	push	{r4, lr}
 8004be0:	b2c9      	uxtb	r1, r1
 8004be2:	4402      	add	r2, r0
 8004be4:	4293      	cmp	r3, r2
 8004be6:	4618      	mov	r0, r3
 8004be8:	d101      	bne.n	8004bee <memchr+0x12>
 8004bea:	2000      	movs	r0, #0
 8004bec:	e003      	b.n	8004bf6 <memchr+0x1a>
 8004bee:	7804      	ldrb	r4, [r0, #0]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	428c      	cmp	r4, r1
 8004bf4:	d1f6      	bne.n	8004be4 <memchr+0x8>
 8004bf6:	bd10      	pop	{r4, pc}

08004bf8 <memcpy>:
 8004bf8:	440a      	add	r2, r1
 8004bfa:	4291      	cmp	r1, r2
 8004bfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c00:	d100      	bne.n	8004c04 <memcpy+0xc>
 8004c02:	4770      	bx	lr
 8004c04:	b510      	push	{r4, lr}
 8004c06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c0a:	4291      	cmp	r1, r2
 8004c0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c10:	d1f9      	bne.n	8004c06 <memcpy+0xe>
 8004c12:	bd10      	pop	{r4, pc}

08004c14 <abort>:
 8004c14:	2006      	movs	r0, #6
 8004c16:	b508      	push	{r3, lr}
 8004c18:	f000 fa2c 	bl	8005074 <raise>
 8004c1c:	2001      	movs	r0, #1
 8004c1e:	f7fc fc0c 	bl	800143a <_exit>

08004c22 <_realloc_r>:
 8004c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c26:	4680      	mov	r8, r0
 8004c28:	4615      	mov	r5, r2
 8004c2a:	460c      	mov	r4, r1
 8004c2c:	b921      	cbnz	r1, 8004c38 <_realloc_r+0x16>
 8004c2e:	4611      	mov	r1, r2
 8004c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c34:	f7ff b87a 	b.w	8003d2c <_malloc_r>
 8004c38:	b92a      	cbnz	r2, 8004c46 <_realloc_r+0x24>
 8004c3a:	f7ff fbc9 	bl	80043d0 <_free_r>
 8004c3e:	2400      	movs	r4, #0
 8004c40:	4620      	mov	r0, r4
 8004c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c46:	f000 fa31 	bl	80050ac <_malloc_usable_size_r>
 8004c4a:	4285      	cmp	r5, r0
 8004c4c:	4606      	mov	r6, r0
 8004c4e:	d802      	bhi.n	8004c56 <_realloc_r+0x34>
 8004c50:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004c54:	d8f4      	bhi.n	8004c40 <_realloc_r+0x1e>
 8004c56:	4629      	mov	r1, r5
 8004c58:	4640      	mov	r0, r8
 8004c5a:	f7ff f867 	bl	8003d2c <_malloc_r>
 8004c5e:	4607      	mov	r7, r0
 8004c60:	2800      	cmp	r0, #0
 8004c62:	d0ec      	beq.n	8004c3e <_realloc_r+0x1c>
 8004c64:	42b5      	cmp	r5, r6
 8004c66:	462a      	mov	r2, r5
 8004c68:	4621      	mov	r1, r4
 8004c6a:	bf28      	it	cs
 8004c6c:	4632      	movcs	r2, r6
 8004c6e:	f7ff ffc3 	bl	8004bf8 <memcpy>
 8004c72:	4621      	mov	r1, r4
 8004c74:	4640      	mov	r0, r8
 8004c76:	f7ff fbab 	bl	80043d0 <_free_r>
 8004c7a:	463c      	mov	r4, r7
 8004c7c:	e7e0      	b.n	8004c40 <_realloc_r+0x1e>

08004c7e <__sfputc_r>:
 8004c7e:	6893      	ldr	r3, [r2, #8]
 8004c80:	b410      	push	{r4}
 8004c82:	3b01      	subs	r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	6093      	str	r3, [r2, #8]
 8004c88:	da07      	bge.n	8004c9a <__sfputc_r+0x1c>
 8004c8a:	6994      	ldr	r4, [r2, #24]
 8004c8c:	42a3      	cmp	r3, r4
 8004c8e:	db01      	blt.n	8004c94 <__sfputc_r+0x16>
 8004c90:	290a      	cmp	r1, #10
 8004c92:	d102      	bne.n	8004c9a <__sfputc_r+0x1c>
 8004c94:	bc10      	pop	{r4}
 8004c96:	f000 b931 	b.w	8004efc <__swbuf_r>
 8004c9a:	6813      	ldr	r3, [r2, #0]
 8004c9c:	1c58      	adds	r0, r3, #1
 8004c9e:	6010      	str	r0, [r2, #0]
 8004ca0:	7019      	strb	r1, [r3, #0]
 8004ca2:	4608      	mov	r0, r1
 8004ca4:	bc10      	pop	{r4}
 8004ca6:	4770      	bx	lr

08004ca8 <__sfputs_r>:
 8004ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004caa:	4606      	mov	r6, r0
 8004cac:	460f      	mov	r7, r1
 8004cae:	4614      	mov	r4, r2
 8004cb0:	18d5      	adds	r5, r2, r3
 8004cb2:	42ac      	cmp	r4, r5
 8004cb4:	d101      	bne.n	8004cba <__sfputs_r+0x12>
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	e007      	b.n	8004cca <__sfputs_r+0x22>
 8004cba:	463a      	mov	r2, r7
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc2:	f7ff ffdc 	bl	8004c7e <__sfputc_r>
 8004cc6:	1c43      	adds	r3, r0, #1
 8004cc8:	d1f3      	bne.n	8004cb2 <__sfputs_r+0xa>
 8004cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ccc <_vfiprintf_r>:
 8004ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd0:	460d      	mov	r5, r1
 8004cd2:	4614      	mov	r4, r2
 8004cd4:	4698      	mov	r8, r3
 8004cd6:	4606      	mov	r6, r0
 8004cd8:	b09d      	sub	sp, #116	@ 0x74
 8004cda:	b118      	cbz	r0, 8004ce4 <_vfiprintf_r+0x18>
 8004cdc:	6a03      	ldr	r3, [r0, #32]
 8004cde:	b90b      	cbnz	r3, 8004ce4 <_vfiprintf_r+0x18>
 8004ce0:	f7ff f9c0 	bl	8004064 <__sinit>
 8004ce4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ce6:	07d9      	lsls	r1, r3, #31
 8004ce8:	d405      	bmi.n	8004cf6 <_vfiprintf_r+0x2a>
 8004cea:	89ab      	ldrh	r3, [r5, #12]
 8004cec:	059a      	lsls	r2, r3, #22
 8004cee:	d402      	bmi.n	8004cf6 <_vfiprintf_r+0x2a>
 8004cf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cf2:	f7ff fb44 	bl	800437e <__retarget_lock_acquire_recursive>
 8004cf6:	89ab      	ldrh	r3, [r5, #12]
 8004cf8:	071b      	lsls	r3, r3, #28
 8004cfa:	d501      	bpl.n	8004d00 <_vfiprintf_r+0x34>
 8004cfc:	692b      	ldr	r3, [r5, #16]
 8004cfe:	b99b      	cbnz	r3, 8004d28 <_vfiprintf_r+0x5c>
 8004d00:	4629      	mov	r1, r5
 8004d02:	4630      	mov	r0, r6
 8004d04:	f000 f938 	bl	8004f78 <__swsetup_r>
 8004d08:	b170      	cbz	r0, 8004d28 <_vfiprintf_r+0x5c>
 8004d0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d0c:	07dc      	lsls	r4, r3, #31
 8004d0e:	d504      	bpl.n	8004d1a <_vfiprintf_r+0x4e>
 8004d10:	f04f 30ff 	mov.w	r0, #4294967295
 8004d14:	b01d      	add	sp, #116	@ 0x74
 8004d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1a:	89ab      	ldrh	r3, [r5, #12]
 8004d1c:	0598      	lsls	r0, r3, #22
 8004d1e:	d4f7      	bmi.n	8004d10 <_vfiprintf_r+0x44>
 8004d20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d22:	f7ff fb2d 	bl	8004380 <__retarget_lock_release_recursive>
 8004d26:	e7f3      	b.n	8004d10 <_vfiprintf_r+0x44>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d2c:	2320      	movs	r3, #32
 8004d2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d32:	2330      	movs	r3, #48	@ 0x30
 8004d34:	f04f 0901 	mov.w	r9, #1
 8004d38:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d3c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004ee8 <_vfiprintf_r+0x21c>
 8004d40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d44:	4623      	mov	r3, r4
 8004d46:	469a      	mov	sl, r3
 8004d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d4c:	b10a      	cbz	r2, 8004d52 <_vfiprintf_r+0x86>
 8004d4e:	2a25      	cmp	r2, #37	@ 0x25
 8004d50:	d1f9      	bne.n	8004d46 <_vfiprintf_r+0x7a>
 8004d52:	ebba 0b04 	subs.w	fp, sl, r4
 8004d56:	d00b      	beq.n	8004d70 <_vfiprintf_r+0xa4>
 8004d58:	465b      	mov	r3, fp
 8004d5a:	4622      	mov	r2, r4
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	4630      	mov	r0, r6
 8004d60:	f7ff ffa2 	bl	8004ca8 <__sfputs_r>
 8004d64:	3001      	adds	r0, #1
 8004d66:	f000 80a7 	beq.w	8004eb8 <_vfiprintf_r+0x1ec>
 8004d6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d6c:	445a      	add	r2, fp
 8004d6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d70:	f89a 3000 	ldrb.w	r3, [sl]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 809f 	beq.w	8004eb8 <_vfiprintf_r+0x1ec>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d84:	f10a 0a01 	add.w	sl, sl, #1
 8004d88:	9304      	str	r3, [sp, #16]
 8004d8a:	9307      	str	r3, [sp, #28]
 8004d8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d90:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d92:	4654      	mov	r4, sl
 8004d94:	2205      	movs	r2, #5
 8004d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d9a:	4853      	ldr	r0, [pc, #332]	@ (8004ee8 <_vfiprintf_r+0x21c>)
 8004d9c:	f7ff ff1e 	bl	8004bdc <memchr>
 8004da0:	9a04      	ldr	r2, [sp, #16]
 8004da2:	b9d8      	cbnz	r0, 8004ddc <_vfiprintf_r+0x110>
 8004da4:	06d1      	lsls	r1, r2, #27
 8004da6:	bf44      	itt	mi
 8004da8:	2320      	movmi	r3, #32
 8004daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dae:	0713      	lsls	r3, r2, #28
 8004db0:	bf44      	itt	mi
 8004db2:	232b      	movmi	r3, #43	@ 0x2b
 8004db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004db8:	f89a 3000 	ldrb.w	r3, [sl]
 8004dbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dbe:	d015      	beq.n	8004dec <_vfiprintf_r+0x120>
 8004dc0:	4654      	mov	r4, sl
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	f04f 0c0a 	mov.w	ip, #10
 8004dc8:	9a07      	ldr	r2, [sp, #28]
 8004dca:	4621      	mov	r1, r4
 8004dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dd0:	3b30      	subs	r3, #48	@ 0x30
 8004dd2:	2b09      	cmp	r3, #9
 8004dd4:	d94b      	bls.n	8004e6e <_vfiprintf_r+0x1a2>
 8004dd6:	b1b0      	cbz	r0, 8004e06 <_vfiprintf_r+0x13a>
 8004dd8:	9207      	str	r2, [sp, #28]
 8004dda:	e014      	b.n	8004e06 <_vfiprintf_r+0x13a>
 8004ddc:	eba0 0308 	sub.w	r3, r0, r8
 8004de0:	fa09 f303 	lsl.w	r3, r9, r3
 8004de4:	4313      	orrs	r3, r2
 8004de6:	46a2      	mov	sl, r4
 8004de8:	9304      	str	r3, [sp, #16]
 8004dea:	e7d2      	b.n	8004d92 <_vfiprintf_r+0xc6>
 8004dec:	9b03      	ldr	r3, [sp, #12]
 8004dee:	1d19      	adds	r1, r3, #4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	9103      	str	r1, [sp, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	bfbb      	ittet	lt
 8004df8:	425b      	neglt	r3, r3
 8004dfa:	f042 0202 	orrlt.w	r2, r2, #2
 8004dfe:	9307      	strge	r3, [sp, #28]
 8004e00:	9307      	strlt	r3, [sp, #28]
 8004e02:	bfb8      	it	lt
 8004e04:	9204      	strlt	r2, [sp, #16]
 8004e06:	7823      	ldrb	r3, [r4, #0]
 8004e08:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e0a:	d10a      	bne.n	8004e22 <_vfiprintf_r+0x156>
 8004e0c:	7863      	ldrb	r3, [r4, #1]
 8004e0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e10:	d132      	bne.n	8004e78 <_vfiprintf_r+0x1ac>
 8004e12:	9b03      	ldr	r3, [sp, #12]
 8004e14:	3402      	adds	r4, #2
 8004e16:	1d1a      	adds	r2, r3, #4
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	9203      	str	r2, [sp, #12]
 8004e1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e20:	9305      	str	r3, [sp, #20]
 8004e22:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004eec <_vfiprintf_r+0x220>
 8004e26:	2203      	movs	r2, #3
 8004e28:	4650      	mov	r0, sl
 8004e2a:	7821      	ldrb	r1, [r4, #0]
 8004e2c:	f7ff fed6 	bl	8004bdc <memchr>
 8004e30:	b138      	cbz	r0, 8004e42 <_vfiprintf_r+0x176>
 8004e32:	2240      	movs	r2, #64	@ 0x40
 8004e34:	9b04      	ldr	r3, [sp, #16]
 8004e36:	eba0 000a 	sub.w	r0, r0, sl
 8004e3a:	4082      	lsls	r2, r0
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	3401      	adds	r4, #1
 8004e40:	9304      	str	r3, [sp, #16]
 8004e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e46:	2206      	movs	r2, #6
 8004e48:	4829      	ldr	r0, [pc, #164]	@ (8004ef0 <_vfiprintf_r+0x224>)
 8004e4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e4e:	f7ff fec5 	bl	8004bdc <memchr>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d03f      	beq.n	8004ed6 <_vfiprintf_r+0x20a>
 8004e56:	4b27      	ldr	r3, [pc, #156]	@ (8004ef4 <_vfiprintf_r+0x228>)
 8004e58:	bb1b      	cbnz	r3, 8004ea2 <_vfiprintf_r+0x1d6>
 8004e5a:	9b03      	ldr	r3, [sp, #12]
 8004e5c:	3307      	adds	r3, #7
 8004e5e:	f023 0307 	bic.w	r3, r3, #7
 8004e62:	3308      	adds	r3, #8
 8004e64:	9303      	str	r3, [sp, #12]
 8004e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e68:	443b      	add	r3, r7
 8004e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e6c:	e76a      	b.n	8004d44 <_vfiprintf_r+0x78>
 8004e6e:	460c      	mov	r4, r1
 8004e70:	2001      	movs	r0, #1
 8004e72:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e76:	e7a8      	b.n	8004dca <_vfiprintf_r+0xfe>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f04f 0c0a 	mov.w	ip, #10
 8004e7e:	4619      	mov	r1, r3
 8004e80:	3401      	adds	r4, #1
 8004e82:	9305      	str	r3, [sp, #20]
 8004e84:	4620      	mov	r0, r4
 8004e86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e8a:	3a30      	subs	r2, #48	@ 0x30
 8004e8c:	2a09      	cmp	r2, #9
 8004e8e:	d903      	bls.n	8004e98 <_vfiprintf_r+0x1cc>
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0c6      	beq.n	8004e22 <_vfiprintf_r+0x156>
 8004e94:	9105      	str	r1, [sp, #20]
 8004e96:	e7c4      	b.n	8004e22 <_vfiprintf_r+0x156>
 8004e98:	4604      	mov	r4, r0
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ea0:	e7f0      	b.n	8004e84 <_vfiprintf_r+0x1b8>
 8004ea2:	ab03      	add	r3, sp, #12
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	462a      	mov	r2, r5
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	4b13      	ldr	r3, [pc, #76]	@ (8004ef8 <_vfiprintf_r+0x22c>)
 8004eac:	a904      	add	r1, sp, #16
 8004eae:	f3af 8000 	nop.w
 8004eb2:	4607      	mov	r7, r0
 8004eb4:	1c78      	adds	r0, r7, #1
 8004eb6:	d1d6      	bne.n	8004e66 <_vfiprintf_r+0x19a>
 8004eb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004eba:	07d9      	lsls	r1, r3, #31
 8004ebc:	d405      	bmi.n	8004eca <_vfiprintf_r+0x1fe>
 8004ebe:	89ab      	ldrh	r3, [r5, #12]
 8004ec0:	059a      	lsls	r2, r3, #22
 8004ec2:	d402      	bmi.n	8004eca <_vfiprintf_r+0x1fe>
 8004ec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ec6:	f7ff fa5b 	bl	8004380 <__retarget_lock_release_recursive>
 8004eca:	89ab      	ldrh	r3, [r5, #12]
 8004ecc:	065b      	lsls	r3, r3, #25
 8004ece:	f53f af1f 	bmi.w	8004d10 <_vfiprintf_r+0x44>
 8004ed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ed4:	e71e      	b.n	8004d14 <_vfiprintf_r+0x48>
 8004ed6:	ab03      	add	r3, sp, #12
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	462a      	mov	r2, r5
 8004edc:	4630      	mov	r0, r6
 8004ede:	4b06      	ldr	r3, [pc, #24]	@ (8004ef8 <_vfiprintf_r+0x22c>)
 8004ee0:	a904      	add	r1, sp, #16
 8004ee2:	f7ff fc87 	bl	80047f4 <_printf_i>
 8004ee6:	e7e4      	b.n	8004eb2 <_vfiprintf_r+0x1e6>
 8004ee8:	08005404 	.word	0x08005404
 8004eec:	0800540a 	.word	0x0800540a
 8004ef0:	0800540e 	.word	0x0800540e
 8004ef4:	00000000 	.word	0x00000000
 8004ef8:	08004ca9 	.word	0x08004ca9

08004efc <__swbuf_r>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	460e      	mov	r6, r1
 8004f00:	4614      	mov	r4, r2
 8004f02:	4605      	mov	r5, r0
 8004f04:	b118      	cbz	r0, 8004f0e <__swbuf_r+0x12>
 8004f06:	6a03      	ldr	r3, [r0, #32]
 8004f08:	b90b      	cbnz	r3, 8004f0e <__swbuf_r+0x12>
 8004f0a:	f7ff f8ab 	bl	8004064 <__sinit>
 8004f0e:	69a3      	ldr	r3, [r4, #24]
 8004f10:	60a3      	str	r3, [r4, #8]
 8004f12:	89a3      	ldrh	r3, [r4, #12]
 8004f14:	071a      	lsls	r2, r3, #28
 8004f16:	d501      	bpl.n	8004f1c <__swbuf_r+0x20>
 8004f18:	6923      	ldr	r3, [r4, #16]
 8004f1a:	b943      	cbnz	r3, 8004f2e <__swbuf_r+0x32>
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f000 f82a 	bl	8004f78 <__swsetup_r>
 8004f24:	b118      	cbz	r0, 8004f2e <__swbuf_r+0x32>
 8004f26:	f04f 37ff 	mov.w	r7, #4294967295
 8004f2a:	4638      	mov	r0, r7
 8004f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	6922      	ldr	r2, [r4, #16]
 8004f32:	b2f6      	uxtb	r6, r6
 8004f34:	1a98      	subs	r0, r3, r2
 8004f36:	6963      	ldr	r3, [r4, #20]
 8004f38:	4637      	mov	r7, r6
 8004f3a:	4283      	cmp	r3, r0
 8004f3c:	dc05      	bgt.n	8004f4a <__swbuf_r+0x4e>
 8004f3e:	4621      	mov	r1, r4
 8004f40:	4628      	mov	r0, r5
 8004f42:	f7ff fdf7 	bl	8004b34 <_fflush_r>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	d1ed      	bne.n	8004f26 <__swbuf_r+0x2a>
 8004f4a:	68a3      	ldr	r3, [r4, #8]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	60a3      	str	r3, [r4, #8]
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	6022      	str	r2, [r4, #0]
 8004f56:	701e      	strb	r6, [r3, #0]
 8004f58:	6962      	ldr	r2, [r4, #20]
 8004f5a:	1c43      	adds	r3, r0, #1
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d004      	beq.n	8004f6a <__swbuf_r+0x6e>
 8004f60:	89a3      	ldrh	r3, [r4, #12]
 8004f62:	07db      	lsls	r3, r3, #31
 8004f64:	d5e1      	bpl.n	8004f2a <__swbuf_r+0x2e>
 8004f66:	2e0a      	cmp	r6, #10
 8004f68:	d1df      	bne.n	8004f2a <__swbuf_r+0x2e>
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	f7ff fde1 	bl	8004b34 <_fflush_r>
 8004f72:	2800      	cmp	r0, #0
 8004f74:	d0d9      	beq.n	8004f2a <__swbuf_r+0x2e>
 8004f76:	e7d6      	b.n	8004f26 <__swbuf_r+0x2a>

08004f78 <__swsetup_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	4b29      	ldr	r3, [pc, #164]	@ (8005020 <__swsetup_r+0xa8>)
 8004f7c:	4605      	mov	r5, r0
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	460c      	mov	r4, r1
 8004f82:	b118      	cbz	r0, 8004f8c <__swsetup_r+0x14>
 8004f84:	6a03      	ldr	r3, [r0, #32]
 8004f86:	b90b      	cbnz	r3, 8004f8c <__swsetup_r+0x14>
 8004f88:	f7ff f86c 	bl	8004064 <__sinit>
 8004f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f90:	0719      	lsls	r1, r3, #28
 8004f92:	d422      	bmi.n	8004fda <__swsetup_r+0x62>
 8004f94:	06da      	lsls	r2, r3, #27
 8004f96:	d407      	bmi.n	8004fa8 <__swsetup_r+0x30>
 8004f98:	2209      	movs	r2, #9
 8004f9a:	602a      	str	r2, [r5, #0]
 8004f9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa4:	81a3      	strh	r3, [r4, #12]
 8004fa6:	e033      	b.n	8005010 <__swsetup_r+0x98>
 8004fa8:	0758      	lsls	r0, r3, #29
 8004faa:	d512      	bpl.n	8004fd2 <__swsetup_r+0x5a>
 8004fac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fae:	b141      	cbz	r1, 8004fc2 <__swsetup_r+0x4a>
 8004fb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004fb4:	4299      	cmp	r1, r3
 8004fb6:	d002      	beq.n	8004fbe <__swsetup_r+0x46>
 8004fb8:	4628      	mov	r0, r5
 8004fba:	f7ff fa09 	bl	80043d0 <_free_r>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8004fc2:	89a3      	ldrh	r3, [r4, #12]
 8004fc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004fc8:	81a3      	strh	r3, [r4, #12]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	6063      	str	r3, [r4, #4]
 8004fce:	6923      	ldr	r3, [r4, #16]
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	f043 0308 	orr.w	r3, r3, #8
 8004fd8:	81a3      	strh	r3, [r4, #12]
 8004fda:	6923      	ldr	r3, [r4, #16]
 8004fdc:	b94b      	cbnz	r3, 8004ff2 <__swsetup_r+0x7a>
 8004fde:	89a3      	ldrh	r3, [r4, #12]
 8004fe0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004fe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fe8:	d003      	beq.n	8004ff2 <__swsetup_r+0x7a>
 8004fea:	4621      	mov	r1, r4
 8004fec:	4628      	mov	r0, r5
 8004fee:	f000 f88a 	bl	8005106 <__smakebuf_r>
 8004ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ff6:	f013 0201 	ands.w	r2, r3, #1
 8004ffa:	d00a      	beq.n	8005012 <__swsetup_r+0x9a>
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	60a2      	str	r2, [r4, #8]
 8005000:	6962      	ldr	r2, [r4, #20]
 8005002:	4252      	negs	r2, r2
 8005004:	61a2      	str	r2, [r4, #24]
 8005006:	6922      	ldr	r2, [r4, #16]
 8005008:	b942      	cbnz	r2, 800501c <__swsetup_r+0xa4>
 800500a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800500e:	d1c5      	bne.n	8004f9c <__swsetup_r+0x24>
 8005010:	bd38      	pop	{r3, r4, r5, pc}
 8005012:	0799      	lsls	r1, r3, #30
 8005014:	bf58      	it	pl
 8005016:	6962      	ldrpl	r2, [r4, #20]
 8005018:	60a2      	str	r2, [r4, #8]
 800501a:	e7f4      	b.n	8005006 <__swsetup_r+0x8e>
 800501c:	2000      	movs	r0, #0
 800501e:	e7f7      	b.n	8005010 <__swsetup_r+0x98>
 8005020:	20000134 	.word	0x20000134

08005024 <_raise_r>:
 8005024:	291f      	cmp	r1, #31
 8005026:	b538      	push	{r3, r4, r5, lr}
 8005028:	4605      	mov	r5, r0
 800502a:	460c      	mov	r4, r1
 800502c:	d904      	bls.n	8005038 <_raise_r+0x14>
 800502e:	2316      	movs	r3, #22
 8005030:	6003      	str	r3, [r0, #0]
 8005032:	f04f 30ff 	mov.w	r0, #4294967295
 8005036:	bd38      	pop	{r3, r4, r5, pc}
 8005038:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800503a:	b112      	cbz	r2, 8005042 <_raise_r+0x1e>
 800503c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005040:	b94b      	cbnz	r3, 8005056 <_raise_r+0x32>
 8005042:	4628      	mov	r0, r5
 8005044:	f000 f830 	bl	80050a8 <_getpid_r>
 8005048:	4622      	mov	r2, r4
 800504a:	4601      	mov	r1, r0
 800504c:	4628      	mov	r0, r5
 800504e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005052:	f000 b817 	b.w	8005084 <_kill_r>
 8005056:	2b01      	cmp	r3, #1
 8005058:	d00a      	beq.n	8005070 <_raise_r+0x4c>
 800505a:	1c59      	adds	r1, r3, #1
 800505c:	d103      	bne.n	8005066 <_raise_r+0x42>
 800505e:	2316      	movs	r3, #22
 8005060:	6003      	str	r3, [r0, #0]
 8005062:	2001      	movs	r0, #1
 8005064:	e7e7      	b.n	8005036 <_raise_r+0x12>
 8005066:	2100      	movs	r1, #0
 8005068:	4620      	mov	r0, r4
 800506a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800506e:	4798      	blx	r3
 8005070:	2000      	movs	r0, #0
 8005072:	e7e0      	b.n	8005036 <_raise_r+0x12>

08005074 <raise>:
 8005074:	4b02      	ldr	r3, [pc, #8]	@ (8005080 <raise+0xc>)
 8005076:	4601      	mov	r1, r0
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	f7ff bfd3 	b.w	8005024 <_raise_r>
 800507e:	bf00      	nop
 8005080:	20000134 	.word	0x20000134

08005084 <_kill_r>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	2300      	movs	r3, #0
 8005088:	4d06      	ldr	r5, [pc, #24]	@ (80050a4 <_kill_r+0x20>)
 800508a:	4604      	mov	r4, r0
 800508c:	4608      	mov	r0, r1
 800508e:	4611      	mov	r1, r2
 8005090:	602b      	str	r3, [r5, #0]
 8005092:	f7fc f9c2 	bl	800141a <_kill>
 8005096:	1c43      	adds	r3, r0, #1
 8005098:	d102      	bne.n	80050a0 <_kill_r+0x1c>
 800509a:	682b      	ldr	r3, [r5, #0]
 800509c:	b103      	cbz	r3, 80050a0 <_kill_r+0x1c>
 800509e:	6023      	str	r3, [r4, #0]
 80050a0:	bd38      	pop	{r3, r4, r5, pc}
 80050a2:	bf00      	nop
 80050a4:	20000410 	.word	0x20000410

080050a8 <_getpid_r>:
 80050a8:	f7fc b9b0 	b.w	800140c <_getpid>

080050ac <_malloc_usable_size_r>:
 80050ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050b0:	1f18      	subs	r0, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	bfbc      	itt	lt
 80050b6:	580b      	ldrlt	r3, [r1, r0]
 80050b8:	18c0      	addlt	r0, r0, r3
 80050ba:	4770      	bx	lr

080050bc <__swhatbuf_r>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	460c      	mov	r4, r1
 80050c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050c4:	4615      	mov	r5, r2
 80050c6:	2900      	cmp	r1, #0
 80050c8:	461e      	mov	r6, r3
 80050ca:	b096      	sub	sp, #88	@ 0x58
 80050cc:	da0c      	bge.n	80050e8 <__swhatbuf_r+0x2c>
 80050ce:	89a3      	ldrh	r3, [r4, #12]
 80050d0:	2100      	movs	r1, #0
 80050d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80050d6:	bf14      	ite	ne
 80050d8:	2340      	movne	r3, #64	@ 0x40
 80050da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80050de:	2000      	movs	r0, #0
 80050e0:	6031      	str	r1, [r6, #0]
 80050e2:	602b      	str	r3, [r5, #0]
 80050e4:	b016      	add	sp, #88	@ 0x58
 80050e6:	bd70      	pop	{r4, r5, r6, pc}
 80050e8:	466a      	mov	r2, sp
 80050ea:	f000 f849 	bl	8005180 <_fstat_r>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	dbed      	blt.n	80050ce <__swhatbuf_r+0x12>
 80050f2:	9901      	ldr	r1, [sp, #4]
 80050f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80050f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80050fc:	4259      	negs	r1, r3
 80050fe:	4159      	adcs	r1, r3
 8005100:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005104:	e7eb      	b.n	80050de <__swhatbuf_r+0x22>

08005106 <__smakebuf_r>:
 8005106:	898b      	ldrh	r3, [r1, #12]
 8005108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800510a:	079d      	lsls	r5, r3, #30
 800510c:	4606      	mov	r6, r0
 800510e:	460c      	mov	r4, r1
 8005110:	d507      	bpl.n	8005122 <__smakebuf_r+0x1c>
 8005112:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005116:	6023      	str	r3, [r4, #0]
 8005118:	6123      	str	r3, [r4, #16]
 800511a:	2301      	movs	r3, #1
 800511c:	6163      	str	r3, [r4, #20]
 800511e:	b003      	add	sp, #12
 8005120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005122:	466a      	mov	r2, sp
 8005124:	ab01      	add	r3, sp, #4
 8005126:	f7ff ffc9 	bl	80050bc <__swhatbuf_r>
 800512a:	9f00      	ldr	r7, [sp, #0]
 800512c:	4605      	mov	r5, r0
 800512e:	4639      	mov	r1, r7
 8005130:	4630      	mov	r0, r6
 8005132:	f7fe fdfb 	bl	8003d2c <_malloc_r>
 8005136:	b948      	cbnz	r0, 800514c <__smakebuf_r+0x46>
 8005138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800513c:	059a      	lsls	r2, r3, #22
 800513e:	d4ee      	bmi.n	800511e <__smakebuf_r+0x18>
 8005140:	f023 0303 	bic.w	r3, r3, #3
 8005144:	f043 0302 	orr.w	r3, r3, #2
 8005148:	81a3      	strh	r3, [r4, #12]
 800514a:	e7e2      	b.n	8005112 <__smakebuf_r+0xc>
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005156:	81a3      	strh	r3, [r4, #12]
 8005158:	9b01      	ldr	r3, [sp, #4]
 800515a:	6020      	str	r0, [r4, #0]
 800515c:	b15b      	cbz	r3, 8005176 <__smakebuf_r+0x70>
 800515e:	4630      	mov	r0, r6
 8005160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005164:	f000 f81e 	bl	80051a4 <_isatty_r>
 8005168:	b128      	cbz	r0, 8005176 <__smakebuf_r+0x70>
 800516a:	89a3      	ldrh	r3, [r4, #12]
 800516c:	f023 0303 	bic.w	r3, r3, #3
 8005170:	f043 0301 	orr.w	r3, r3, #1
 8005174:	81a3      	strh	r3, [r4, #12]
 8005176:	89a3      	ldrh	r3, [r4, #12]
 8005178:	431d      	orrs	r5, r3
 800517a:	81a5      	strh	r5, [r4, #12]
 800517c:	e7cf      	b.n	800511e <__smakebuf_r+0x18>
	...

08005180 <_fstat_r>:
 8005180:	b538      	push	{r3, r4, r5, lr}
 8005182:	2300      	movs	r3, #0
 8005184:	4d06      	ldr	r5, [pc, #24]	@ (80051a0 <_fstat_r+0x20>)
 8005186:	4604      	mov	r4, r0
 8005188:	4608      	mov	r0, r1
 800518a:	4611      	mov	r1, r2
 800518c:	602b      	str	r3, [r5, #0]
 800518e:	f7fc f9a3 	bl	80014d8 <_fstat>
 8005192:	1c43      	adds	r3, r0, #1
 8005194:	d102      	bne.n	800519c <_fstat_r+0x1c>
 8005196:	682b      	ldr	r3, [r5, #0]
 8005198:	b103      	cbz	r3, 800519c <_fstat_r+0x1c>
 800519a:	6023      	str	r3, [r4, #0]
 800519c:	bd38      	pop	{r3, r4, r5, pc}
 800519e:	bf00      	nop
 80051a0:	20000410 	.word	0x20000410

080051a4 <_isatty_r>:
 80051a4:	b538      	push	{r3, r4, r5, lr}
 80051a6:	2300      	movs	r3, #0
 80051a8:	4d05      	ldr	r5, [pc, #20]	@ (80051c0 <_isatty_r+0x1c>)
 80051aa:	4604      	mov	r4, r0
 80051ac:	4608      	mov	r0, r1
 80051ae:	602b      	str	r3, [r5, #0]
 80051b0:	f7fc f9a1 	bl	80014f6 <_isatty>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	d102      	bne.n	80051be <_isatty_r+0x1a>
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	b103      	cbz	r3, 80051be <_isatty_r+0x1a>
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	bd38      	pop	{r3, r4, r5, pc}
 80051c0:	20000410 	.word	0x20000410

080051c4 <_init>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	bf00      	nop
 80051c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ca:	bc08      	pop	{r3}
 80051cc:	469e      	mov	lr, r3
 80051ce:	4770      	bx	lr

080051d0 <_fini>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	bf00      	nop
 80051d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d6:	bc08      	pop	{r3}
 80051d8:	469e      	mov	lr, r3
 80051da:	4770      	bx	lr
