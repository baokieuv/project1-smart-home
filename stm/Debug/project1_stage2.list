
project1_stage2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d78  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08004e84  08004e84  00005e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050c4  080050c4  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080050c4  080050c4  000060c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050cc  080050cc  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050cc  080050cc  000060cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050d0  080050d0  000060d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080050d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000068  0800513c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  0800513c  00007308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df4b  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a0  00000000  00000000  00014fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00017380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a84  00000000  00000000  00018108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189c7  00000000  00000000  00018b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010914  00000000  00000000  00031553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a7e4  00000000  00000000  00041e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc64b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c8  00000000  00000000  000cc690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000d0958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e6c 	.word	0x08004e6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004e6c 	.word	0x08004e6c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <Init_DOOR>:

extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;

void Init_DOOR(char *detail[], Door *door){
 8000160:	b590      	push	{r4, r7, lr}
 8000162:	b085      	sub	sp, #20
 8000164:	af02      	add	r7, sp, #8
 8000166:	6078      	str	r0, [r7, #4]
 8000168:	6039      	str	r1, [r7, #0]
	door->id = atoi(detail[1]);
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	3304      	adds	r3, #4
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	4618      	mov	r0, r3
 8000172:	f003 fd91 	bl	8003c98 <atoi>
 8000176:	4603      	mov	r3, r0
 8000178:	b2da      	uxtb	r2, r3
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	701a      	strb	r2, [r3, #0]

	convert_gpio(&door->timer, &door->channel, &door->gpio_port, &door->gpio_pin, detail[2]);
 800017e:	683b      	ldr	r3, [r7, #0]
 8000180:	1d18      	adds	r0, r3, #4
 8000182:	683b      	ldr	r3, [r7, #0]
 8000184:	f103 0108 	add.w	r1, r3, #8
 8000188:	683b      	ldr	r3, [r7, #0]
 800018a:	f103 020c 	add.w	r2, r3, #12
 800018e:	683b      	ldr	r3, [r7, #0]
 8000190:	f103 0410 	add.w	r4, r3, #16
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	3308      	adds	r3, #8
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	9300      	str	r3, [sp, #0]
 800019c:	4623      	mov	r3, r4
 800019e:	f000 fd2b 	bl	8000bf8 <convert_gpio>
	DOOR_MspInit(door);
 80001a2:	6838      	ldr	r0, [r7, #0]
 80001a4:	f000 ff72 	bl	800108c <DOOR_MspInit>
}
 80001a8:	bf00      	nop
 80001aa:	370c      	adds	r7, #12
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd90      	pop	{r4, r7, pc}

080001b0 <Control_DOOR>:
void Control_DOOR(Door *door){
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	if(door->status == STATUS_ON){
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	785b      	ldrb	r3, [r3, #1]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d169      	bne.n	8000294 <Control_DOOR+0xe4>
		if(door->timer == TIM1){
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	685b      	ldr	r3, [r3, #4]
 80001c4:	4a6b      	ldr	r2, [pc, #428]	@ (8000374 <Control_DOOR+0x1c4>)
 80001c6:	4293      	cmp	r3, r2
 80001c8:	d11f      	bne.n	800020a <Control_DOOR+0x5a>
			__HAL_TIM_SET_COMPARE(&htim1, door->channel, 0);
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	689b      	ldr	r3, [r3, #8]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d104      	bne.n	80001dc <Control_DOOR+0x2c>
 80001d2:	4b69      	ldr	r3, [pc, #420]	@ (8000378 <Control_DOOR+0x1c8>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2200      	movs	r2, #0
 80001d8:	635a      	str	r2, [r3, #52]	@ 0x34
		}
		else{
			__HAL_TIM_SET_COMPARE(&htim3, door->channel, 0);
		}
	}
}
 80001da:	e0c5      	b.n	8000368 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim1, door->channel, 0);
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	689b      	ldr	r3, [r3, #8]
 80001e0:	2b04      	cmp	r3, #4
 80001e2:	d104      	bne.n	80001ee <Control_DOOR+0x3e>
 80001e4:	4b64      	ldr	r3, [pc, #400]	@ (8000378 <Control_DOOR+0x1c8>)
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	2300      	movs	r3, #0
 80001ea:	6393      	str	r3, [r2, #56]	@ 0x38
 80001ec:	e0bc      	b.n	8000368 <Control_DOOR+0x1b8>
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	689b      	ldr	r3, [r3, #8]
 80001f2:	2b08      	cmp	r3, #8
 80001f4:	d104      	bne.n	8000200 <Control_DOOR+0x50>
 80001f6:	4b60      	ldr	r3, [pc, #384]	@ (8000378 <Control_DOOR+0x1c8>)
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	2300      	movs	r3, #0
 80001fc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80001fe:	e0b3      	b.n	8000368 <Control_DOOR+0x1b8>
 8000200:	4b5d      	ldr	r3, [pc, #372]	@ (8000378 <Control_DOOR+0x1c8>)
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	2300      	movs	r3, #0
 8000206:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000208:	e0ae      	b.n	8000368 <Control_DOOR+0x1b8>
		else if(door->timer == TIM2){
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	685b      	ldr	r3, [r3, #4]
 800020e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000212:	d11f      	bne.n	8000254 <Control_DOOR+0xa4>
			__HAL_TIM_SET_COMPARE(&htim2, door->channel, 0);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	689b      	ldr	r3, [r3, #8]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d104      	bne.n	8000226 <Control_DOOR+0x76>
 800021c:	4b57      	ldr	r3, [pc, #348]	@ (800037c <Control_DOOR+0x1cc>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	2200      	movs	r2, #0
 8000222:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000224:	e0a0      	b.n	8000368 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim2, door->channel, 0);
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	689b      	ldr	r3, [r3, #8]
 800022a:	2b04      	cmp	r3, #4
 800022c:	d104      	bne.n	8000238 <Control_DOOR+0x88>
 800022e:	4b53      	ldr	r3, [pc, #332]	@ (800037c <Control_DOOR+0x1cc>)
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	2300      	movs	r3, #0
 8000234:	6393      	str	r3, [r2, #56]	@ 0x38
 8000236:	e097      	b.n	8000368 <Control_DOOR+0x1b8>
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	2b08      	cmp	r3, #8
 800023e:	d104      	bne.n	800024a <Control_DOOR+0x9a>
 8000240:	4b4e      	ldr	r3, [pc, #312]	@ (800037c <Control_DOOR+0x1cc>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	2300      	movs	r3, #0
 8000246:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000248:	e08e      	b.n	8000368 <Control_DOOR+0x1b8>
 800024a:	4b4c      	ldr	r3, [pc, #304]	@ (800037c <Control_DOOR+0x1cc>)
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	2300      	movs	r3, #0
 8000250:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000252:	e089      	b.n	8000368 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim3, door->channel, 0);
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d104      	bne.n	8000266 <Control_DOOR+0xb6>
 800025c:	4b48      	ldr	r3, [pc, #288]	@ (8000380 <Control_DOOR+0x1d0>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2200      	movs	r2, #0
 8000262:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000264:	e080      	b.n	8000368 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim3, door->channel, 0);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	2b04      	cmp	r3, #4
 800026c:	d104      	bne.n	8000278 <Control_DOOR+0xc8>
 800026e:	4b44      	ldr	r3, [pc, #272]	@ (8000380 <Control_DOOR+0x1d0>)
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	2300      	movs	r3, #0
 8000274:	6393      	str	r3, [r2, #56]	@ 0x38
 8000276:	e077      	b.n	8000368 <Control_DOOR+0x1b8>
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	2b08      	cmp	r3, #8
 800027e:	d104      	bne.n	800028a <Control_DOOR+0xda>
 8000280:	4b3f      	ldr	r3, [pc, #252]	@ (8000380 <Control_DOOR+0x1d0>)
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	2300      	movs	r3, #0
 8000286:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000288:	e06e      	b.n	8000368 <Control_DOOR+0x1b8>
 800028a:	4b3d      	ldr	r3, [pc, #244]	@ (8000380 <Control_DOOR+0x1d0>)
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	2300      	movs	r3, #0
 8000290:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000292:	e069      	b.n	8000368 <Control_DOOR+0x1b8>
		if(door->timer == TIM1){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	4a36      	ldr	r2, [pc, #216]	@ (8000374 <Control_DOOR+0x1c4>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d11f      	bne.n	80002de <Control_DOOR+0x12e>
			__HAL_TIM_SET_COMPARE(&htim1, door->channel, 0);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d104      	bne.n	80002b0 <Control_DOOR+0x100>
 80002a6:	4b34      	ldr	r3, [pc, #208]	@ (8000378 <Control_DOOR+0x1c8>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2200      	movs	r2, #0
 80002ac:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002ae:	e05b      	b.n	8000368 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim1, door->channel, 0);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	d104      	bne.n	80002c2 <Control_DOOR+0x112>
 80002b8:	4b2f      	ldr	r3, [pc, #188]	@ (8000378 <Control_DOOR+0x1c8>)
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	2300      	movs	r3, #0
 80002be:	6393      	str	r3, [r2, #56]	@ 0x38
 80002c0:	e052      	b.n	8000368 <Control_DOOR+0x1b8>
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	2b08      	cmp	r3, #8
 80002c8:	d104      	bne.n	80002d4 <Control_DOOR+0x124>
 80002ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000378 <Control_DOOR+0x1c8>)
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	2300      	movs	r3, #0
 80002d0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80002d2:	e049      	b.n	8000368 <Control_DOOR+0x1b8>
 80002d4:	4b28      	ldr	r3, [pc, #160]	@ (8000378 <Control_DOOR+0x1c8>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	2300      	movs	r3, #0
 80002da:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80002dc:	e044      	b.n	8000368 <Control_DOOR+0x1b8>
		else if(door->timer == TIM2){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80002e6:	d11f      	bne.n	8000328 <Control_DOOR+0x178>
			__HAL_TIM_SET_COMPARE(&htim2, door->channel, 0);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d104      	bne.n	80002fa <Control_DOOR+0x14a>
 80002f0:	4b22      	ldr	r3, [pc, #136]	@ (800037c <Control_DOOR+0x1cc>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2200      	movs	r2, #0
 80002f6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002f8:	e036      	b.n	8000368 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim2, door->channel, 0);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	2b04      	cmp	r3, #4
 8000300:	d104      	bne.n	800030c <Control_DOOR+0x15c>
 8000302:	4b1e      	ldr	r3, [pc, #120]	@ (800037c <Control_DOOR+0x1cc>)
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	2300      	movs	r3, #0
 8000308:	6393      	str	r3, [r2, #56]	@ 0x38
 800030a:	e02d      	b.n	8000368 <Control_DOOR+0x1b8>
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	2b08      	cmp	r3, #8
 8000312:	d104      	bne.n	800031e <Control_DOOR+0x16e>
 8000314:	4b19      	ldr	r3, [pc, #100]	@ (800037c <Control_DOOR+0x1cc>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	2300      	movs	r3, #0
 800031a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800031c:	e024      	b.n	8000368 <Control_DOOR+0x1b8>
 800031e:	4b17      	ldr	r3, [pc, #92]	@ (800037c <Control_DOOR+0x1cc>)
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	2300      	movs	r3, #0
 8000324:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000326:	e01f      	b.n	8000368 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim3, door->channel, 0);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d104      	bne.n	800033a <Control_DOOR+0x18a>
 8000330:	4b13      	ldr	r3, [pc, #76]	@ (8000380 <Control_DOOR+0x1d0>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2200      	movs	r2, #0
 8000336:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000338:	e016      	b.n	8000368 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim3, door->channel, 0);
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	689b      	ldr	r3, [r3, #8]
 800033e:	2b04      	cmp	r3, #4
 8000340:	d104      	bne.n	800034c <Control_DOOR+0x19c>
 8000342:	4b0f      	ldr	r3, [pc, #60]	@ (8000380 <Control_DOOR+0x1d0>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	2300      	movs	r3, #0
 8000348:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800034a:	e00d      	b.n	8000368 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim3, door->channel, 0);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	2b08      	cmp	r3, #8
 8000352:	d104      	bne.n	800035e <Control_DOOR+0x1ae>
 8000354:	4b0a      	ldr	r3, [pc, #40]	@ (8000380 <Control_DOOR+0x1d0>)
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	2300      	movs	r3, #0
 800035a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800035c:	e004      	b.n	8000368 <Control_DOOR+0x1b8>
			__HAL_TIM_SET_COMPARE(&htim3, door->channel, 0);
 800035e:	4b08      	ldr	r3, [pc, #32]	@ (8000380 <Control_DOOR+0x1d0>)
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	2300      	movs	r3, #0
 8000364:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000366:	e7ff      	b.n	8000368 <Control_DOOR+0x1b8>
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	40012c00 	.word	0x40012c00
 8000378:	20000084 	.word	0x20000084
 800037c:	200000cc 	.word	0x200000cc
 8000380:	20000114 	.word	0x20000114

08000384 <Init_LED_FAN>:

extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;

void Init_LED_FAN(char *detail[], Led_Fan *device){
 8000384:	b590      	push	{r4, r7, lr}
 8000386:	b085      	sub	sp, #20
 8000388:	af02      	add	r7, sp, #8
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
	device->id = atoi(detail[1]);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	3304      	adds	r3, #4
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4618      	mov	r0, r3
 8000396:	f003 fc7f 	bl	8003c98 <atoi>
 800039a:	4603      	mov	r3, r0
 800039c:	b2da      	uxtb	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	701a      	strb	r2, [r3, #0]

	convert_gpio(&device->timer, &device->channel, &device->gpio_port, &device->gpio_pin, detail[2]);
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	1d18      	adds	r0, r3, #4
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	f103 0108 	add.w	r1, r3, #8
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	f103 020c 	add.w	r2, r3, #12
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	f103 0410 	add.w	r4, r3, #16
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3308      	adds	r3, #8
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	4623      	mov	r3, r4
 80003c2:	f000 fc19 	bl	8000bf8 <convert_gpio>
	LED_FAN_MspInit(device);
 80003c6:	6838      	ldr	r0, [r7, #0]
 80003c8:	f000 fdd6 	bl	8000f78 <LED_FAN_MspInit>
}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd90      	pop	{r4, r7, pc}

080003d4 <Control_LED_FAN>:
void Control_LED_FAN(Led_Fan *device){
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	if(device->timer == TIM1){
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	4a40      	ldr	r2, [pc, #256]	@ (80004e4 <Control_LED_FAN+0x110>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d126      	bne.n	8000434 <Control_LED_FAN+0x60>
		__HAL_TIM_SET_COMPARE(&htim1, device->channel, device->brightness);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	689b      	ldr	r3, [r3, #8]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d105      	bne.n	80003fa <Control_LED_FAN+0x26>
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	785a      	ldrb	r2, [r3, #1]
 80003f2:	4b3d      	ldr	r3, [pc, #244]	@ (80004e8 <Control_LED_FAN+0x114>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2, device->channel, device->brightness);
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim3, device->channel, device->brightness);
	}
}
 80003f8:	e06f      	b.n	80004da <Control_LED_FAN+0x106>
		__HAL_TIM_SET_COMPARE(&htim1, device->channel, device->brightness);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	2b04      	cmp	r3, #4
 8000400:	d106      	bne.n	8000410 <Control_LED_FAN+0x3c>
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	7859      	ldrb	r1, [r3, #1]
 8000406:	4b38      	ldr	r3, [pc, #224]	@ (80004e8 <Control_LED_FAN+0x114>)
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	460b      	mov	r3, r1
 800040c:	6393      	str	r3, [r2, #56]	@ 0x38
 800040e:	e064      	b.n	80004da <Control_LED_FAN+0x106>
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	2b08      	cmp	r3, #8
 8000416:	d106      	bne.n	8000426 <Control_LED_FAN+0x52>
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	7859      	ldrb	r1, [r3, #1]
 800041c:	4b32      	ldr	r3, [pc, #200]	@ (80004e8 <Control_LED_FAN+0x114>)
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	460b      	mov	r3, r1
 8000422:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000424:	e059      	b.n	80004da <Control_LED_FAN+0x106>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	7859      	ldrb	r1, [r3, #1]
 800042a:	4b2f      	ldr	r3, [pc, #188]	@ (80004e8 <Control_LED_FAN+0x114>)
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	460b      	mov	r3, r1
 8000430:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000432:	e052      	b.n	80004da <Control_LED_FAN+0x106>
	else if(device->timer == TIM2){
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800043c:	d126      	bne.n	800048c <Control_LED_FAN+0xb8>
		__HAL_TIM_SET_COMPARE(&htim2, device->channel, device->brightness);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	689b      	ldr	r3, [r3, #8]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d105      	bne.n	8000452 <Control_LED_FAN+0x7e>
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	785a      	ldrb	r2, [r3, #1]
 800044a:	4b28      	ldr	r3, [pc, #160]	@ (80004ec <Control_LED_FAN+0x118>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000450:	e043      	b.n	80004da <Control_LED_FAN+0x106>
		__HAL_TIM_SET_COMPARE(&htim2, device->channel, device->brightness);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	689b      	ldr	r3, [r3, #8]
 8000456:	2b04      	cmp	r3, #4
 8000458:	d106      	bne.n	8000468 <Control_LED_FAN+0x94>
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	7859      	ldrb	r1, [r3, #1]
 800045e:	4b23      	ldr	r3, [pc, #140]	@ (80004ec <Control_LED_FAN+0x118>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	460b      	mov	r3, r1
 8000464:	6393      	str	r3, [r2, #56]	@ 0x38
 8000466:	e038      	b.n	80004da <Control_LED_FAN+0x106>
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	2b08      	cmp	r3, #8
 800046e:	d106      	bne.n	800047e <Control_LED_FAN+0xaa>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	7859      	ldrb	r1, [r3, #1]
 8000474:	4b1d      	ldr	r3, [pc, #116]	@ (80004ec <Control_LED_FAN+0x118>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	460b      	mov	r3, r1
 800047a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800047c:	e02d      	b.n	80004da <Control_LED_FAN+0x106>
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	7859      	ldrb	r1, [r3, #1]
 8000482:	4b1a      	ldr	r3, [pc, #104]	@ (80004ec <Control_LED_FAN+0x118>)
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	460b      	mov	r3, r1
 8000488:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800048a:	e026      	b.n	80004da <Control_LED_FAN+0x106>
		__HAL_TIM_SET_COMPARE(&htim3, device->channel, device->brightness);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d105      	bne.n	80004a0 <Control_LED_FAN+0xcc>
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	785a      	ldrb	r2, [r3, #1]
 8000498:	4b15      	ldr	r3, [pc, #84]	@ (80004f0 <Control_LED_FAN+0x11c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800049e:	e01c      	b.n	80004da <Control_LED_FAN+0x106>
		__HAL_TIM_SET_COMPARE(&htim3, device->channel, device->brightness);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	2b04      	cmp	r3, #4
 80004a6:	d106      	bne.n	80004b6 <Control_LED_FAN+0xe2>
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	7859      	ldrb	r1, [r3, #1]
 80004ac:	4b10      	ldr	r3, [pc, #64]	@ (80004f0 <Control_LED_FAN+0x11c>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	460b      	mov	r3, r1
 80004b2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80004b4:	e011      	b.n	80004da <Control_LED_FAN+0x106>
		__HAL_TIM_SET_COMPARE(&htim3, device->channel, device->brightness);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	689b      	ldr	r3, [r3, #8]
 80004ba:	2b08      	cmp	r3, #8
 80004bc:	d106      	bne.n	80004cc <Control_LED_FAN+0xf8>
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	7859      	ldrb	r1, [r3, #1]
 80004c2:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <Control_LED_FAN+0x11c>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	460b      	mov	r3, r1
 80004c8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80004ca:	e006      	b.n	80004da <Control_LED_FAN+0x106>
		__HAL_TIM_SET_COMPARE(&htim3, device->channel, device->brightness);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	7859      	ldrb	r1, [r3, #1]
 80004d0:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <Control_LED_FAN+0x11c>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	460b      	mov	r3, r1
 80004d6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80004d8:	e7ff      	b.n	80004da <Control_LED_FAN+0x106>
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	40012c00 	.word	0x40012c00
 80004e8:	20000084 	.word	0x20000084
 80004ec:	200000cc 	.word	0x200000cc
 80004f0:	20000114 	.word	0x20000114

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 ffc0 	bl	800147c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f81e 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f910 	bl	8000724 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000504:	f000 f860 	bl	80005c8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000508:	f000 f8e2 	bl	80006d0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800050c:	f000 f8c2 	bl	8000694 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000510:	2104      	movs	r1, #4
 8000512:	4807      	ldr	r0, [pc, #28]	@ (8000530 <main+0x3c>)
 8000514:	f002 f85e 	bl	80025d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000518:	2108      	movs	r1, #8
 800051a:	4805      	ldr	r0, [pc, #20]	@ (8000530 <main+0x3c>)
 800051c:	f002 f85a 	bl	80025d4 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1, &size, 1);
 8000520:	2201      	movs	r2, #1
 8000522:	4904      	ldr	r1, [pc, #16]	@ (8000534 <main+0x40>)
 8000524:	4804      	ldr	r0, [pc, #16]	@ (8000538 <main+0x44>)
 8000526:	f002 fe28 	bl	800317a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052a:	bf00      	nop
 800052c:	e7fd      	b.n	800052a <main+0x36>
 800052e:	bf00      	nop
 8000530:	200000cc 	.word	0x200000cc
 8000534:	200001a4 	.word	0x200001a4
 8000538:	2000015c 	.word	0x2000015c

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b090      	sub	sp, #64	@ 0x40
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0318 	add.w	r3, r7, #24
 8000546:	2228      	movs	r2, #40	@ 0x28
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f003 fe25 	bl	800419a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055e:	2301      	movs	r3, #1
 8000560:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000562:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000566:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000570:	2302      	movs	r3, #2
 8000572:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000574:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000578:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 800057a:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 800057e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0318 	add.w	r3, r7, #24
 8000584:	4618      	mov	r0, r3
 8000586:	f001 fb49 	bl	8001c1c <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000590:	f000 fbb0 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2302      	movs	r3, #2
 800059a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800059c:	2390      	movs	r3, #144	@ 0x90
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2101      	movs	r1, #1
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fdb6 	bl	8002120 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ba:	f000 fb9b 	bl	8000cf4 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3740      	adds	r7, #64	@ 0x40
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	@ 0x28
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]
 80005e6:	615a      	str	r2, [r3, #20]
 80005e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005ea:	4b29      	ldr	r3, [pc, #164]	@ (8000690 <MX_TIM2_Init+0xc8>)
 80005ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80005f2:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <MX_TIM2_Init+0xc8>)
 80005f4:	2263      	movs	r2, #99	@ 0x63
 80005f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <MX_TIM2_Init+0xc8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80005fe:	4b24      	ldr	r3, [pc, #144]	@ (8000690 <MX_TIM2_Init+0xc8>)
 8000600:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000604:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000606:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <MX_TIM2_Init+0xc8>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800060c:	4b20      	ldr	r3, [pc, #128]	@ (8000690 <MX_TIM2_Init+0xc8>)
 800060e:	2200      	movs	r2, #0
 8000610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000612:	481f      	ldr	r0, [pc, #124]	@ (8000690 <MX_TIM2_Init+0xc8>)
 8000614:	f001 ff8f 	bl	8002536 <HAL_TIM_PWM_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800061e:	f000 fb69 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000622:	2300      	movs	r3, #0
 8000624:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000626:	2300      	movs	r3, #0
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	4619      	mov	r1, r3
 8000630:	4817      	ldr	r0, [pc, #92]	@ (8000690 <MX_TIM2_Init+0xc8>)
 8000632:	f002 fc51 	bl	8002ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800063c:	f000 fb5a 	bl	8000cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000640:	2360      	movs	r3, #96	@ 0x60
 8000642:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000644:	2332      	movs	r3, #50	@ 0x32
 8000646:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2204      	movs	r2, #4
 8000654:	4619      	mov	r1, r3
 8000656:	480e      	ldr	r0, [pc, #56]	@ (8000690 <MX_TIM2_Init+0xc8>)
 8000658:	f002 f948 	bl	80028ec <HAL_TIM_PWM_ConfigChannel>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000662:	f000 fb47 	bl	8000cf4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2208      	movs	r2, #8
 800066e:	4619      	mov	r1, r3
 8000670:	4807      	ldr	r0, [pc, #28]	@ (8000690 <MX_TIM2_Init+0xc8>)
 8000672:	f002 f93b 	bl	80028ec <HAL_TIM_PWM_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 800067c:	f000 fb3a 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000680:	4803      	ldr	r0, [pc, #12]	@ (8000690 <MX_TIM2_Init+0xc8>)
 8000682:	f000 fbf5 	bl	8000e70 <HAL_TIM_MspPostInit>

}
 8000686:	bf00      	nop
 8000688:	3728      	adds	r7, #40	@ 0x28
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200000cc 	.word	0x200000cc

08000694 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END TIM3_Init 0 */
  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000698:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <MX_TIM3_Init+0x34>)
 800069a:	4a0c      	ldr	r2, [pc, #48]	@ (80006cc <MX_TIM3_Init+0x38>)
 800069c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 800069e:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <MX_TIM3_Init+0x34>)
 80006a0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80006a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a6:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <MX_TIM3_Init+0x34>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2999;
 80006ac:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_TIM3_Init+0x34>)
 80006ae:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80006b2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	@ (80006c8 <MX_TIM3_Init+0x34>)
 80006b6:	f001 fec1 	bl	800243c <HAL_TIM_Base_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM3_Init+0x30>
  {
    Error_Handler();
 80006c0:	f000 fb18 	bl	8000cf4 <Error_Handler>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  //HAL_TIM_MspPostInit(&htim3);

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000114 	.word	0x20000114
 80006cc:	40000400 	.word	0x40000400

080006d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d4:	4b11      	ldr	r3, [pc, #68]	@ (800071c <MX_USART1_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	@ (8000720 <MX_USART1_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <MX_USART1_UART_Init+0x4c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <MX_USART1_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <MX_USART1_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_USART1_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	@ (800071c <MX_USART1_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_USART1_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	@ (800071c <MX_USART1_UART_Init+0x4c>)
 8000708:	f002 fc50 	bl	8002fac <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 faef 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000015c 	.word	0x2000015c
 8000720:	40013800 	.word	0x40013800

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0310 	add.w	r3, r7, #16
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000738:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <MX_GPIO_Init+0x90>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a1d      	ldr	r2, [pc, #116]	@ (80007b4 <MX_GPIO_Init+0x90>)
 800073e:	f043 0310 	orr.w	r3, r3, #16
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <MX_GPIO_Init+0x90>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0310 	and.w	r3, r3, #16
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000750:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <MX_GPIO_Init+0x90>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a17      	ldr	r2, [pc, #92]	@ (80007b4 <MX_GPIO_Init+0x90>)
 8000756:	f043 0320 	orr.w	r3, r3, #32
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <MX_GPIO_Init+0x90>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0320 	and.w	r3, r3, #32
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <MX_GPIO_Init+0x90>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a11      	ldr	r2, [pc, #68]	@ (80007b4 <MX_GPIO_Init+0x90>)
 800076e:	f043 0304 	orr.w	r3, r3, #4
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_GPIO_Init+0x90>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000786:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <MX_GPIO_Init+0x94>)
 8000788:	f001 fa16 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 800078c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800079a:	2301      	movs	r3, #1
 800079c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	4619      	mov	r1, r3
 80007a4:	4804      	ldr	r0, [pc, #16]	@ (80007b8 <MX_GPIO_Init+0x94>)
 80007a6:	f001 f88b 	bl	80018c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007aa:	bf00      	nop
 80007ac:	3720      	adds	r7, #32
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000
 80007b8:	40011000 	.word	0x40011000

080007bc <init_device>:

void init_device(char *detail[]){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	if(strcmp(detail[0], "LED_FAN") == 0){
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4940      	ldr	r1, [pc, #256]	@ (80008cc <init_device+0x110>)
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fcbe 	bl	800014c <strcmp>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d121      	bne.n	800081a <init_device+0x5e>
		number_of_led_fan++;
 80007d6:	4b3e      	ldr	r3, [pc, #248]	@ (80008d0 <init_device+0x114>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	3301      	adds	r3, #1
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b3c      	ldr	r3, [pc, #240]	@ (80008d0 <init_device+0x114>)
 80007e0:	701a      	strb	r2, [r3, #0]
		array_led_fan = (Led_Fan*) realloc(array_led_fan, number_of_led_fan*sizeof(Led_Fan*));
 80007e2:	4b3c      	ldr	r3, [pc, #240]	@ (80008d4 <init_device+0x118>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a3a      	ldr	r2, [pc, #232]	@ (80008d0 <init_device+0x114>)
 80007e8:	7812      	ldrb	r2, [r2, #0]
 80007ea:	0092      	lsls	r2, r2, #2
 80007ec:	4611      	mov	r1, r2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 fb14 	bl	8003e1c <realloc>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4a37      	ldr	r2, [pc, #220]	@ (80008d4 <init_device+0x118>)
 80007f8:	6013      	str	r3, [r2, #0]
		Init_LED_FAN(detail, &array_led_fan[number_of_led_fan-1]);
 80007fa:	4b36      	ldr	r3, [pc, #216]	@ (80008d4 <init_device+0x118>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	4b34      	ldr	r3, [pc, #208]	@ (80008d0 <init_device+0x114>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	4619      	mov	r1, r3
 8000804:	460b      	mov	r3, r1
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	440b      	add	r3, r1
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	3b14      	subs	r3, #20
 800080e:	4413      	add	r3, r2
 8000810:	4619      	mov	r1, r3
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff fdb6 	bl	8000384 <Init_LED_FAN>
	else if(strcmp(detail[0], "DEVICES") == 0){
		number_of_devices++;
		array_devices = (Oher_Devices*) realloc(array_devices, number_of_devices*sizeof(Oher_Devices*));
		Init_Device(detail, &array_devices[number_of_devices-1]);
	}
}
 8000818:	e054      	b.n	80008c4 <init_device+0x108>
	else if(strcmp(detail[0], "DOOR") == 0){
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	492e      	ldr	r1, [pc, #184]	@ (80008d8 <init_device+0x11c>)
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fc93 	bl	800014c <strcmp>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d121      	bne.n	8000870 <init_device+0xb4>
		number_of_door++;
 800082c:	4b2b      	ldr	r3, [pc, #172]	@ (80008dc <init_device+0x120>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	3301      	adds	r3, #1
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b29      	ldr	r3, [pc, #164]	@ (80008dc <init_device+0x120>)
 8000836:	701a      	strb	r2, [r3, #0]
		array_door = (Door*) realloc(array_door, number_of_door*sizeof(Door*));
 8000838:	4b29      	ldr	r3, [pc, #164]	@ (80008e0 <init_device+0x124>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a27      	ldr	r2, [pc, #156]	@ (80008dc <init_device+0x120>)
 800083e:	7812      	ldrb	r2, [r2, #0]
 8000840:	0092      	lsls	r2, r2, #2
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f003 fae9 	bl	8003e1c <realloc>
 800084a:	4603      	mov	r3, r0
 800084c:	4a24      	ldr	r2, [pc, #144]	@ (80008e0 <init_device+0x124>)
 800084e:	6013      	str	r3, [r2, #0]
		Init_DOOR(detail, &array_door[number_of_door-1]);
 8000850:	4b23      	ldr	r3, [pc, #140]	@ (80008e0 <init_device+0x124>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b21      	ldr	r3, [pc, #132]	@ (80008dc <init_device+0x120>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	460b      	mov	r3, r1
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	440b      	add	r3, r1
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	3b14      	subs	r3, #20
 8000864:	4413      	add	r3, r2
 8000866:	4619      	mov	r1, r3
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff fc79 	bl	8000160 <Init_DOOR>
}
 800086e:	e029      	b.n	80008c4 <init_device+0x108>
	else if(strcmp(detail[0], "DEVICES") == 0){
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	491b      	ldr	r1, [pc, #108]	@ (80008e4 <init_device+0x128>)
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fc68 	bl	800014c <strcmp>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d120      	bne.n	80008c4 <init_device+0x108>
		number_of_devices++;
 8000882:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <init_device+0x12c>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <init_device+0x12c>)
 800088c:	701a      	strb	r2, [r3, #0]
		array_devices = (Oher_Devices*) realloc(array_devices, number_of_devices*sizeof(Oher_Devices*));
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <init_device+0x130>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a15      	ldr	r2, [pc, #84]	@ (80008e8 <init_device+0x12c>)
 8000894:	7812      	ldrb	r2, [r2, #0]
 8000896:	0092      	lsls	r2, r2, #2
 8000898:	4611      	mov	r1, r2
 800089a:	4618      	mov	r0, r3
 800089c:	f003 fabe 	bl	8003e1c <realloc>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <init_device+0x130>)
 80008a4:	6013      	str	r3, [r2, #0]
		Init_Device(detail, &array_devices[number_of_devices-1]);
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <init_device+0x130>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <init_device+0x12c>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	4619      	mov	r1, r3
 80008b0:	460b      	mov	r3, r1
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	440b      	add	r3, r1
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	3b0c      	subs	r3, #12
 80008ba:	4413      	add	r3, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f000 fa1e 	bl	8000d00 <Init_Device>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	08004e84 	.word	0x08004e84
 80008d0:	200001a5 	.word	0x200001a5
 80008d4:	200001a8 	.word	0x200001a8
 80008d8:	08004e8c 	.word	0x08004e8c
 80008dc:	200001a7 	.word	0x200001a7
 80008e0:	200001ac 	.word	0x200001ac
 80008e4:	08004e94 	.word	0x08004e94
 80008e8:	200001a6 	.word	0x200001a6
 80008ec:	200001b0 	.word	0x200001b0

080008f0 <control_device>:

void control_device(char *detail[]){
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b089      	sub	sp, #36	@ 0x24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	if(strcmp(detail[0], "LED_FAN") == 0){
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4963      	ldr	r1, [pc, #396]	@ (8000a8c <control_device+0x19c>)
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fc24 	bl	800014c <strcmp>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d138      	bne.n	800097c <control_device+0x8c>
		Led_Fan *device = NULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
		for(int i = 0; i < number_of_led_fan; i++){
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
 8000912:	e01f      	b.n	8000954 <control_device+0x64>
			if(array_led_fan[i].id == atoi(detail[1])){
 8000914:	4b5e      	ldr	r3, [pc, #376]	@ (8000a90 <control_device+0x1a0>)
 8000916:	6819      	ldr	r1, [r3, #0]
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	4613      	mov	r3, r2
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	4413      	add	r3, r2
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	440b      	add	r3, r1
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	461c      	mov	r4, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3304      	adds	r3, #4
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4618      	mov	r0, r3
 8000930:	f003 f9b2 	bl	8003c98 <atoi>
 8000934:	4603      	mov	r3, r0
 8000936:	429c      	cmp	r4, r3
 8000938:	d109      	bne.n	800094e <control_device+0x5e>
				device = &array_led_fan[i];
 800093a:	4b55      	ldr	r3, [pc, #340]	@ (8000a90 <control_device+0x1a0>)
 800093c:	6819      	ldr	r1, [r3, #0]
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	4613      	mov	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	440b      	add	r3, r1
 800094a:	61fb      	str	r3, [r7, #28]
				break;
 800094c:	e008      	b.n	8000960 <control_device+0x70>
		for(int i = 0; i < number_of_led_fan; i++){
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	3301      	adds	r3, #1
 8000952:	61bb      	str	r3, [r7, #24]
 8000954:	4b4f      	ldr	r3, [pc, #316]	@ (8000a94 <control_device+0x1a4>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	4293      	cmp	r3, r2
 800095e:	dbd9      	blt.n	8000914 <control_device+0x24>
			}
		}
		device->brightness = atoi(detail[2]);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3308      	adds	r3, #8
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f003 f996 	bl	8003c98 <atoi>
 800096c:	4603      	mov	r3, r0
 800096e:	b2da      	uxtb	r2, r3
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	705a      	strb	r2, [r3, #1]
		Control_LED_FAN(device);
 8000974:	69f8      	ldr	r0, [r7, #28]
 8000976:	f7ff fd2d 	bl	80003d4 <Control_LED_FAN>
			}
		}
		device->status = atoi(detail[2]);
		Control_Device(device);
	}
}
 800097a:	e082      	b.n	8000a82 <control_device+0x192>
	else if(strcmp(detail[0], "DOOR") == 0){
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4945      	ldr	r1, [pc, #276]	@ (8000a98 <control_device+0x1a8>)
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fbe2 	bl	800014c <strcmp>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d138      	bne.n	8000a00 <control_device+0x110>
		Door *door = NULL;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < number_of_door; i++){
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	e01f      	b.n	80009d8 <control_device+0xe8>
			if(array_door[i].id == atoi(detail[1])){
 8000998:	4b40      	ldr	r3, [pc, #256]	@ (8000a9c <control_device+0x1ac>)
 800099a:	6819      	ldr	r1, [r3, #0]
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	440b      	add	r3, r1
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	461c      	mov	r4, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3304      	adds	r3, #4
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f003 f970 	bl	8003c98 <atoi>
 80009b8:	4603      	mov	r3, r0
 80009ba:	429c      	cmp	r4, r3
 80009bc:	d109      	bne.n	80009d2 <control_device+0xe2>
				door = &array_door[i];
 80009be:	4b37      	ldr	r3, [pc, #220]	@ (8000a9c <control_device+0x1ac>)
 80009c0:	6819      	ldr	r1, [r3, #0]
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4613      	mov	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	440b      	add	r3, r1
 80009ce:	617b      	str	r3, [r7, #20]
				break;
 80009d0:	e008      	b.n	80009e4 <control_device+0xf4>
		for(int i = 0; i < number_of_door; i++){
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	3301      	adds	r3, #1
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	4b31      	ldr	r3, [pc, #196]	@ (8000aa0 <control_device+0x1b0>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	4293      	cmp	r3, r2
 80009e2:	dbd9      	blt.n	8000998 <control_device+0xa8>
		door->status = atoi(detail[2]);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3308      	adds	r3, #8
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f003 f954 	bl	8003c98 <atoi>
 80009f0:	4603      	mov	r3, r0
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	705a      	strb	r2, [r3, #1]
		Control_DOOR(door);
 80009f8:	6978      	ldr	r0, [r7, #20]
 80009fa:	f7ff fbd9 	bl	80001b0 <Control_DOOR>
}
 80009fe:	e040      	b.n	8000a82 <control_device+0x192>
	else if(strcmp(detail[0], "DEVICES") == 0){
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4927      	ldr	r1, [pc, #156]	@ (8000aa4 <control_device+0x1b4>)
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fba0 	bl	800014c <strcmp>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d137      	bne.n	8000a82 <control_device+0x192>
		Oher_Devices *device = NULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < number_of_devices; i++){
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	e01f      	b.n	8000a5c <control_device+0x16c>
			if(array_devices[i].id == atoi(detail[1])){
 8000a1c:	4b22      	ldr	r3, [pc, #136]	@ (8000aa8 <control_device+0x1b8>)
 8000a1e:	6819      	ldr	r1, [r3, #0]
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	4613      	mov	r3, r2
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	4413      	add	r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	461c      	mov	r4, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3304      	adds	r3, #4
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f003 f92e 	bl	8003c98 <atoi>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	429c      	cmp	r4, r3
 8000a40:	d109      	bne.n	8000a56 <control_device+0x166>
				device = &array_devices[i];
 8000a42:	4b19      	ldr	r3, [pc, #100]	@ (8000aa8 <control_device+0x1b8>)
 8000a44:	6819      	ldr	r1, [r3, #0]
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	4413      	add	r3, r2
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	440b      	add	r3, r1
 8000a52:	60fb      	str	r3, [r7, #12]
				break;
 8000a54:	e008      	b.n	8000a68 <control_device+0x178>
		for(int i = 0; i < number_of_devices; i++){
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <control_device+0x1bc>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	4293      	cmp	r3, r2
 8000a66:	dbd9      	blt.n	8000a1c <control_device+0x12c>
		device->status = atoi(detail[2]);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3308      	adds	r3, #8
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f003 f912 	bl	8003c98 <atoi>
 8000a74:	4603      	mov	r3, r0
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	705a      	strb	r2, [r3, #1]
		Control_Device(device);
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f000 f963 	bl	8000d48 <Control_Device>
}
 8000a82:	bf00      	nop
 8000a84:	3724      	adds	r7, #36	@ 0x24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd90      	pop	{r4, r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	08004e84 	.word	0x08004e84
 8000a90:	200001a8 	.word	0x200001a8
 8000a94:	200001a5 	.word	0x200001a5
 8000a98:	08004e8c 	.word	0x08004e8c
 8000a9c:	200001ac 	.word	0x200001ac
 8000aa0:	200001a7 	.word	0x200001a7
 8000aa4:	08004e94 	.word	0x08004e94
 8000aa8:	200001b0 	.word	0x200001b0
 8000aac:	200001a6 	.word	0x200001a6

08000ab0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08c      	sub	sp, #48	@ 0x30
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a34      	ldr	r2, [pc, #208]	@ (8000b90 <HAL_UART_RxCpltCallback+0xe0>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d161      	bne.n	8000b86 <HAL_UART_RxCpltCallback+0xd6>
		char *data = (char*) malloc(100);
 8000ac2:	2064      	movs	r0, #100	@ 0x64
 8000ac4:	f003 f8ec 	bl	8003ca0 <malloc>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
		uint8_t s = size;
 8000acc:	4b31      	ldr	r3, [pc, #196]	@ (8000b94 <HAL_UART_RxCpltCallback+0xe4>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		HAL_UART_Receive(huart, (uint8_t*)data, size, HAL_MAX_DELAY);
 8000ad4:	4b2f      	ldr	r3, [pc, #188]	@ (8000b94 <HAL_UART_RxCpltCallback+0xe4>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
 8000ade:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f002 fab3 	bl	800304c <HAL_UART_Receive>
		data[s] = '\0';
 8000ae6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aec:	4413      	add	r3, r2
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
	    char *token = strtok(data, "+");
 8000af2:	4929      	ldr	r1, [pc, #164]	@ (8000b98 <HAL_UART_RxCpltCallback+0xe8>)
 8000af4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000af6:	f003 fb59 	bl	80041ac <strtok>
 8000afa:	61f8      	str	r0, [r7, #28]
	    char *detail[4];
	    char *val = strtok(NULL, "+");
 8000afc:	4926      	ldr	r1, [pc, #152]	@ (8000b98 <HAL_UART_RxCpltCallback+0xe8>)
 8000afe:	2000      	movs	r0, #0
 8000b00:	f003 fb54 	bl	80041ac <strtok>
 8000b04:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    int i = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	@ 0x28
	    while(val != NULL && i < 4){
 8000b0a:	e010      	b.n	8000b2e <HAL_UART_RxCpltCallback+0x7e>
	    	strcpy(detail[i++], val);
 8000b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	3330      	adds	r3, #48	@ 0x30
 8000b16:	443b      	add	r3, r7
 8000b18:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000b1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f003 fc23 	bl	800436a <strcpy>
	    	val = strtok(NULL, "+");
 8000b24:	491c      	ldr	r1, [pc, #112]	@ (8000b98 <HAL_UART_RxCpltCallback+0xe8>)
 8000b26:	2000      	movs	r0, #0
 8000b28:	f003 fb40 	bl	80041ac <strtok>
 8000b2c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    while(val != NULL && i < 4){
 8000b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d002      	beq.n	8000b3a <HAL_UART_RxCpltCallback+0x8a>
 8000b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	dde8      	ble.n	8000b0c <HAL_UART_RxCpltCallback+0x5c>
//	    		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, DISABLE);
//	    		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 50);
//	    	}
//	    }

	    if(strcmp(token, "INIT") == 0){
 8000b3a:	4918      	ldr	r1, [pc, #96]	@ (8000b9c <HAL_UART_RxCpltCallback+0xec>)
 8000b3c:	69f8      	ldr	r0, [r7, #28]
 8000b3e:	f7ff fb05 	bl	800014c <strcmp>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d105      	bne.n	8000b54 <HAL_UART_RxCpltCallback+0xa4>
	    	init_device(detail);
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fe35 	bl	80007bc <init_device>
 8000b52:	e010      	b.n	8000b76 <HAL_UART_RxCpltCallback+0xc6>
	    }
	    else if(strcmp(token, "CONTROL") == 0){
 8000b54:	4912      	ldr	r1, [pc, #72]	@ (8000ba0 <HAL_UART_RxCpltCallback+0xf0>)
 8000b56:	69f8      	ldr	r0, [r7, #28]
 8000b58:	f7ff faf8 	bl	800014c <strcmp>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d105      	bne.n	8000b6e <HAL_UART_RxCpltCallback+0xbe>
	    	control_device(detail);
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fec2 	bl	80008f0 <control_device>
 8000b6c:	e003      	b.n	8000b76 <HAL_UART_RxCpltCallback+0xc6>
	    }
	    else if(strcmp(token, "DELETE") == 0){
 8000b6e:	490d      	ldr	r1, [pc, #52]	@ (8000ba4 <HAL_UART_RxCpltCallback+0xf4>)
 8000b70:	69f8      	ldr	r0, [r7, #28]
 8000b72:	f7ff faeb 	bl	800014c <strcmp>

	    }
		free(data);
 8000b76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b78:	f003 f89a 	bl	8003cb0 <free>

		HAL_UART_Receive_IT(huart, &size, 1);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4905      	ldr	r1, [pc, #20]	@ (8000b94 <HAL_UART_RxCpltCallback+0xe4>)
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f002 fafa 	bl	800317a <HAL_UART_Receive_IT>
	}
}
 8000b86:	bf00      	nop
 8000b88:	3730      	adds	r7, #48	@ 0x30
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40013800 	.word	0x40013800
 8000b94:	200001a4 	.word	0x200001a4
 8000b98:	08004e9c 	.word	0x08004e9c
 8000b9c:	08004ea0 	.word	0x08004ea0
 8000ba0:	08004ea8 	.word	0x08004ea8
 8000ba4:	08004eb0 	.word	0x08004eb0

08000ba8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000be8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d111      	bne.n	8000bde <HAL_TIM_PeriodElapsedCallback+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, DISABLE);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bc0:	480a      	ldr	r0, [pc, #40]	@ (8000bec <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000bc2:	f000 fff9 	bl	8001bb8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 50);
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2232      	movs	r2, #50	@ 0x32
 8000bcc:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_TIM_Base_Stop_IT(&htim3);
 8000bce:	4809      	ldr	r0, [pc, #36]	@ (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000bd0:	f001 fc83 	bl	80024da <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000bd4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bd8:	4804      	ldr	r0, [pc, #16]	@ (8000bec <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000bda:	f001 f805 	bl	8001be8 <HAL_GPIO_TogglePin>
	}
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40000400 	.word	0x40000400
 8000bec:	40011000 	.word	0x40011000
 8000bf0:	200000cc 	.word	0x200000cc
 8000bf4:	20000114 	.word	0x20000114

08000bf8 <convert_gpio>:

void convert_gpio(TIM_TypeDef **htim, uint32_t *TIM_CHANNEL, GPIO_TypeDef **GPort, uint16_t *GPin, char *detail){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
 8000c04:	603b      	str	r3, [r7, #0]
	if(detail[1] == 'A'){
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b41      	cmp	r3, #65	@ 0x41
 8000c0e:	d103      	bne.n	8000c18 <convert_gpio+0x20>
		*GPort = GPIOA;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a35      	ldr	r2, [pc, #212]	@ (8000ce8 <convert_gpio+0xf0>)
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	e00f      	b.n	8000c38 <convert_gpio+0x40>
	}else if(detail[1] == 'B'){
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b42      	cmp	r3, #66	@ 0x42
 8000c20:	d103      	bne.n	8000c2a <convert_gpio+0x32>
		*GPort = GPIOB;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a31      	ldr	r2, [pc, #196]	@ (8000cec <convert_gpio+0xf4>)
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	e006      	b.n	8000c38 <convert_gpio+0x40>
	}else *GPort = NULL;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]

	while (*detail && !isdigit((int)*detail)) {
 8000c30:	e002      	b.n	8000c38 <convert_gpio+0x40>
		detail++;
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	3301      	adds	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
	while (*detail && !isdigit((int)*detail)) {
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d009      	beq.n	8000c54 <convert_gpio+0x5c>
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	4a2a      	ldr	r2, [pc, #168]	@ (8000cf0 <convert_gpio+0xf8>)
 8000c48:	4413      	add	r3, r2
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d0ee      	beq.n	8000c32 <convert_gpio+0x3a>
	}

	*GPin = 1 << atoi(detail);
 8000c54:	69b8      	ldr	r0, [r7, #24]
 8000c56:	f003 f81f 	bl	8003c98 <atoi>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	801a      	strh	r2, [r3, #0]

	*htim = NULL;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
	*TIM_CHANNEL = -1;
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	601a      	str	r2, [r3, #0]

	if(*GPort == GPIOA){
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce8 <convert_gpio+0xf0>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d126      	bne.n	8000cce <convert_gpio+0xd6>
		if(*GPin == GPIO_PIN_0){
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d02a      	beq.n	8000cde <convert_gpio+0xe6>

		}
		else if(*GPin == GPIO_PIN_1){
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d026      	beq.n	8000cde <convert_gpio+0xe6>

		}
		else if(*GPin == GPIO_PIN_2){
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	2b04      	cmp	r3, #4
 8000c96:	d022      	beq.n	8000cde <convert_gpio+0xe6>

		}
		else if(*GPin == GPIO_PIN_3){
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	2b08      	cmp	r3, #8
 8000c9e:	d01e      	beq.n	8000cde <convert_gpio+0xe6>

		}
		else if(*GPin == GPIO_PIN_6){
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	2b40      	cmp	r3, #64	@ 0x40
 8000ca6:	d01a      	beq.n	8000cde <convert_gpio+0xe6>

		}
		else if(*GPin == GPIO_PIN_7){
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	2b80      	cmp	r3, #128	@ 0x80
 8000cae:	d016      	beq.n	8000cde <convert_gpio+0xe6>

		}
		else if(*GPin == GPIO_PIN_8){
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cb8:	d011      	beq.n	8000cde <convert_gpio+0xe6>

		}
		else if(*GPin == GPIO_PIN_9){
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cc2:	d00c      	beq.n	8000cde <convert_gpio+0xe6>

		}
		else if(*GPin == GPIO_PIN_10){
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
		else if(*GPin == GPIO_PIN_1){

		}
	}

}
 8000ccc:	e007      	b.n	8000cde <convert_gpio+0xe6>
	else if(*GPort == GPIOB){
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a06      	ldr	r2, [pc, #24]	@ (8000cec <convert_gpio+0xf4>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d102      	bne.n	8000cde <convert_gpio+0xe6>
		if(*GPin == GPIO_PIN_0){
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	2b01      	cmp	r3, #1
}
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40010800 	.word	0x40010800
 8000cec:	40010c00 	.word	0x40010c00
 8000cf0:	08004ee2 	.word	0x08004ee2

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <Error_Handler+0x8>

08000d00 <Init_Device>:
 */


#include "other_devices.h"

void Init_Device(char *detail[], Oher_Devices *device){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af02      	add	r7, sp, #8
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
	device->id = atoi(detail[1]);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f002 ffc1 	bl	8003c98 <atoi>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	701a      	strb	r2, [r3, #0]

	convert_gpio(NULL, NULL, &device->gpio_port, &device->gpio_pin, detail[2]);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	1d1a      	adds	r2, r3, #4
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	f103 0108 	add.w	r1, r3, #8
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3308      	adds	r3, #8
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	460b      	mov	r3, r1
 8000d32:	2100      	movs	r1, #0
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff ff5f 	bl	8000bf8 <convert_gpio>
	Device_MspInit(device);
 8000d3a:	6838      	ldr	r0, [r7, #0]
 8000d3c:	f000 fa30 	bl	80011a0 <Device_MspInit>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <Control_Device>:
void Control_Device(Oher_Devices *device){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	if(device->status == 1){
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	785b      	ldrb	r3, [r3, #1]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d109      	bne.n	8000d6c <Control_Device+0x24>
		HAL_GPIO_WritePin(device->gpio_port, device->gpio_pin, ENABLE);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6858      	ldr	r0, [r3, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	2201      	movs	r2, #1
 8000d64:	4619      	mov	r1, r3
 8000d66:	f000 ff27 	bl	8001bb8 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(device->gpio_port, device->gpio_pin, DISABLE);
	}
}
 8000d6a:	e008      	b.n	8000d7e <Control_Device+0x36>
		HAL_GPIO_WritePin(device->gpio_port, device->gpio_pin, DISABLE);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6858      	ldr	r0, [r3, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	2200      	movs	r2, #0
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f000 ff1d 	bl	8001bb8 <HAL_GPIO_WritePin>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <HAL_MspInit+0x5c>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4a14      	ldr	r2, [pc, #80]	@ (8000de4 <HAL_MspInit+0x5c>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6193      	str	r3, [r2, #24]
 8000d9a:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <HAL_MspInit+0x5c>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <HAL_MspInit+0x5c>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	4a0e      	ldr	r2, [pc, #56]	@ (8000de4 <HAL_MspInit+0x5c>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db0:	61d3      	str	r3, [r2, #28]
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <HAL_MspInit+0x5c>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <HAL_MspInit+0x60>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <HAL_MspInit+0x60>)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010000 	.word	0x40010000

08000dec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dfc:	d10b      	bne.n	8000e16 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dfe:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <HAL_TIM_PWM_MspInit+0x34>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	4a07      	ldr	r2, [pc, #28]	@ (8000e20 <HAL_TIM_PWM_MspInit+0x34>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	61d3      	str	r3, [r2, #28]
 8000e0a:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <HAL_TIM_PWM_MspInit+0x34>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	40021000 	.word	0x40021000

08000e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0d      	ldr	r2, [pc, #52]	@ (8000e68 <HAL_TIM_Base_MspInit+0x44>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d113      	bne.n	8000e5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e36:	4b0d      	ldr	r3, [pc, #52]	@ (8000e6c <HAL_TIM_Base_MspInit+0x48>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e6c <HAL_TIM_Base_MspInit+0x48>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <HAL_TIM_Base_MspInit+0x48>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e4e:	201d      	movs	r0, #29
 8000e50:	f000 fc69 	bl	8001726 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	210f      	movs	r1, #15
 8000e58:	201d      	movs	r0, #29
 8000e5a:	f000 fc48 	bl	80016ee <HAL_NVIC_SetPriority>
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40000400 	.word	0x40000400
 8000e6c:	40021000 	.word	0x40021000

08000e70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e8e:	d117      	bne.n	8000ec0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <HAL_TIM_MspPostInit+0x58>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec8 <HAL_TIM_MspPostInit+0x58>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <HAL_TIM_MspPostInit+0x58>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000ea8:	2306      	movs	r3, #6
 8000eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <HAL_TIM_MspPostInit+0x5c>)
 8000ebc:	f000 fd00 	bl	80018c0 <HAL_GPIO_Init>
//  /* USER CODE BEGIN TIM3_MspPostInit 1 */
////
//  /* USER CODE END TIM3_MspPostInit 1 */
//  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3720      	adds	r7, #32
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40010800 	.word	0x40010800

08000ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a20      	ldr	r2, [pc, #128]	@ (8000f6c <HAL_UART_MspInit+0x9c>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d139      	bne.n	8000f64 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f70 <HAL_UART_MspInit+0xa0>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f70 <HAL_UART_MspInit+0xa0>)
 8000ef6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f70 <HAL_UART_MspInit+0xa0>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b19      	ldr	r3, [pc, #100]	@ (8000f70 <HAL_UART_MspInit+0xa0>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a18      	ldr	r2, [pc, #96]	@ (8000f70 <HAL_UART_MspInit+0xa0>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <HAL_UART_MspInit+0xa0>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	4619      	mov	r1, r3
 8000f34:	480f      	ldr	r0, [pc, #60]	@ (8000f74 <HAL_UART_MspInit+0xa4>)
 8000f36:	f000 fcc3 	bl	80018c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4809      	ldr	r0, [pc, #36]	@ (8000f74 <HAL_UART_MspInit+0xa4>)
 8000f50:	f000 fcb6 	bl	80018c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	210e      	movs	r1, #14
 8000f58:	2025      	movs	r0, #37	@ 0x25
 8000f5a:	f000 fbc8 	bl	80016ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f5e:	2025      	movs	r0, #37	@ 0x25
 8000f60:	f000 fbe1 	bl	8001726 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f64:	bf00      	nop
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40013800 	.word	0x40013800
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010800 	.word	0x40010800

08000f78 <LED_FAN_MspInit>:

}

/* USER CODE BEGIN 1 */

void LED_FAN_MspInit(Led_Fan *device){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b090      	sub	sp, #64	@ 0x40
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	if(device->gpio_port == GPIOA){
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	4a39      	ldr	r2, [pc, #228]	@ (800106c <LED_FAN_MspInit+0xf4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d10c      	bne.n	8000fa4 <LED_FAN_MspInit+0x2c>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b39      	ldr	r3, [pc, #228]	@ (8001070 <LED_FAN_MspInit+0xf8>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	4a38      	ldr	r2, [pc, #224]	@ (8001070 <LED_FAN_MspInit+0xf8>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6193      	str	r3, [r2, #24]
 8000f96:	4b36      	ldr	r3, [pc, #216]	@ (8001070 <LED_FAN_MspInit+0xf8>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	e010      	b.n	8000fc6 <LED_FAN_MspInit+0x4e>
	}else if(device->gpio_port == GPIOB){
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	4a32      	ldr	r2, [pc, #200]	@ (8001074 <LED_FAN_MspInit+0xfc>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d10b      	bne.n	8000fc6 <LED_FAN_MspInit+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	4b30      	ldr	r3, [pc, #192]	@ (8001070 <LED_FAN_MspInit+0xf8>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	4a2f      	ldr	r2, [pc, #188]	@ (8001070 <LED_FAN_MspInit+0xf8>)
 8000fb4:	f043 0308 	orr.w	r3, r3, #8
 8000fb8:	6193      	str	r3, [r2, #24]
 8000fba:	4b2d      	ldr	r3, [pc, #180]	@ (8001070 <LED_FAN_MspInit+0xf8>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
	}

	GPIO_InitTypeDef gpio_init;
	gpio_init.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	637b      	str	r3, [r7, #52]	@ 0x34
	gpio_init.Pin = device->gpio_pin;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	8a1b      	ldrh	r3, [r3, #16]
 8000fce:	633b      	str	r3, [r7, #48]	@ 0x30
	gpio_init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(device->gpio_port, &gpio_init);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fc6e 	bl	80018c0 <HAL_GPIO_Init>

	TIM_OC_InitTypeDef tim_init;
	tim_init.OCMode = TIM_OCMODE_PWM1;
 8000fe4:	2360      	movs	r3, #96	@ 0x60
 8000fe6:	617b      	str	r3, [r7, #20]
	tim_init.Pulse = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
	tim_init.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
	tim_init.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
	if(device->timer == TIM1){
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	4a1f      	ldr	r2, [pc, #124]	@ (8001078 <LED_FAN_MspInit+0x100>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d10d      	bne.n	800101a <LED_FAN_MspInit+0xa2>
		if(HAL_TIM_PWM_ConfigChannel(&htim1, &tim_init, device->channel) != HAL_OK){
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	481c      	ldr	r0, [pc, #112]	@ (800107c <LED_FAN_MspInit+0x104>)
 800100a:	f001 fc6f 	bl	80028ec <HAL_TIM_PWM_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d027      	beq.n	8001064 <LED_FAN_MspInit+0xec>
			Error_Handler();
 8001014:	f7ff fe6e 	bl	8000cf4 <Error_Handler>
	else if(device->timer == TIM3){
		if(HAL_TIM_PWM_ConfigChannel(&htim3, &tim_init, device->channel) != HAL_OK){
			Error_Handler();
		}
	}
}
 8001018:	e024      	b.n	8001064 <LED_FAN_MspInit+0xec>
	else if(device->timer == TIM2){
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001022:	d10d      	bne.n	8001040 <LED_FAN_MspInit+0xc8>
		if(HAL_TIM_PWM_ConfigChannel(&htim2, &tim_init, device->channel) != HAL_OK){
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	4814      	ldr	r0, [pc, #80]	@ (8001080 <LED_FAN_MspInit+0x108>)
 8001030:	f001 fc5c 	bl	80028ec <HAL_TIM_PWM_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d014      	beq.n	8001064 <LED_FAN_MspInit+0xec>
			Error_Handler();
 800103a:	f7ff fe5b 	bl	8000cf4 <Error_Handler>
}
 800103e:	e011      	b.n	8001064 <LED_FAN_MspInit+0xec>
	else if(device->timer == TIM3){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	4a0f      	ldr	r2, [pc, #60]	@ (8001084 <LED_FAN_MspInit+0x10c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d10c      	bne.n	8001064 <LED_FAN_MspInit+0xec>
		if(HAL_TIM_PWM_ConfigChannel(&htim3, &tim_init, device->channel) != HAL_OK){
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	480c      	ldr	r0, [pc, #48]	@ (8001088 <LED_FAN_MspInit+0x110>)
 8001056:	f001 fc49 	bl	80028ec <HAL_TIM_PWM_ConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <LED_FAN_MspInit+0xec>
			Error_Handler();
 8001060:	f7ff fe48 	bl	8000cf4 <Error_Handler>
}
 8001064:	bf00      	nop
 8001066:	3740      	adds	r7, #64	@ 0x40
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40010800 	.word	0x40010800
 8001070:	40021000 	.word	0x40021000
 8001074:	40010c00 	.word	0x40010c00
 8001078:	40012c00 	.word	0x40012c00
 800107c:	20000084 	.word	0x20000084
 8001080:	200000cc 	.word	0x200000cc
 8001084:	40000400 	.word	0x40000400
 8001088:	20000114 	.word	0x20000114

0800108c <DOOR_MspInit>:

void DOOR_MspInit(Door *door){
 800108c:	b580      	push	{r7, lr}
 800108e:	b090      	sub	sp, #64	@ 0x40
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	if(door->gpio_port == GPIOA){
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a39      	ldr	r2, [pc, #228]	@ (8001180 <DOOR_MspInit+0xf4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d10c      	bne.n	80010b8 <DOOR_MspInit+0x2c>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	4b39      	ldr	r3, [pc, #228]	@ (8001184 <DOOR_MspInit+0xf8>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	4a38      	ldr	r2, [pc, #224]	@ (8001184 <DOOR_MspInit+0xf8>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	6193      	str	r3, [r2, #24]
 80010aa:	4b36      	ldr	r3, [pc, #216]	@ (8001184 <DOOR_MspInit+0xf8>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	e010      	b.n	80010da <DOOR_MspInit+0x4e>
	}else if(door->gpio_port == GPIOB){
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	4a32      	ldr	r2, [pc, #200]	@ (8001188 <DOOR_MspInit+0xfc>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d10b      	bne.n	80010da <DOOR_MspInit+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	4b30      	ldr	r3, [pc, #192]	@ (8001184 <DOOR_MspInit+0xf8>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001184 <DOOR_MspInit+0xf8>)
 80010c8:	f043 0308 	orr.w	r3, r3, #8
 80010cc:	6193      	str	r3, [r2, #24]
 80010ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001184 <DOOR_MspInit+0xf8>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
	}

	GPIO_InitTypeDef gpio_init;
	gpio_init.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	637b      	str	r3, [r7, #52]	@ 0x34
	gpio_init.Pin = door->gpio_pin;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	8a1b      	ldrh	r3, [r3, #16]
 80010e2:	633b      	str	r3, [r7, #48]	@ 0x30
	gpio_init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010e4:	2301      	movs	r3, #1
 80010e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(door->gpio_port, &gpio_init);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80010f0:	4611      	mov	r1, r2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fbe4 	bl	80018c0 <HAL_GPIO_Init>

	TIM_OC_InitTypeDef tim_init;
	tim_init.OCMode = TIM_OCMODE_PWM1;
 80010f8:	2360      	movs	r3, #96	@ 0x60
 80010fa:	617b      	str	r3, [r7, #20]
	tim_init.Pulse = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
	tim_init.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
	tim_init.OCFastMode = TIM_OCFAST_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
	if(door->timer == TIM1){
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4a1f      	ldr	r2, [pc, #124]	@ (800118c <DOOR_MspInit+0x100>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d10d      	bne.n	800112e <DOOR_MspInit+0xa2>
		if(HAL_TIM_PWM_ConfigChannel(&htim1, &tim_init, door->channel) != HAL_OK){
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	481c      	ldr	r0, [pc, #112]	@ (8001190 <DOOR_MspInit+0x104>)
 800111e:	f001 fbe5 	bl	80028ec <HAL_TIM_PWM_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d027      	beq.n	8001178 <DOOR_MspInit+0xec>
			Error_Handler();
 8001128:	f7ff fde4 	bl	8000cf4 <Error_Handler>
	else if(door->timer == TIM3){
		if(HAL_TIM_PWM_ConfigChannel(&htim3, &tim_init, door->channel) != HAL_OK){
			Error_Handler();
		}
	}
}
 800112c:	e024      	b.n	8001178 <DOOR_MspInit+0xec>
	else if(door->timer == TIM2){
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001136:	d10d      	bne.n	8001154 <DOOR_MspInit+0xc8>
		if(HAL_TIM_PWM_ConfigChannel(&htim2, &tim_init, door->channel) != HAL_OK){
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	4814      	ldr	r0, [pc, #80]	@ (8001194 <DOOR_MspInit+0x108>)
 8001144:	f001 fbd2 	bl	80028ec <HAL_TIM_PWM_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d014      	beq.n	8001178 <DOOR_MspInit+0xec>
			Error_Handler();
 800114e:	f7ff fdd1 	bl	8000cf4 <Error_Handler>
}
 8001152:	e011      	b.n	8001178 <DOOR_MspInit+0xec>
	else if(door->timer == TIM3){
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	4a0f      	ldr	r2, [pc, #60]	@ (8001198 <DOOR_MspInit+0x10c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d10c      	bne.n	8001178 <DOOR_MspInit+0xec>
		if(HAL_TIM_PWM_ConfigChannel(&htim3, &tim_init, door->channel) != HAL_OK){
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <DOOR_MspInit+0x110>)
 800116a:	f001 fbbf 	bl	80028ec <HAL_TIM_PWM_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <DOOR_MspInit+0xec>
			Error_Handler();
 8001174:	f7ff fdbe 	bl	8000cf4 <Error_Handler>
}
 8001178:	bf00      	nop
 800117a:	3740      	adds	r7, #64	@ 0x40
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40010800 	.word	0x40010800
 8001184:	40021000 	.word	0x40021000
 8001188:	40010c00 	.word	0x40010c00
 800118c:	40012c00 	.word	0x40012c00
 8001190:	20000084 	.word	0x20000084
 8001194:	200000cc 	.word	0x200000cc
 8001198:	40000400 	.word	0x40000400
 800119c:	20000114 	.word	0x20000114

080011a0 <Device_MspInit>:

void Device_MspInit(Oher_Devices *device){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	if(device->gpio_port == GPIOA){
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4a19      	ldr	r2, [pc, #100]	@ (8001214 <Device_MspInit+0x74>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d10c      	bne.n	80011cc <Device_MspInit+0x2c>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <Device_MspInit+0x78>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	4a18      	ldr	r2, [pc, #96]	@ (8001218 <Device_MspInit+0x78>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6193      	str	r3, [r2, #24]
 80011be:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <Device_MspInit+0x78>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	e010      	b.n	80011ee <Device_MspInit+0x4e>
	}else if(device->gpio_port == GPIOB){
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	4a12      	ldr	r2, [pc, #72]	@ (800121c <Device_MspInit+0x7c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d10b      	bne.n	80011ee <Device_MspInit+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <Device_MspInit+0x78>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	4a0f      	ldr	r2, [pc, #60]	@ (8001218 <Device_MspInit+0x78>)
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	6193      	str	r3, [r2, #24]
 80011e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <Device_MspInit+0x78>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
	}

	GPIO_InitTypeDef gpio_init;
	gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	617b      	str	r3, [r7, #20]
	gpio_init.Pin = device->gpio_pin;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	613b      	str	r3, [r7, #16]
	gpio_init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011f8:	2301      	movs	r3, #1
 80011fa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(device->gpio_port, &gpio_init);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f107 0210 	add.w	r2, r7, #16
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fb5a 	bl	80018c0 <HAL_GPIO_Init>

}
 800120c:	bf00      	nop
 800120e:	3720      	adds	r7, #32
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40010800 	.word	0x40010800
 8001218:	40021000 	.word	0x40021000
 800121c:	40010c00 	.word	0x40010c00

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <NMI_Handler+0x4>

08001228 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <MemManage_Handler+0x4>

08001238 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <BusFault_Handler+0x4>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <UsageFault_Handler+0x4>

08001248 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001270:	f000 f94a 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}

08001278 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800127c:	4802      	ldr	r0, [pc, #8]	@ (8001288 <TIM3_IRQHandler+0x10>)
 800127e:	f001 fa45 	bl	800270c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000114 	.word	0x20000114

0800128c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001290:	4802      	ldr	r0, [pc, #8]	@ (800129c <USART1_IRQHandler+0x10>)
 8001292:	f001 ff97 	bl	80031c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000015c 	.word	0x2000015c

080012a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return 1;
 80012a4:	2301      	movs	r3, #1
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <_kill>:

int _kill(int pid, int sig)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012b8:	f003 f82a 	bl	8004310 <__errno>
 80012bc:	4603      	mov	r3, r0
 80012be:	2216      	movs	r2, #22
 80012c0:	601a      	str	r2, [r3, #0]
  return -1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <_exit>:

void _exit (int status)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012d6:	f04f 31ff 	mov.w	r1, #4294967295
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffe7 	bl	80012ae <_kill>
  while (1) {}    /* Make sure we hang here */
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <_exit+0x12>

080012e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	e00a      	b.n	800130c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012f6:	f3af 8000 	nop.w
 80012fa:	4601      	mov	r1, r0
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	60ba      	str	r2, [r7, #8]
 8001302:	b2ca      	uxtb	r2, r1
 8001304:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	3301      	adds	r3, #1
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	429a      	cmp	r2, r3
 8001312:	dbf0      	blt.n	80012f6 <_read+0x12>
  }

  return len;
 8001314:	687b      	ldr	r3, [r7, #4]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	e009      	b.n	8001344 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	60ba      	str	r2, [r7, #8]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3301      	adds	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	429a      	cmp	r2, r3
 800134a:	dbf1      	blt.n	8001330 <_write+0x12>
  }
  return len;
 800134c:	687b      	ldr	r3, [r7, #4]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <_close>:

int _close(int file)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800137c:	605a      	str	r2, [r3, #4]
  return 0;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <_isatty>:

int _isatty(int file)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800139e:	b480      	push	{r7}
 80013a0:	b085      	sub	sp, #20
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
	...

080013b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c0:	4a14      	ldr	r2, [pc, #80]	@ (8001414 <_sbrk+0x5c>)
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <_sbrk+0x60>)
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <_sbrk+0x64>)
 80013d6:	4a12      	ldr	r2, [pc, #72]	@ (8001420 <_sbrk+0x68>)
 80013d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013da:	4b10      	ldr	r3, [pc, #64]	@ (800141c <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d207      	bcs.n	80013f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e8:	f002 ff92 	bl	8004310 <__errno>
 80013ec:	4603      	mov	r3, r0
 80013ee:	220c      	movs	r2, #12
 80013f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	e009      	b.n	800140c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f8:	4b08      	ldr	r3, [pc, #32]	@ (800141c <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fe:	4b07      	ldr	r3, [pc, #28]	@ (800141c <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	4a05      	ldr	r2, [pc, #20]	@ (800141c <_sbrk+0x64>)
 8001408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20002800 	.word	0x20002800
 8001418:	00000400 	.word	0x00000400
 800141c:	200001b4 	.word	0x200001b4
 8001420:	20000308 	.word	0x20000308

08001424 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001430:	f7ff fff8 	bl	8001424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001434:	480b      	ldr	r0, [pc, #44]	@ (8001464 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001436:	490c      	ldr	r1, [pc, #48]	@ (8001468 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001438:	4a0c      	ldr	r2, [pc, #48]	@ (800146c <LoopFillZerobss+0x16>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800143c:	e002      	b.n	8001444 <LoopCopyDataInit>

0800143e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001442:	3304      	adds	r3, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001448:	d3f9      	bcc.n	800143e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144a:	4a09      	ldr	r2, [pc, #36]	@ (8001470 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800144c:	4c09      	ldr	r4, [pc, #36]	@ (8001474 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001450:	e001      	b.n	8001456 <LoopFillZerobss>

08001452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001454:	3204      	adds	r2, #4

08001456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001458:	d3fb      	bcc.n	8001452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145a:	f002 ff5f 	bl	800431c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800145e:	f7ff f849 	bl	80004f4 <main>
  bx lr
 8001462:	4770      	bx	lr
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800146c:	080050d4 	.word	0x080050d4
  ldr r2, =_sbss
 8001470:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001474:	20000308 	.word	0x20000308

08001478 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC1_2_IRQHandler>
	...

0800147c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <HAL_Init+0x28>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a07      	ldr	r2, [pc, #28]	@ (80014a4 <HAL_Init+0x28>)
 8001486:	f043 0310 	orr.w	r3, r3, #16
 800148a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 f923 	bl	80016d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001492:	200d      	movs	r0, #13
 8001494:	f000 f808 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001498:	f7ff fc76 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40022000 	.word	0x40022000

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <HAL_InitTick+0x54>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <HAL_InitTick+0x58>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f93b 	bl	8001742 <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f000 f903 	bl	80016ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	@ (8001504 <HAL_InitTick+0x5c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000000 	.word	0x20000000
 8001500:	20000008 	.word	0x20000008
 8001504:	20000004 	.word	0x20000004

08001508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <HAL_IncTick+0x1c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <HAL_IncTick+0x20>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a03      	ldr	r2, [pc, #12]	@ (8001528 <HAL_IncTick+0x20>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	20000008 	.word	0x20000008
 8001528:	200001b8 	.word	0x200001b8

0800152c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;
 8001530:	4b02      	ldr	r3, [pc, #8]	@ (800153c <HAL_GetTick+0x10>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	200001b8 	.word	0x200001b8

08001540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001550:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800155c:	4013      	ands	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800156c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001572:	4a04      	ldr	r2, [pc, #16]	@ (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	60d3      	str	r3, [r2, #12]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800158c:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <__NVIC_GetPriorityGrouping+0x18>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	f003 0307 	and.w	r3, r3, #7
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	db0b      	blt.n	80015ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	f003 021f 	and.w	r2, r3, #31
 80015bc:	4906      	ldr	r1, [pc, #24]	@ (80015d8 <__NVIC_EnableIRQ+0x34>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	2001      	movs	r0, #1
 80015c6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	e000e100 	.word	0xe000e100

080015dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db0a      	blt.n	8001606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	490c      	ldr	r1, [pc, #48]	@ (8001628 <__NVIC_SetPriority+0x4c>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	440b      	add	r3, r1
 8001600:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001604:	e00a      	b.n	800161c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4908      	ldr	r1, [pc, #32]	@ (800162c <__NVIC_SetPriority+0x50>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	3b04      	subs	r3, #4
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	440b      	add	r3, r1
 800161a:	761a      	strb	r2, [r3, #24]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000e100 	.word	0xe000e100
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	@ 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f1c3 0307 	rsb	r3, r3, #7
 800164a:	2b04      	cmp	r3, #4
 800164c:	bf28      	it	cs
 800164e:	2304      	movcs	r3, #4
 8001650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3304      	adds	r3, #4
 8001656:	2b06      	cmp	r3, #6
 8001658:	d902      	bls.n	8001660 <NVIC_EncodePriority+0x30>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3b03      	subs	r3, #3
 800165e:	e000      	b.n	8001662 <NVIC_EncodePriority+0x32>
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	401a      	ands	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001678:	f04f 31ff 	mov.w	r1, #4294967295
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	43d9      	mvns	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	4313      	orrs	r3, r2
         );
}
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	@ 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016a4:	d301      	bcc.n	80016aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00f      	b.n	80016ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016aa:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <SysTick_Config+0x40>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b2:	210f      	movs	r1, #15
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f7ff ff90 	bl	80015dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016bc:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <SysTick_Config+0x40>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c2:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <SysTick_Config+0x40>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	e000e010 	.word	0xe000e010

080016d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff2d 	bl	8001540 <__NVIC_SetPriorityGrouping>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001700:	f7ff ff42 	bl	8001588 <__NVIC_GetPriorityGrouping>
 8001704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	6978      	ldr	r0, [r7, #20]
 800170c:	f7ff ff90 	bl	8001630 <NVIC_EncodePriority>
 8001710:	4602      	mov	r2, r0
 8001712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff5f 	bl	80015dc <__NVIC_SetPriority>
}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff35 	bl	80015a4 <__NVIC_EnableIRQ>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ffa2 	bl	8001694 <SysTick_Config>
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800175a:	b480      	push	{r7}
 800175c:	b085      	sub	sp, #20
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d008      	beq.n	8001784 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2204      	movs	r2, #4
 8001776:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e020      	b.n	80017c6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 020e 	bic.w	r2, r2, #14
 8001792:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0201 	bic.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017ac:	2101      	movs	r1, #1
 80017ae:	fa01 f202 	lsl.w	r2, r1, r2
 80017b2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d005      	beq.n	80017f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2204      	movs	r2, #4
 80017ec:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
 80017f2:	e051      	b.n	8001898 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 020e 	bic.w	r2, r2, #14
 8001802:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0201 	bic.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a22      	ldr	r2, [pc, #136]	@ (80018a4 <HAL_DMA_Abort_IT+0xd4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d029      	beq.n	8001872 <HAL_DMA_Abort_IT+0xa2>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a21      	ldr	r2, [pc, #132]	@ (80018a8 <HAL_DMA_Abort_IT+0xd8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d022      	beq.n	800186e <HAL_DMA_Abort_IT+0x9e>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a1f      	ldr	r2, [pc, #124]	@ (80018ac <HAL_DMA_Abort_IT+0xdc>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d01a      	beq.n	8001868 <HAL_DMA_Abort_IT+0x98>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a1e      	ldr	r2, [pc, #120]	@ (80018b0 <HAL_DMA_Abort_IT+0xe0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d012      	beq.n	8001862 <HAL_DMA_Abort_IT+0x92>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a1c      	ldr	r2, [pc, #112]	@ (80018b4 <HAL_DMA_Abort_IT+0xe4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d00a      	beq.n	800185c <HAL_DMA_Abort_IT+0x8c>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a1b      	ldr	r2, [pc, #108]	@ (80018b8 <HAL_DMA_Abort_IT+0xe8>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d102      	bne.n	8001856 <HAL_DMA_Abort_IT+0x86>
 8001850:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001854:	e00e      	b.n	8001874 <HAL_DMA_Abort_IT+0xa4>
 8001856:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800185a:	e00b      	b.n	8001874 <HAL_DMA_Abort_IT+0xa4>
 800185c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001860:	e008      	b.n	8001874 <HAL_DMA_Abort_IT+0xa4>
 8001862:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001866:	e005      	b.n	8001874 <HAL_DMA_Abort_IT+0xa4>
 8001868:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800186c:	e002      	b.n	8001874 <HAL_DMA_Abort_IT+0xa4>
 800186e:	2310      	movs	r3, #16
 8001870:	e000      	b.n	8001874 <HAL_DMA_Abort_IT+0xa4>
 8001872:	2301      	movs	r3, #1
 8001874:	4a11      	ldr	r2, [pc, #68]	@ (80018bc <HAL_DMA_Abort_IT+0xec>)
 8001876:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	4798      	blx	r3
    } 
  }
  return status;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40020008 	.word	0x40020008
 80018a8:	4002001c 	.word	0x4002001c
 80018ac:	40020030 	.word	0x40020030
 80018b0:	40020044 	.word	0x40020044
 80018b4:	40020058 	.word	0x40020058
 80018b8:	4002006c 	.word	0x4002006c
 80018bc:	40020000 	.word	0x40020000

080018c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b08b      	sub	sp, #44	@ 0x2c
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d2:	e161      	b.n	8001b98 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018d4:	2201      	movs	r2, #1
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	f040 8150 	bne.w	8001b92 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4a97      	ldr	r2, [pc, #604]	@ (8001b54 <HAL_GPIO_Init+0x294>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d05e      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 80018fc:	4a95      	ldr	r2, [pc, #596]	@ (8001b54 <HAL_GPIO_Init+0x294>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d875      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 8001902:	4a95      	ldr	r2, [pc, #596]	@ (8001b58 <HAL_GPIO_Init+0x298>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d058      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 8001908:	4a93      	ldr	r2, [pc, #588]	@ (8001b58 <HAL_GPIO_Init+0x298>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d86f      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 800190e:	4a93      	ldr	r2, [pc, #588]	@ (8001b5c <HAL_GPIO_Init+0x29c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d052      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 8001914:	4a91      	ldr	r2, [pc, #580]	@ (8001b5c <HAL_GPIO_Init+0x29c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d869      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 800191a:	4a91      	ldr	r2, [pc, #580]	@ (8001b60 <HAL_GPIO_Init+0x2a0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d04c      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 8001920:	4a8f      	ldr	r2, [pc, #572]	@ (8001b60 <HAL_GPIO_Init+0x2a0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d863      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 8001926:	4a8f      	ldr	r2, [pc, #572]	@ (8001b64 <HAL_GPIO_Init+0x2a4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d046      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 800192c:	4a8d      	ldr	r2, [pc, #564]	@ (8001b64 <HAL_GPIO_Init+0x2a4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d85d      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 8001932:	2b12      	cmp	r3, #18
 8001934:	d82a      	bhi.n	800198c <HAL_GPIO_Init+0xcc>
 8001936:	2b12      	cmp	r3, #18
 8001938:	d859      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 800193a:	a201      	add	r2, pc, #4	@ (adr r2, 8001940 <HAL_GPIO_Init+0x80>)
 800193c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001940:	080019bb 	.word	0x080019bb
 8001944:	08001995 	.word	0x08001995
 8001948:	080019a7 	.word	0x080019a7
 800194c:	080019e9 	.word	0x080019e9
 8001950:	080019ef 	.word	0x080019ef
 8001954:	080019ef 	.word	0x080019ef
 8001958:	080019ef 	.word	0x080019ef
 800195c:	080019ef 	.word	0x080019ef
 8001960:	080019ef 	.word	0x080019ef
 8001964:	080019ef 	.word	0x080019ef
 8001968:	080019ef 	.word	0x080019ef
 800196c:	080019ef 	.word	0x080019ef
 8001970:	080019ef 	.word	0x080019ef
 8001974:	080019ef 	.word	0x080019ef
 8001978:	080019ef 	.word	0x080019ef
 800197c:	080019ef 	.word	0x080019ef
 8001980:	080019ef 	.word	0x080019ef
 8001984:	0800199d 	.word	0x0800199d
 8001988:	080019b1 	.word	0x080019b1
 800198c:	4a76      	ldr	r2, [pc, #472]	@ (8001b68 <HAL_GPIO_Init+0x2a8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001992:	e02c      	b.n	80019ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	623b      	str	r3, [r7, #32]
          break;
 800199a:	e029      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	3304      	adds	r3, #4
 80019a2:	623b      	str	r3, [r7, #32]
          break;
 80019a4:	e024      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	3308      	adds	r3, #8
 80019ac:	623b      	str	r3, [r7, #32]
          break;
 80019ae:	e01f      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	330c      	adds	r3, #12
 80019b6:	623b      	str	r3, [r7, #32]
          break;
 80019b8:	e01a      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019c2:	2304      	movs	r3, #4
 80019c4:	623b      	str	r3, [r7, #32]
          break;
 80019c6:	e013      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d105      	bne.n	80019dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d0:	2308      	movs	r3, #8
 80019d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	611a      	str	r2, [r3, #16]
          break;
 80019da:	e009      	b.n	80019f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019dc:	2308      	movs	r3, #8
 80019de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	615a      	str	r2, [r3, #20]
          break;
 80019e6:	e003      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019e8:	2300      	movs	r3, #0
 80019ea:	623b      	str	r3, [r7, #32]
          break;
 80019ec:	e000      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          break;
 80019ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2bff      	cmp	r3, #255	@ 0xff
 80019f4:	d801      	bhi.n	80019fa <HAL_GPIO_Init+0x13a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	e001      	b.n	80019fe <HAL_GPIO_Init+0x13e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3304      	adds	r3, #4
 80019fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2bff      	cmp	r3, #255	@ 0xff
 8001a04:	d802      	bhi.n	8001a0c <HAL_GPIO_Init+0x14c>
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	e002      	b.n	8001a12 <HAL_GPIO_Init+0x152>
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0e:	3b08      	subs	r3, #8
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	210f      	movs	r1, #15
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	401a      	ands	r2, r3
 8001a24:	6a39      	ldr	r1, [r7, #32]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 80a9 	beq.w	8001b92 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a40:	4b4a      	ldr	r3, [pc, #296]	@ (8001b6c <HAL_GPIO_Init+0x2ac>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a49      	ldr	r2, [pc, #292]	@ (8001b6c <HAL_GPIO_Init+0x2ac>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b47      	ldr	r3, [pc, #284]	@ (8001b6c <HAL_GPIO_Init+0x2ac>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a58:	4a45      	ldr	r2, [pc, #276]	@ (8001b70 <HAL_GPIO_Init+0x2b0>)
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	220f      	movs	r2, #15
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a3d      	ldr	r2, [pc, #244]	@ (8001b74 <HAL_GPIO_Init+0x2b4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d00d      	beq.n	8001aa0 <HAL_GPIO_Init+0x1e0>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a3c      	ldr	r2, [pc, #240]	@ (8001b78 <HAL_GPIO_Init+0x2b8>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d007      	beq.n	8001a9c <HAL_GPIO_Init+0x1dc>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a3b      	ldr	r2, [pc, #236]	@ (8001b7c <HAL_GPIO_Init+0x2bc>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d101      	bne.n	8001a98 <HAL_GPIO_Init+0x1d8>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e004      	b.n	8001aa2 <HAL_GPIO_Init+0x1e2>
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e002      	b.n	8001aa2 <HAL_GPIO_Init+0x1e2>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <HAL_GPIO_Init+0x1e2>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aa4:	f002 0203 	and.w	r2, r2, #3
 8001aa8:	0092      	lsls	r2, r2, #2
 8001aaa:	4093      	lsls	r3, r2
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ab2:	492f      	ldr	r1, [pc, #188]	@ (8001b70 <HAL_GPIO_Init+0x2b0>)
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d006      	beq.n	8001ada <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001acc:	4b2c      	ldr	r3, [pc, #176]	@ (8001b80 <HAL_GPIO_Init+0x2c0>)
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	492b      	ldr	r1, [pc, #172]	@ (8001b80 <HAL_GPIO_Init+0x2c0>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ada:	4b29      	ldr	r3, [pc, #164]	@ (8001b80 <HAL_GPIO_Init+0x2c0>)
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	4927      	ldr	r1, [pc, #156]	@ (8001b80 <HAL_GPIO_Init+0x2c0>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001af4:	4b22      	ldr	r3, [pc, #136]	@ (8001b80 <HAL_GPIO_Init+0x2c0>)
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	4921      	ldr	r1, [pc, #132]	@ (8001b80 <HAL_GPIO_Init+0x2c0>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	60cb      	str	r3, [r1, #12]
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b02:	4b1f      	ldr	r3, [pc, #124]	@ (8001b80 <HAL_GPIO_Init+0x2c0>)
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	491d      	ldr	r1, [pc, #116]	@ (8001b80 <HAL_GPIO_Init+0x2c0>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b1c:	4b18      	ldr	r3, [pc, #96]	@ (8001b80 <HAL_GPIO_Init+0x2c0>)
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	4917      	ldr	r1, [pc, #92]	@ (8001b80 <HAL_GPIO_Init+0x2c0>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
 8001b28:	e006      	b.n	8001b38 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b2a:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <HAL_GPIO_Init+0x2c0>)
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	4913      	ldr	r1, [pc, #76]	@ (8001b80 <HAL_GPIO_Init+0x2c0>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d01f      	beq.n	8001b84 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b44:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <HAL_GPIO_Init+0x2c0>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	490d      	ldr	r1, [pc, #52]	@ (8001b80 <HAL_GPIO_Init+0x2c0>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
 8001b50:	e01f      	b.n	8001b92 <HAL_GPIO_Init+0x2d2>
 8001b52:	bf00      	nop
 8001b54:	10320000 	.word	0x10320000
 8001b58:	10310000 	.word	0x10310000
 8001b5c:	10220000 	.word	0x10220000
 8001b60:	10210000 	.word	0x10210000
 8001b64:	10120000 	.word	0x10120000
 8001b68:	10110000 	.word	0x10110000
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010000 	.word	0x40010000
 8001b74:	40010800 	.word	0x40010800
 8001b78:	40010c00 	.word	0x40010c00
 8001b7c:	40011000 	.word	0x40011000
 8001b80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b84:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <HAL_GPIO_Init+0x2f4>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	4909      	ldr	r1, [pc, #36]	@ (8001bb4 <HAL_GPIO_Init+0x2f4>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	3301      	adds	r3, #1
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f47f ae96 	bne.w	80018d4 <HAL_GPIO_Init+0x14>
  }
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	372c      	adds	r7, #44	@ 0x2c
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	40010400 	.word	0x40010400

08001bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bc8:	787b      	ldrb	r3, [r7, #1]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bce:	887a      	ldrh	r2, [r7, #2]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bd4:	e003      	b.n	8001bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bd6:	887b      	ldrh	r3, [r7, #2]
 8001bd8:	041a      	lsls	r2, r3, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	611a      	str	r2, [r3, #16]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bfa:	887a      	ldrh	r2, [r7, #2]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	041a      	lsls	r2, r3, #16
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	43d9      	mvns	r1, r3
 8001c06:	887b      	ldrh	r3, [r7, #2]
 8001c08:	400b      	ands	r3, r1
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	611a      	str	r2, [r3, #16]
}
 8001c10:	bf00      	nop
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e272      	b.n	8002114 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8087 	beq.w	8001d4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c3c:	4b92      	ldr	r3, [pc, #584]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d00c      	beq.n	8001c62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c48:	4b8f      	ldr	r3, [pc, #572]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d112      	bne.n	8001c7a <HAL_RCC_OscConfig+0x5e>
 8001c54:	4b8c      	ldr	r3, [pc, #560]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c60:	d10b      	bne.n	8001c7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c62:	4b89      	ldr	r3, [pc, #548]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d06c      	beq.n	8001d48 <HAL_RCC_OscConfig+0x12c>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d168      	bne.n	8001d48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e24c      	b.n	8002114 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c82:	d106      	bne.n	8001c92 <HAL_RCC_OscConfig+0x76>
 8001c84:	4b80      	ldr	r3, [pc, #512]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a7f      	ldr	r2, [pc, #508]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	e02e      	b.n	8001cf0 <HAL_RCC_OscConfig+0xd4>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x98>
 8001c9a:	4b7b      	ldr	r3, [pc, #492]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a7a      	ldr	r2, [pc, #488]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b78      	ldr	r3, [pc, #480]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a77      	ldr	r2, [pc, #476]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e01d      	b.n	8001cf0 <HAL_RCC_OscConfig+0xd4>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xbc>
 8001cbe:	4b72      	ldr	r3, [pc, #456]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a71      	ldr	r2, [pc, #452]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b6f      	ldr	r3, [pc, #444]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a6e      	ldr	r2, [pc, #440]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCC_OscConfig+0xd4>
 8001cd8:	4b6b      	ldr	r3, [pc, #428]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a6a      	ldr	r2, [pc, #424]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b68      	ldr	r3, [pc, #416]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a67      	ldr	r2, [pc, #412]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d013      	beq.n	8001d20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fc18 	bl	800152c <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff fc14 	bl	800152c <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	@ 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e200      	b.n	8002114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	4b5d      	ldr	r3, [pc, #372]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0xe4>
 8001d1e:	e014      	b.n	8001d4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fc04 	bl	800152c <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff fc00 	bl	800152c <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	@ 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e1ec      	b.n	8002114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	4b53      	ldr	r3, [pc, #332]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x10c>
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d063      	beq.n	8001e1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d56:	4b4c      	ldr	r3, [pc, #304]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d62:	4b49      	ldr	r3, [pc, #292]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d11c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x18c>
 8001d6e:	4b46      	ldr	r3, [pc, #280]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d116      	bne.n	8001da8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7a:	4b43      	ldr	r3, [pc, #268]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_RCC_OscConfig+0x176>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e1c0      	b.n	8002114 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d92:	4b3d      	ldr	r3, [pc, #244]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4939      	ldr	r1, [pc, #228]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	e03a      	b.n	8001e1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d020      	beq.n	8001df2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db0:	4b36      	ldr	r3, [pc, #216]	@ (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7ff fbb9 	bl	800152c <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7ff fbb5 	bl	800152c <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e1a1      	b.n	8002114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4927      	ldr	r1, [pc, #156]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]
 8001df0:	e015      	b.n	8001e1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df2:	4b26      	ldr	r3, [pc, #152]	@ (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff fb98 	bl	800152c <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e00:	f7ff fb94 	bl	800152c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e180      	b.n	8002114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	4b1d      	ldr	r3, [pc, #116]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d03a      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d019      	beq.n	8001e66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e32:	4b17      	ldr	r3, [pc, #92]	@ (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e38:	f7ff fb78 	bl	800152c <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e40:	f7ff fb74 	bl	800152c <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e160      	b.n	8002114 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	4b0d      	ldr	r3, [pc, #52]	@ (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e5e:	2001      	movs	r0, #1
 8001e60:	f000 face 	bl	8002400 <RCC_Delay>
 8001e64:	e01c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e66:	4b0a      	ldr	r3, [pc, #40]	@ (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6c:	f7ff fb5e 	bl	800152c <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e72:	e00f      	b.n	8001e94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e74:	f7ff fb5a 	bl	800152c <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d908      	bls.n	8001e94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e146      	b.n	8002114 <HAL_RCC_OscConfig+0x4f8>
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	42420000 	.word	0x42420000
 8001e90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e94:	4b92      	ldr	r3, [pc, #584]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1e9      	bne.n	8001e74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80a6 	beq.w	8001ffa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb2:	4b8b      	ldr	r3, [pc, #556]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10d      	bne.n	8001eda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	4b88      	ldr	r3, [pc, #544]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a87      	ldr	r2, [pc, #540]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ec8:	61d3      	str	r3, [r2, #28]
 8001eca:	4b85      	ldr	r3, [pc, #532]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eda:	4b82      	ldr	r3, [pc, #520]	@ (80020e4 <HAL_RCC_OscConfig+0x4c8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d118      	bne.n	8001f18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee6:	4b7f      	ldr	r3, [pc, #508]	@ (80020e4 <HAL_RCC_OscConfig+0x4c8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a7e      	ldr	r2, [pc, #504]	@ (80020e4 <HAL_RCC_OscConfig+0x4c8>)
 8001eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef2:	f7ff fb1b 	bl	800152c <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efa:	f7ff fb17 	bl	800152c <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b64      	cmp	r3, #100	@ 0x64
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e103      	b.n	8002114 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	4b75      	ldr	r3, [pc, #468]	@ (80020e4 <HAL_RCC_OscConfig+0x4c8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x312>
 8001f20:	4b6f      	ldr	r3, [pc, #444]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4a6e      	ldr	r2, [pc, #440]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6213      	str	r3, [r2, #32]
 8001f2c:	e02d      	b.n	8001f8a <HAL_RCC_OscConfig+0x36e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x334>
 8001f36:	4b6a      	ldr	r3, [pc, #424]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a69      	ldr	r2, [pc, #420]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6213      	str	r3, [r2, #32]
 8001f42:	4b67      	ldr	r3, [pc, #412]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4a66      	ldr	r2, [pc, #408]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	f023 0304 	bic.w	r3, r3, #4
 8001f4c:	6213      	str	r3, [r2, #32]
 8001f4e:	e01c      	b.n	8001f8a <HAL_RCC_OscConfig+0x36e>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	d10c      	bne.n	8001f72 <HAL_RCC_OscConfig+0x356>
 8001f58:	4b61      	ldr	r3, [pc, #388]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	4a60      	ldr	r2, [pc, #384]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	f043 0304 	orr.w	r3, r3, #4
 8001f62:	6213      	str	r3, [r2, #32]
 8001f64:	4b5e      	ldr	r3, [pc, #376]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	4a5d      	ldr	r2, [pc, #372]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6213      	str	r3, [r2, #32]
 8001f70:	e00b      	b.n	8001f8a <HAL_RCC_OscConfig+0x36e>
 8001f72:	4b5b      	ldr	r3, [pc, #364]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4a5a      	ldr	r2, [pc, #360]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	6213      	str	r3, [r2, #32]
 8001f7e:	4b58      	ldr	r3, [pc, #352]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	4a57      	ldr	r2, [pc, #348]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	f023 0304 	bic.w	r3, r3, #4
 8001f88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d015      	beq.n	8001fbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f92:	f7ff facb 	bl	800152c <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f98:	e00a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9a:	f7ff fac7 	bl	800152c <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e0b1      	b.n	8002114 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb0:	4b4b      	ldr	r3, [pc, #300]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0ee      	beq.n	8001f9a <HAL_RCC_OscConfig+0x37e>
 8001fbc:	e014      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbe:	f7ff fab5 	bl	800152c <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7ff fab1 	bl	800152c <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e09b      	b.n	8002114 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fdc:	4b40      	ldr	r3, [pc, #256]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1ee      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d105      	bne.n	8001ffa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fee:	4b3c      	ldr	r3, [pc, #240]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	4a3b      	ldr	r2, [pc, #236]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ff8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 8087 	beq.w	8002112 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002004:	4b36      	ldr	r3, [pc, #216]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	2b08      	cmp	r3, #8
 800200e:	d061      	beq.n	80020d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d146      	bne.n	80020a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002018:	4b33      	ldr	r3, [pc, #204]	@ (80020e8 <HAL_RCC_OscConfig+0x4cc>)
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201e:	f7ff fa85 	bl	800152c <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002026:	f7ff fa81 	bl	800152c <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e06d      	b.n	8002114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002038:	4b29      	ldr	r3, [pc, #164]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f0      	bne.n	8002026 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800204c:	d108      	bne.n	8002060 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800204e:	4b24      	ldr	r3, [pc, #144]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	4921      	ldr	r1, [pc, #132]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002060:	4b1f      	ldr	r3, [pc, #124]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a19      	ldr	r1, [r3, #32]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002070:	430b      	orrs	r3, r1
 8002072:	491b      	ldr	r1, [pc, #108]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002078:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <HAL_RCC_OscConfig+0x4cc>)
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7ff fa55 	bl	800152c <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002086:	f7ff fa51 	bl	800152c <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e03d      	b.n	8002114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002098:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x46a>
 80020a4:	e035      	b.n	8002112 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a6:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <HAL_RCC_OscConfig+0x4cc>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff fa3e 	bl	800152c <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b4:	f7ff fa3a 	bl	800152c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e026      	b.n	8002114 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c6:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x498>
 80020d2:	e01e      	b.n	8002112 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d107      	bne.n	80020ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e019      	b.n	8002114 <HAL_RCC_OscConfig+0x4f8>
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40007000 	.word	0x40007000
 80020e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020ec:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <HAL_RCC_OscConfig+0x500>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d001      	beq.n	8002112 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000

08002120 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0d0      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002134:	4b6a      	ldr	r3, [pc, #424]	@ (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d910      	bls.n	8002164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b67      	ldr	r3, [pc, #412]	@ (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 0207 	bic.w	r2, r3, #7
 800214a:	4965      	ldr	r1, [pc, #404]	@ (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b63      	ldr	r3, [pc, #396]	@ (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0b8      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d020      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800217c:	4b59      	ldr	r3, [pc, #356]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4a58      	ldr	r2, [pc, #352]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002186:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002194:	4b53      	ldr	r3, [pc, #332]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4a52      	ldr	r2, [pc, #328]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800219e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a0:	4b50      	ldr	r3, [pc, #320]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	494d      	ldr	r1, [pc, #308]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d040      	beq.n	8002240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	4b47      	ldr	r3, [pc, #284]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d115      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e07f      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021de:	4b41      	ldr	r3, [pc, #260]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d109      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e073      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ee:	4b3d      	ldr	r3, [pc, #244]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e06b      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021fe:	4b39      	ldr	r3, [pc, #228]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f023 0203 	bic.w	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4936      	ldr	r1, [pc, #216]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002210:	f7ff f98c 	bl	800152c <HAL_GetTick>
 8002214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	e00a      	b.n	800222e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002218:	f7ff f988 	bl	800152c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e053      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	4b2d      	ldr	r3, [pc, #180]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 020c 	and.w	r2, r3, #12
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	429a      	cmp	r2, r3
 800223e:	d1eb      	bne.n	8002218 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002240:	4b27      	ldr	r3, [pc, #156]	@ (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d210      	bcs.n	8002270 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b24      	ldr	r3, [pc, #144]	@ (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 0207 	bic.w	r2, r3, #7
 8002256:	4922      	ldr	r1, [pc, #136]	@ (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	4b20      	ldr	r3, [pc, #128]	@ (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e032      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800227c:	4b19      	ldr	r3, [pc, #100]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4916      	ldr	r1, [pc, #88]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800229a:	4b12      	ldr	r3, [pc, #72]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	490e      	ldr	r1, [pc, #56]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ae:	f000 f821 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 80022b2:	4602      	mov	r2, r0
 80022b4:	4b0b      	ldr	r3, [pc, #44]	@ (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	490a      	ldr	r1, [pc, #40]	@ (80022e8 <HAL_RCC_ClockConfig+0x1c8>)
 80022c0:	5ccb      	ldrb	r3, [r1, r3]
 80022c2:	fa22 f303 	lsr.w	r3, r2, r3
 80022c6:	4a09      	ldr	r2, [pc, #36]	@ (80022ec <HAL_RCC_ClockConfig+0x1cc>)
 80022c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ca:	4b09      	ldr	r3, [pc, #36]	@ (80022f0 <HAL_RCC_ClockConfig+0x1d0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff f8ea 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40022000 	.word	0x40022000
 80022e4:	40021000 	.word	0x40021000
 80022e8:	08004eb8 	.word	0x08004eb8
 80022ec:	20000000 	.word	0x20000000
 80022f0:	20000004 	.word	0x20000004

080022f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800230e:	4b1e      	ldr	r3, [pc, #120]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x94>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b04      	cmp	r3, #4
 800231c:	d002      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0x30>
 800231e:	2b08      	cmp	r3, #8
 8002320:	d003      	beq.n	800232a <HAL_RCC_GetSysClockFreq+0x36>
 8002322:	e027      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002324:	4b19      	ldr	r3, [pc, #100]	@ (800238c <HAL_RCC_GetSysClockFreq+0x98>)
 8002326:	613b      	str	r3, [r7, #16]
      break;
 8002328:	e027      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	0c9b      	lsrs	r3, r3, #18
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	4a17      	ldr	r2, [pc, #92]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002334:	5cd3      	ldrb	r3, [r2, r3]
 8002336:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d010      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002342:	4b11      	ldr	r3, [pc, #68]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x94>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	0c5b      	lsrs	r3, r3, #17
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	4a11      	ldr	r2, [pc, #68]	@ (8002394 <HAL_RCC_GetSysClockFreq+0xa0>)
 800234e:	5cd3      	ldrb	r3, [r2, r3]
 8002350:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a0d      	ldr	r2, [pc, #52]	@ (800238c <HAL_RCC_GetSysClockFreq+0x98>)
 8002356:	fb03 f202 	mul.w	r2, r3, r2
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	e004      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a0c      	ldr	r2, [pc, #48]	@ (8002398 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002368:	fb02 f303 	mul.w	r3, r2, r3
 800236c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	613b      	str	r3, [r7, #16]
      break;
 8002372:	e002      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002374:	4b05      	ldr	r3, [pc, #20]	@ (800238c <HAL_RCC_GetSysClockFreq+0x98>)
 8002376:	613b      	str	r3, [r7, #16]
      break;
 8002378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237a:	693b      	ldr	r3, [r7, #16]
}
 800237c:	4618      	mov	r0, r3
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000
 800238c:	007a1200 	.word	0x007a1200
 8002390:	08004ed0 	.word	0x08004ed0
 8002394:	08004ee0 	.word	0x08004ee0
 8002398:	003d0900 	.word	0x003d0900

0800239c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a0:	4b02      	ldr	r3, [pc, #8]	@ (80023ac <HAL_RCC_GetHCLKFreq+0x10>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	20000000 	.word	0x20000000

080023b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023b4:	f7ff fff2 	bl	800239c <HAL_RCC_GetHCLKFreq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	0a1b      	lsrs	r3, r3, #8
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	4903      	ldr	r1, [pc, #12]	@ (80023d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c6:	5ccb      	ldrb	r3, [r1, r3]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	08004ec8 	.word	0x08004ec8

080023d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023dc:	f7ff ffde 	bl	800239c <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	0adb      	lsrs	r3, r3, #11
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4903      	ldr	r1, [pc, #12]	@ (80023fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	08004ec8 	.word	0x08004ec8

08002400 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002408:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <RCC_Delay+0x34>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0a      	ldr	r2, [pc, #40]	@ (8002438 <RCC_Delay+0x38>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	0a5b      	lsrs	r3, r3, #9
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800241c:	bf00      	nop
  }
  while (Delay --);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1e5a      	subs	r2, r3, #1
 8002422:	60fa      	str	r2, [r7, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f9      	bne.n	800241c <RCC_Delay+0x1c>
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	20000000 	.word	0x20000000
 8002438:	10624dd3 	.word	0x10624dd3

0800243c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e041      	b.n	80024d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe fcde 	bl	8000e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3304      	adds	r3, #4
 8002478:	4619      	mov	r1, r3
 800247a:	4610      	mov	r0, r2
 800247c:	f000 fb1c 	bl	8002ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0201 	bic.w	r2, r2, #1
 80024f0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6a1a      	ldr	r2, [r3, #32]
 80024f8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10f      	bne.n	8002522 <HAL_TIM_Base_Stop_IT+0x48>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6a1a      	ldr	r2, [r3, #32]
 8002508:	f240 4344 	movw	r3, #1092	@ 0x444
 800250c:	4013      	ands	r3, r2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d107      	bne.n	8002522 <HAL_TIM_Base_Stop_IT+0x48>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr

08002536 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e041      	b.n	80025cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d106      	bne.n	8002562 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7fe fc45 	bl	8000dec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2202      	movs	r2, #2
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3304      	adds	r3, #4
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f000 fa9f 	bl	8002ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d109      	bne.n	80025f8 <HAL_TIM_PWM_Start+0x24>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	bf14      	ite	ne
 80025f0:	2301      	movne	r3, #1
 80025f2:	2300      	moveq	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	e022      	b.n	800263e <HAL_TIM_PWM_Start+0x6a>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d109      	bne.n	8002612 <HAL_TIM_PWM_Start+0x3e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b01      	cmp	r3, #1
 8002608:	bf14      	ite	ne
 800260a:	2301      	movne	r3, #1
 800260c:	2300      	moveq	r3, #0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	e015      	b.n	800263e <HAL_TIM_PWM_Start+0x6a>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b08      	cmp	r3, #8
 8002616:	d109      	bne.n	800262c <HAL_TIM_PWM_Start+0x58>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	bf14      	ite	ne
 8002624:	2301      	movne	r3, #1
 8002626:	2300      	moveq	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	e008      	b.n	800263e <HAL_TIM_PWM_Start+0x6a>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e059      	b.n	80026fa <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d104      	bne.n	8002656 <HAL_TIM_PWM_Start+0x82>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002654:	e013      	b.n	800267e <HAL_TIM_PWM_Start+0xaa>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b04      	cmp	r3, #4
 800265a:	d104      	bne.n	8002666 <HAL_TIM_PWM_Start+0x92>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002664:	e00b      	b.n	800267e <HAL_TIM_PWM_Start+0xaa>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b08      	cmp	r3, #8
 800266a:	d104      	bne.n	8002676 <HAL_TIM_PWM_Start+0xa2>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002674:	e003      	b.n	800267e <HAL_TIM_PWM_Start+0xaa>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2202      	movs	r2, #2
 800267a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2201      	movs	r2, #1
 8002684:	6839      	ldr	r1, [r7, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f000 fc02 	bl	8002e90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a1c      	ldr	r2, [pc, #112]	@ (8002704 <HAL_TIM_PWM_Start+0x130>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d107      	bne.n	80026a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a16      	ldr	r2, [pc, #88]	@ (8002704 <HAL_TIM_PWM_Start+0x130>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d009      	beq.n	80026c4 <HAL_TIM_PWM_Start+0xf0>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026b8:	d004      	beq.n	80026c4 <HAL_TIM_PWM_Start+0xf0>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a12      	ldr	r2, [pc, #72]	@ (8002708 <HAL_TIM_PWM_Start+0x134>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d111      	bne.n	80026e8 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b06      	cmp	r3, #6
 80026d4:	d010      	beq.n	80026f8 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0201 	orr.w	r2, r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e6:	e007      	b.n	80026f8 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0201 	orr.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40012c00 	.word	0x40012c00
 8002708:	40000400 	.word	0x40000400

0800270c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d020      	beq.n	8002770 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01b      	beq.n	8002770 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0202 	mvn.w	r2, #2
 8002740:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f993 	bl	8002a82 <HAL_TIM_IC_CaptureCallback>
 800275c:	e005      	b.n	800276a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f986 	bl	8002a70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f995 	bl	8002a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	d020      	beq.n	80027bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01b      	beq.n	80027bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0204 	mvn.w	r2, #4
 800278c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2202      	movs	r2, #2
 8002792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f96d 	bl	8002a82 <HAL_TIM_IC_CaptureCallback>
 80027a8:	e005      	b.n	80027b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f960 	bl	8002a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f96f 	bl	8002a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d020      	beq.n	8002808 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01b      	beq.n	8002808 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0208 	mvn.w	r2, #8
 80027d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2204      	movs	r2, #4
 80027de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f947 	bl	8002a82 <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f93a 	bl	8002a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f949 	bl	8002a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f003 0310 	and.w	r3, r3, #16
 800280e:	2b00      	cmp	r3, #0
 8002810:	d020      	beq.n	8002854 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b00      	cmp	r3, #0
 800281a:	d01b      	beq.n	8002854 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0210 	mvn.w	r2, #16
 8002824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2208      	movs	r2, #8
 800282a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f921 	bl	8002a82 <HAL_TIM_IC_CaptureCallback>
 8002840:	e005      	b.n	800284e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f914 	bl	8002a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f923 	bl	8002a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00c      	beq.n	8002878 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0201 	mvn.w	r2, #1
 8002870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fe f998 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00c      	beq.n	800289c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002888:	2b00      	cmp	r3, #0
 800288a:	d007      	beq.n	800289c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fb7f 	bl	8002f9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00c      	beq.n	80028c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d007      	beq.n	80028c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80028b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f8f3 	bl	8002aa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f003 0320 	and.w	r3, r3, #32
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00c      	beq.n	80028e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d007      	beq.n	80028e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0220 	mvn.w	r2, #32
 80028dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fb52 	bl	8002f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002906:	2302      	movs	r3, #2
 8002908:	e0ae      	b.n	8002a68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b0c      	cmp	r3, #12
 8002916:	f200 809f 	bhi.w	8002a58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800291a:	a201      	add	r2, pc, #4	@ (adr r2, 8002920 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800291c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002920:	08002955 	.word	0x08002955
 8002924:	08002a59 	.word	0x08002a59
 8002928:	08002a59 	.word	0x08002a59
 800292c:	08002a59 	.word	0x08002a59
 8002930:	08002995 	.word	0x08002995
 8002934:	08002a59 	.word	0x08002a59
 8002938:	08002a59 	.word	0x08002a59
 800293c:	08002a59 	.word	0x08002a59
 8002940:	080029d7 	.word	0x080029d7
 8002944:	08002a59 	.word	0x08002a59
 8002948:	08002a59 	.word	0x08002a59
 800294c:	08002a59 	.word	0x08002a59
 8002950:	08002a17 	.word	0x08002a17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f910 	bl	8002b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0208 	orr.w	r2, r2, #8
 800296e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0204 	bic.w	r2, r2, #4
 800297e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6999      	ldr	r1, [r3, #24]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	619a      	str	r2, [r3, #24]
      break;
 8002992:	e064      	b.n	8002a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f956 	bl	8002c4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6999      	ldr	r1, [r3, #24]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	021a      	lsls	r2, r3, #8
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	619a      	str	r2, [r3, #24]
      break;
 80029d4:	e043      	b.n	8002a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 f99f 	bl	8002d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69da      	ldr	r2, [r3, #28]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0208 	orr.w	r2, r2, #8
 80029f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0204 	bic.w	r2, r2, #4
 8002a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69d9      	ldr	r1, [r3, #28]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	61da      	str	r2, [r3, #28]
      break;
 8002a14:	e023      	b.n	8002a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 f9e9 	bl	8002df4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69da      	ldr	r2, [r3, #28]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69da      	ldr	r2, [r3, #28]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69d9      	ldr	r1, [r3, #28]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	021a      	lsls	r2, r3, #8
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	61da      	str	r2, [r3, #28]
      break;
 8002a56:	e002      	b.n	8002a5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a2b      	ldr	r2, [pc, #172]	@ (8002b78 <TIM_Base_SetConfig+0xc0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d007      	beq.n	8002ae0 <TIM_Base_SetConfig+0x28>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ad6:	d003      	beq.n	8002ae0 <TIM_Base_SetConfig+0x28>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a28      	ldr	r2, [pc, #160]	@ (8002b7c <TIM_Base_SetConfig+0xc4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d108      	bne.n	8002af2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a20      	ldr	r2, [pc, #128]	@ (8002b78 <TIM_Base_SetConfig+0xc0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d007      	beq.n	8002b0a <TIM_Base_SetConfig+0x52>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b00:	d003      	beq.n	8002b0a <TIM_Base_SetConfig+0x52>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a1d      	ldr	r2, [pc, #116]	@ (8002b7c <TIM_Base_SetConfig+0xc4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d108      	bne.n	8002b1c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a0d      	ldr	r2, [pc, #52]	@ (8002b78 <TIM_Base_SetConfig+0xc0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d103      	bne.n	8002b50 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f023 0201 	bic.w	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	611a      	str	r2, [r3, #16]
  }
}
 8002b6e:	bf00      	nop
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	40012c00 	.word	0x40012c00
 8002b7c:	40000400 	.word	0x40000400

08002b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	f023 0201 	bic.w	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0303 	bic.w	r3, r3, #3
 8002bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f023 0302 	bic.w	r3, r3, #2
 8002bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c48 <TIM_OC1_SetConfig+0xc8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d10c      	bne.n	8002bf6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f023 0308 	bic.w	r3, r3, #8
 8002be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f023 0304 	bic.w	r3, r3, #4
 8002bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a13      	ldr	r2, [pc, #76]	@ (8002c48 <TIM_OC1_SetConfig+0xc8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d111      	bne.n	8002c22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	621a      	str	r2, [r3, #32]
}
 8002c3c:	bf00      	nop
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40012c00 	.word	0x40012c00

08002c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f023 0210 	bic.w	r2, r3, #16
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f023 0320 	bic.w	r3, r3, #32
 8002c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d1c <TIM_OC2_SetConfig+0xd0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d10d      	bne.n	8002cc8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a14      	ldr	r2, [pc, #80]	@ (8002d1c <TIM_OC2_SetConfig+0xd0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d113      	bne.n	8002cf8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002cde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	621a      	str	r2, [r3, #32]
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr
 8002d1c:	40012c00 	.word	0x40012c00

08002d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0303 	bic.w	r3, r3, #3
 8002d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a1d      	ldr	r2, [pc, #116]	@ (8002df0 <TIM_OC3_SetConfig+0xd0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d10d      	bne.n	8002d9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	021b      	lsls	r3, r3, #8
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a14      	ldr	r2, [pc, #80]	@ (8002df0 <TIM_OC3_SetConfig+0xd0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d113      	bne.n	8002dca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	621a      	str	r2, [r3, #32]
}
 8002de4:	bf00      	nop
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40012c00 	.word	0x40012c00

08002df4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	031b      	lsls	r3, r3, #12
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a0f      	ldr	r2, [pc, #60]	@ (8002e8c <TIM_OC4_SetConfig+0x98>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d109      	bne.n	8002e68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	019b      	lsls	r3, r3, #6
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	621a      	str	r2, [r3, #32]
}
 8002e82:	bf00      	nop
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr
 8002e8c:	40012c00 	.word	0x40012c00

08002e90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a1a      	ldr	r2, [r3, #32]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a1a      	ldr	r2, [r3, #32]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	621a      	str	r2, [r3, #32]
}
 8002ece:	bf00      	nop
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e041      	b.n	8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a14      	ldr	r2, [pc, #80]	@ (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d009      	beq.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f3c:	d004      	beq.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a10      	ldr	r2, [pc, #64]	@ (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d10c      	bne.n	8002f62 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40012c00 	.word	0x40012c00
 8002f84:	40000400 	.word	0x40000400

08002f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr

08002f9a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e042      	b.n	8003044 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fd ff7c 	bl	8000ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2224      	movs	r2, #36	@ 0x24
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fdc3 	bl	8003b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	@ 0x28
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b20      	cmp	r3, #32
 800306a:	f040 8081 	bne.w	8003170 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HAL_UART_Receive+0x2e>
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e079      	b.n	8003172 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2222      	movs	r2, #34	@ 0x22
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003092:	f7fe fa4b 	bl	800152c <HAL_GetTick>
 8003096:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	88fa      	ldrh	r2, [r7, #6]
 800309c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	88fa      	ldrh	r2, [r7, #6]
 80030a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ac:	d108      	bne.n	80030c0 <HAL_UART_Receive+0x74>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d104      	bne.n	80030c0 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	e003      	b.n	80030c8 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80030c8:	e047      	b.n	800315a <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2200      	movs	r2, #0
 80030d2:	2120      	movs	r1, #32
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fb24 	bl	8003722 <UART_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e042      	b.n	8003172 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10c      	bne.n	800310c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030fe:	b29a      	uxth	r2, r3
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	3302      	adds	r3, #2
 8003108:	61bb      	str	r3, [r7, #24]
 800310a:	e01f      	b.n	800314c <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003114:	d007      	beq.n	8003126 <HAL_UART_Receive+0xda>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10a      	bne.n	8003134 <HAL_UART_Receive+0xe8>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	e008      	b.n	8003146 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003140:	b2da      	uxtb	r2, r3
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	3301      	adds	r3, #1
 800314a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1b2      	bne.n	80030ca <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	e000      	b.n	8003172 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003170:	2302      	movs	r3, #2
  }
}
 8003172:	4618      	mov	r0, r3
 8003174:	3720      	adds	r7, #32
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	4613      	mov	r3, r2
 8003186:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b20      	cmp	r3, #32
 8003192:	d112      	bne.n	80031ba <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_UART_Receive_IT+0x26>
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e00b      	b.n	80031bc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	461a      	mov	r2, r3
 80031ae:	68b9      	ldr	r1, [r7, #8]
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 fb0f 	bl	80037d4 <UART_Start_Receive_IT>
 80031b6:	4603      	mov	r3, r0
 80031b8:	e000      	b.n	80031bc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
  }
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b0ba      	sub	sp, #232	@ 0xe8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10f      	bne.n	800322a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800320a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_UART_IRQHandler+0x66>
 8003216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fbec 	bl	8003a00 <UART_Receive_IT>
      return;
 8003228:	e25b      	b.n	80036e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800322a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 80de 	beq.w	80033f0 <HAL_UART_IRQHandler+0x22c>
 8003234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d106      	bne.n	800324e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003244:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80d1 	beq.w	80033f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800324e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00b      	beq.n	8003272 <HAL_UART_IRQHandler+0xae>
 800325a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800325e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003262:	2b00      	cmp	r3, #0
 8003264:	d005      	beq.n	8003272 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326a:	f043 0201 	orr.w	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <HAL_UART_IRQHandler+0xd2>
 800327e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328e:	f043 0202 	orr.w	r2, r3, #2
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00b      	beq.n	80032ba <HAL_UART_IRQHandler+0xf6>
 80032a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d005      	beq.n	80032ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b2:	f043 0204 	orr.w	r2, r3, #4
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d011      	beq.n	80032ea <HAL_UART_IRQHandler+0x126>
 80032c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d105      	bne.n	80032de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d005      	beq.n	80032ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e2:	f043 0208 	orr.w	r2, r3, #8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 81f2 	beq.w	80036d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_UART_IRQHandler+0x14e>
 8003300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fb77 	bl	8003a00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	bf14      	ite	ne
 8003320:	2301      	movne	r3, #1
 8003322:	2300      	moveq	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d103      	bne.n	800333e <HAL_UART_IRQHandler+0x17a>
 8003336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800333a:	2b00      	cmp	r3, #0
 800333c:	d04f      	beq.n	80033de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fa81 	bl	8003846 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d041      	beq.n	80033d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3314      	adds	r3, #20
 8003358:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003360:	e853 3f00 	ldrex	r3, [r3]
 8003364:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003368:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800336c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003370:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3314      	adds	r3, #20
 800337a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800337e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003382:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003386:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800338a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800338e:	e841 2300 	strex	r3, r2, [r1]
 8003392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1d9      	bne.n	8003352 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d013      	beq.n	80033ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033aa:	4a7e      	ldr	r2, [pc, #504]	@ (80035a4 <HAL_UART_IRQHandler+0x3e0>)
 80033ac:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fa0c 	bl	80017d0 <HAL_DMA_Abort_IT>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d016      	beq.n	80033ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033c8:	4610      	mov	r0, r2
 80033ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033cc:	e00e      	b.n	80033ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f993 	bl	80036fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d4:	e00a      	b.n	80033ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f98f 	bl	80036fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033dc:	e006      	b.n	80033ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f98b 	bl	80036fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80033ea:	e175      	b.n	80036d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ec:	bf00      	nop
    return;
 80033ee:	e173      	b.n	80036d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	f040 814f 	bne.w	8003698 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 8148 	beq.w	8003698 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 8141 	beq.w	8003698 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003416:	2300      	movs	r3, #0
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80b6 	beq.w	80035a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003448:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 8145 	beq.w	80036dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800345a:	429a      	cmp	r2, r3
 800345c:	f080 813e 	bcs.w	80036dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003466:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b20      	cmp	r3, #32
 8003470:	f000 8088 	beq.w	8003584 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	330c      	adds	r3, #12
 800347a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003482:	e853 3f00 	ldrex	r3, [r3]
 8003486:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800348a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800348e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003492:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	330c      	adds	r3, #12
 800349c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80034a0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034b0:	e841 2300 	strex	r3, r2, [r1]
 80034b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80034b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1d9      	bne.n	8003474 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3314      	adds	r3, #20
 80034c6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034ca:	e853 3f00 	ldrex	r3, [r3]
 80034ce:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80034d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034d2:	f023 0301 	bic.w	r3, r3, #1
 80034d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3314      	adds	r3, #20
 80034e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034e4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80034e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80034ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80034f0:	e841 2300 	strex	r3, r2, [r1]
 80034f4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80034f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1e1      	bne.n	80034c0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3314      	adds	r3, #20
 8003502:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003504:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003506:	e853 3f00 	ldrex	r3, [r3]
 800350a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800350c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800350e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003512:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3314      	adds	r3, #20
 800351c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003520:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003522:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003526:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800352e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e3      	bne.n	80034fc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	330c      	adds	r3, #12
 8003548:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800354c:	e853 3f00 	ldrex	r3, [r3]
 8003550:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003554:	f023 0310 	bic.w	r3, r3, #16
 8003558:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	330c      	adds	r3, #12
 8003562:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003566:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003568:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800356c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003574:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e3      	bne.n	8003542 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800357e:	4618      	mov	r0, r3
 8003580:	f7fe f8eb 	bl	800175a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003592:	b29b      	uxth	r3, r3
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	b29b      	uxth	r3, r3
 8003598:	4619      	mov	r1, r3
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f8b6 	bl	800370c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035a0:	e09c      	b.n	80036dc <HAL_UART_IRQHandler+0x518>
 80035a2:	bf00      	nop
 80035a4:	0800390b 	.word	0x0800390b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 808e 	beq.w	80036e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80035c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 8089 	beq.w	80036e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	330c      	adds	r3, #12
 80035d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	330c      	adds	r3, #12
 80035ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80035f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80035f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035fa:	e841 2300 	strex	r3, r2, [r1]
 80035fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1e3      	bne.n	80035ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3314      	adds	r3, #20
 800360c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	e853 3f00 	ldrex	r3, [r3]
 8003614:	623b      	str	r3, [r7, #32]
   return(result);
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	f023 0301 	bic.w	r3, r3, #1
 800361c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3314      	adds	r3, #20
 8003626:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800362a:	633a      	str	r2, [r7, #48]	@ 0x30
 800362c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003630:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1e3      	bne.n	8003606 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	330c      	adds	r3, #12
 8003652:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	60fb      	str	r3, [r7, #12]
   return(result);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0310 	bic.w	r3, r3, #16
 8003662:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	330c      	adds	r3, #12
 800366c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003670:	61fa      	str	r2, [r7, #28]
 8003672:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	69b9      	ldr	r1, [r7, #24]
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	e841 2300 	strex	r3, r2, [r1]
 800367c:	617b      	str	r3, [r7, #20]
   return(result);
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e3      	bne.n	800364c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800368a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800368e:	4619      	mov	r1, r3
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f83b 	bl	800370c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003696:	e023      	b.n	80036e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800369c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d009      	beq.n	80036b8 <HAL_UART_IRQHandler+0x4f4>
 80036a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f93e 	bl	8003932 <UART_Transmit_IT>
    return;
 80036b6:	e014      	b.n	80036e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00e      	beq.n	80036e2 <HAL_UART_IRQHandler+0x51e>
 80036c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f97d 	bl	80039d0 <UART_EndTransmit_IT>
    return;
 80036d6:	e004      	b.n	80036e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80036d8:	bf00      	nop
 80036da:	e002      	b.n	80036e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80036dc:	bf00      	nop
 80036de:	e000      	b.n	80036e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80036e0:	bf00      	nop
  }
}
 80036e2:	37e8      	adds	r7, #232	@ 0xe8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr

080036fa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr

08003722 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b086      	sub	sp, #24
 8003726:	af00      	add	r7, sp, #0
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	603b      	str	r3, [r7, #0]
 800372e:	4613      	mov	r3, r2
 8003730:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003732:	e03b      	b.n	80037ac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373a:	d037      	beq.n	80037ac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373c:	f7fd fef6 	bl	800152c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	6a3a      	ldr	r2, [r7, #32]
 8003748:	429a      	cmp	r2, r3
 800374a:	d302      	bcc.n	8003752 <UART_WaitOnFlagUntilTimeout+0x30>
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e03a      	b.n	80037cc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d023      	beq.n	80037ac <UART_WaitOnFlagUntilTimeout+0x8a>
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b80      	cmp	r3, #128	@ 0x80
 8003768:	d020      	beq.n	80037ac <UART_WaitOnFlagUntilTimeout+0x8a>
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b40      	cmp	r3, #64	@ 0x40
 800376e:	d01d      	beq.n	80037ac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b08      	cmp	r3, #8
 800377c:	d116      	bne.n	80037ac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f856 	bl	8003846 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2208      	movs	r2, #8
 800379e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e00f      	b.n	80037cc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4013      	ands	r3, r2
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	461a      	mov	r2, r3
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d0b4      	beq.n	8003734 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	88fa      	ldrh	r2, [r7, #6]
 80037ec:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	88fa      	ldrh	r2, [r7, #6]
 80037f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2222      	movs	r2, #34	@ 0x22
 80037fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003818:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0201 	orr.w	r2, r2, #1
 8003828:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 0220 	orr.w	r2, r2, #32
 8003838:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr

08003846 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003846:	b480      	push	{r7}
 8003848:	b095      	sub	sp, #84	@ 0x54
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	330c      	adds	r3, #12
 8003854:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003858:	e853 3f00 	ldrex	r3, [r3]
 800385c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800385e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003860:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003864:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	330c      	adds	r3, #12
 800386c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800386e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003870:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003874:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800387c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e5      	bne.n	800384e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3314      	adds	r3, #20
 8003888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	61fb      	str	r3, [r7, #28]
   return(result);
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3314      	adds	r3, #20
 80038a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1e5      	bne.n	8003882 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d119      	bne.n	80038f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	330c      	adds	r3, #12
 80038c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	e853 3f00 	ldrex	r3, [r3]
 80038cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f023 0310 	bic.w	r3, r3, #16
 80038d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	330c      	adds	r3, #12
 80038dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038de:	61ba      	str	r2, [r7, #24]
 80038e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e2:	6979      	ldr	r1, [r7, #20]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	e841 2300 	strex	r3, r2, [r1]
 80038ea:	613b      	str	r3, [r7, #16]
   return(result);
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1e5      	bne.n	80038be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003900:	bf00      	nop
 8003902:	3754      	adds	r7, #84	@ 0x54
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr

0800390a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b084      	sub	sp, #16
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f7ff fee8 	bl	80036fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003932:	b480      	push	{r7}
 8003934:	b085      	sub	sp, #20
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b21      	cmp	r3, #33	@ 0x21
 8003944:	d13e      	bne.n	80039c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800394e:	d114      	bne.n	800397a <UART_Transmit_IT+0x48>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d110      	bne.n	800397a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800396c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	1c9a      	adds	r2, r3, #2
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	621a      	str	r2, [r3, #32]
 8003978:	e008      	b.n	800398c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	1c59      	adds	r1, r3, #1
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6211      	str	r1, [r2, #32]
 8003984:	781a      	ldrb	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29b      	uxth	r3, r3
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	4619      	mov	r1, r3
 800399a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10f      	bne.n	80039c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	e000      	b.n	80039c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039c4:	2302      	movs	r3, #2
  }
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr

080039d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff fe79 	bl	80036e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08c      	sub	sp, #48	@ 0x30
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b22      	cmp	r3, #34	@ 0x22
 8003a12:	f040 80ae 	bne.w	8003b72 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a1e:	d117      	bne.n	8003a50 <UART_Receive_IT+0x50>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d113      	bne.n	8003a50 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a30:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a48:	1c9a      	adds	r2, r3, #2
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a4e:	e026      	b.n	8003a9e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a62:	d007      	beq.n	8003a74 <UART_Receive_IT+0x74>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <UART_Receive_IT+0x82>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	e008      	b.n	8003a94 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a92:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d15d      	bne.n	8003b6e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68da      	ldr	r2, [r3, #12]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0220 	bic.w	r2, r2, #32
 8003ac0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ad0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d135      	bne.n	8003b64 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	330c      	adds	r3, #12
 8003b04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f023 0310 	bic.w	r3, r3, #16
 8003b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	330c      	adds	r3, #12
 8003b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b1e:	623a      	str	r2, [r7, #32]
 8003b20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	69f9      	ldr	r1, [r7, #28]
 8003b24:	6a3a      	ldr	r2, [r7, #32]
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e5      	bne.n	8003afe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d10a      	bne.n	8003b56 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff fdd5 	bl	800370c <HAL_UARTEx_RxEventCallback>
 8003b62:	e002      	b.n	8003b6a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7fc ffa3 	bl	8000ab0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e002      	b.n	8003b74 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e000      	b.n	8003b74 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b72:	2302      	movs	r3, #2
  }
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3730      	adds	r7, #48	@ 0x30
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003bb6:	f023 030c 	bic.w	r3, r3, #12
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a2c      	ldr	r2, [pc, #176]	@ (8003c90 <UART_SetConfig+0x114>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d103      	bne.n	8003bec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003be4:	f7fe fbf8 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	e002      	b.n	8003bf2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bec:	f7fe fbe0 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 8003bf0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009a      	lsls	r2, r3, #2
 8003bfc:	441a      	add	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	4a22      	ldr	r2, [pc, #136]	@ (8003c94 <UART_SetConfig+0x118>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	0119      	lsls	r1, r3, #4
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	009a      	lsls	r2, r3, #2
 8003c1c:	441a      	add	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c28:	4b1a      	ldr	r3, [pc, #104]	@ (8003c94 <UART_SetConfig+0x118>)
 8003c2a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	2064      	movs	r0, #100	@ 0x64
 8003c32:	fb00 f303 	mul.w	r3, r0, r3
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	3332      	adds	r3, #50	@ 0x32
 8003c3c:	4a15      	ldr	r2, [pc, #84]	@ (8003c94 <UART_SetConfig+0x118>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c48:	4419      	add	r1, r3
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	009a      	lsls	r2, r3, #2
 8003c54:	441a      	add	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c60:	4b0c      	ldr	r3, [pc, #48]	@ (8003c94 <UART_SetConfig+0x118>)
 8003c62:	fba3 0302 	umull	r0, r3, r3, r2
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	2064      	movs	r0, #100	@ 0x64
 8003c6a:	fb00 f303 	mul.w	r3, r0, r3
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	3332      	adds	r3, #50	@ 0x32
 8003c74:	4a07      	ldr	r2, [pc, #28]	@ (8003c94 <UART_SetConfig+0x118>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	f003 020f 	and.w	r2, r3, #15
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	440a      	add	r2, r1
 8003c86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c88:	bf00      	nop
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40013800 	.word	0x40013800
 8003c94:	51eb851f 	.word	0x51eb851f

08003c98 <atoi>:
 8003c98:	220a      	movs	r2, #10
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	f000 b96e 	b.w	8003f7c <strtol>

08003ca0 <malloc>:
 8003ca0:	4b02      	ldr	r3, [pc, #8]	@ (8003cac <malloc+0xc>)
 8003ca2:	4601      	mov	r1, r0
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	f000 b82d 	b.w	8003d04 <_malloc_r>
 8003caa:	bf00      	nop
 8003cac:	20000018 	.word	0x20000018

08003cb0 <free>:
 8003cb0:	4b02      	ldr	r3, [pc, #8]	@ (8003cbc <free+0xc>)
 8003cb2:	4601      	mov	r1, r0
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	f000 bb8d 	b.w	80043d4 <_free_r>
 8003cba:	bf00      	nop
 8003cbc:	20000018 	.word	0x20000018

08003cc0 <sbrk_aligned>:
 8003cc0:	b570      	push	{r4, r5, r6, lr}
 8003cc2:	4e0f      	ldr	r6, [pc, #60]	@ (8003d00 <sbrk_aligned+0x40>)
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	6831      	ldr	r1, [r6, #0]
 8003cc8:	4605      	mov	r5, r0
 8003cca:	b911      	cbnz	r1, 8003cd2 <sbrk_aligned+0x12>
 8003ccc:	f000 fafe 	bl	80042cc <_sbrk_r>
 8003cd0:	6030      	str	r0, [r6, #0]
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	f000 faf9 	bl	80042cc <_sbrk_r>
 8003cda:	1c43      	adds	r3, r0, #1
 8003cdc:	d103      	bne.n	8003ce6 <sbrk_aligned+0x26>
 8003cde:	f04f 34ff 	mov.w	r4, #4294967295
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	bd70      	pop	{r4, r5, r6, pc}
 8003ce6:	1cc4      	adds	r4, r0, #3
 8003ce8:	f024 0403 	bic.w	r4, r4, #3
 8003cec:	42a0      	cmp	r0, r4
 8003cee:	d0f8      	beq.n	8003ce2 <sbrk_aligned+0x22>
 8003cf0:	1a21      	subs	r1, r4, r0
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	f000 faea 	bl	80042cc <_sbrk_r>
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	d1f2      	bne.n	8003ce2 <sbrk_aligned+0x22>
 8003cfc:	e7ef      	b.n	8003cde <sbrk_aligned+0x1e>
 8003cfe:	bf00      	nop
 8003d00:	200001bc 	.word	0x200001bc

08003d04 <_malloc_r>:
 8003d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d08:	1ccd      	adds	r5, r1, #3
 8003d0a:	f025 0503 	bic.w	r5, r5, #3
 8003d0e:	3508      	adds	r5, #8
 8003d10:	2d0c      	cmp	r5, #12
 8003d12:	bf38      	it	cc
 8003d14:	250c      	movcc	r5, #12
 8003d16:	2d00      	cmp	r5, #0
 8003d18:	4606      	mov	r6, r0
 8003d1a:	db01      	blt.n	8003d20 <_malloc_r+0x1c>
 8003d1c:	42a9      	cmp	r1, r5
 8003d1e:	d904      	bls.n	8003d2a <_malloc_r+0x26>
 8003d20:	230c      	movs	r3, #12
 8003d22:	6033      	str	r3, [r6, #0]
 8003d24:	2000      	movs	r0, #0
 8003d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e00 <_malloc_r+0xfc>
 8003d2e:	f000 f869 	bl	8003e04 <__malloc_lock>
 8003d32:	f8d8 3000 	ldr.w	r3, [r8]
 8003d36:	461c      	mov	r4, r3
 8003d38:	bb44      	cbnz	r4, 8003d8c <_malloc_r+0x88>
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	f7ff ffbf 	bl	8003cc0 <sbrk_aligned>
 8003d42:	1c43      	adds	r3, r0, #1
 8003d44:	4604      	mov	r4, r0
 8003d46:	d158      	bne.n	8003dfa <_malloc_r+0xf6>
 8003d48:	f8d8 4000 	ldr.w	r4, [r8]
 8003d4c:	4627      	mov	r7, r4
 8003d4e:	2f00      	cmp	r7, #0
 8003d50:	d143      	bne.n	8003dda <_malloc_r+0xd6>
 8003d52:	2c00      	cmp	r4, #0
 8003d54:	d04b      	beq.n	8003dee <_malloc_r+0xea>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	4639      	mov	r1, r7
 8003d5a:	4630      	mov	r0, r6
 8003d5c:	eb04 0903 	add.w	r9, r4, r3
 8003d60:	f000 fab4 	bl	80042cc <_sbrk_r>
 8003d64:	4581      	cmp	r9, r0
 8003d66:	d142      	bne.n	8003dee <_malloc_r+0xea>
 8003d68:	6821      	ldr	r1, [r4, #0]
 8003d6a:	4630      	mov	r0, r6
 8003d6c:	1a6d      	subs	r5, r5, r1
 8003d6e:	4629      	mov	r1, r5
 8003d70:	f7ff ffa6 	bl	8003cc0 <sbrk_aligned>
 8003d74:	3001      	adds	r0, #1
 8003d76:	d03a      	beq.n	8003dee <_malloc_r+0xea>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	442b      	add	r3, r5
 8003d7c:	6023      	str	r3, [r4, #0]
 8003d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	bb62      	cbnz	r2, 8003de0 <_malloc_r+0xdc>
 8003d86:	f8c8 7000 	str.w	r7, [r8]
 8003d8a:	e00f      	b.n	8003dac <_malloc_r+0xa8>
 8003d8c:	6822      	ldr	r2, [r4, #0]
 8003d8e:	1b52      	subs	r2, r2, r5
 8003d90:	d420      	bmi.n	8003dd4 <_malloc_r+0xd0>
 8003d92:	2a0b      	cmp	r2, #11
 8003d94:	d917      	bls.n	8003dc6 <_malloc_r+0xc2>
 8003d96:	1961      	adds	r1, r4, r5
 8003d98:	42a3      	cmp	r3, r4
 8003d9a:	6025      	str	r5, [r4, #0]
 8003d9c:	bf18      	it	ne
 8003d9e:	6059      	strne	r1, [r3, #4]
 8003da0:	6863      	ldr	r3, [r4, #4]
 8003da2:	bf08      	it	eq
 8003da4:	f8c8 1000 	streq.w	r1, [r8]
 8003da8:	5162      	str	r2, [r4, r5]
 8003daa:	604b      	str	r3, [r1, #4]
 8003dac:	4630      	mov	r0, r6
 8003dae:	f000 f82f 	bl	8003e10 <__malloc_unlock>
 8003db2:	f104 000b 	add.w	r0, r4, #11
 8003db6:	1d23      	adds	r3, r4, #4
 8003db8:	f020 0007 	bic.w	r0, r0, #7
 8003dbc:	1ac2      	subs	r2, r0, r3
 8003dbe:	bf1c      	itt	ne
 8003dc0:	1a1b      	subne	r3, r3, r0
 8003dc2:	50a3      	strne	r3, [r4, r2]
 8003dc4:	e7af      	b.n	8003d26 <_malloc_r+0x22>
 8003dc6:	6862      	ldr	r2, [r4, #4]
 8003dc8:	42a3      	cmp	r3, r4
 8003dca:	bf0c      	ite	eq
 8003dcc:	f8c8 2000 	streq.w	r2, [r8]
 8003dd0:	605a      	strne	r2, [r3, #4]
 8003dd2:	e7eb      	b.n	8003dac <_malloc_r+0xa8>
 8003dd4:	4623      	mov	r3, r4
 8003dd6:	6864      	ldr	r4, [r4, #4]
 8003dd8:	e7ae      	b.n	8003d38 <_malloc_r+0x34>
 8003dda:	463c      	mov	r4, r7
 8003ddc:	687f      	ldr	r7, [r7, #4]
 8003dde:	e7b6      	b.n	8003d4e <_malloc_r+0x4a>
 8003de0:	461a      	mov	r2, r3
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	42a3      	cmp	r3, r4
 8003de6:	d1fb      	bne.n	8003de0 <_malloc_r+0xdc>
 8003de8:	2300      	movs	r3, #0
 8003dea:	6053      	str	r3, [r2, #4]
 8003dec:	e7de      	b.n	8003dac <_malloc_r+0xa8>
 8003dee:	230c      	movs	r3, #12
 8003df0:	4630      	mov	r0, r6
 8003df2:	6033      	str	r3, [r6, #0]
 8003df4:	f000 f80c 	bl	8003e10 <__malloc_unlock>
 8003df8:	e794      	b.n	8003d24 <_malloc_r+0x20>
 8003dfa:	6005      	str	r5, [r0, #0]
 8003dfc:	e7d6      	b.n	8003dac <_malloc_r+0xa8>
 8003dfe:	bf00      	nop
 8003e00:	200001c0 	.word	0x200001c0

08003e04 <__malloc_lock>:
 8003e04:	4801      	ldr	r0, [pc, #4]	@ (8003e0c <__malloc_lock+0x8>)
 8003e06:	f000 baae 	b.w	8004366 <__retarget_lock_acquire_recursive>
 8003e0a:	bf00      	nop
 8003e0c:	20000304 	.word	0x20000304

08003e10 <__malloc_unlock>:
 8003e10:	4801      	ldr	r0, [pc, #4]	@ (8003e18 <__malloc_unlock+0x8>)
 8003e12:	f000 baa9 	b.w	8004368 <__retarget_lock_release_recursive>
 8003e16:	bf00      	nop
 8003e18:	20000304 	.word	0x20000304

08003e1c <realloc>:
 8003e1c:	4b02      	ldr	r3, [pc, #8]	@ (8003e28 <realloc+0xc>)
 8003e1e:	460a      	mov	r2, r1
 8003e20:	4601      	mov	r1, r0
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	f000 b802 	b.w	8003e2c <_realloc_r>
 8003e28:	20000018 	.word	0x20000018

08003e2c <_realloc_r>:
 8003e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e30:	4680      	mov	r8, r0
 8003e32:	4615      	mov	r5, r2
 8003e34:	460c      	mov	r4, r1
 8003e36:	b921      	cbnz	r1, 8003e42 <_realloc_r+0x16>
 8003e38:	4611      	mov	r1, r2
 8003e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3e:	f7ff bf61 	b.w	8003d04 <_malloc_r>
 8003e42:	b92a      	cbnz	r2, 8003e50 <_realloc_r+0x24>
 8003e44:	f000 fac6 	bl	80043d4 <_free_r>
 8003e48:	2400      	movs	r4, #0
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e50:	f000 fb08 	bl	8004464 <_malloc_usable_size_r>
 8003e54:	4285      	cmp	r5, r0
 8003e56:	4606      	mov	r6, r0
 8003e58:	d802      	bhi.n	8003e60 <_realloc_r+0x34>
 8003e5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003e5e:	d8f4      	bhi.n	8003e4a <_realloc_r+0x1e>
 8003e60:	4629      	mov	r1, r5
 8003e62:	4640      	mov	r0, r8
 8003e64:	f7ff ff4e 	bl	8003d04 <_malloc_r>
 8003e68:	4607      	mov	r7, r0
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d0ec      	beq.n	8003e48 <_realloc_r+0x1c>
 8003e6e:	42b5      	cmp	r5, r6
 8003e70:	462a      	mov	r2, r5
 8003e72:	4621      	mov	r1, r4
 8003e74:	bf28      	it	cs
 8003e76:	4632      	movcs	r2, r6
 8003e78:	f000 fa7f 	bl	800437a <memcpy>
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	4640      	mov	r0, r8
 8003e80:	f000 faa8 	bl	80043d4 <_free_r>
 8003e84:	463c      	mov	r4, r7
 8003e86:	e7e0      	b.n	8003e4a <_realloc_r+0x1e>

08003e88 <_strtol_l.constprop.0>:
 8003e88:	2b24      	cmp	r3, #36	@ 0x24
 8003e8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e8e:	4686      	mov	lr, r0
 8003e90:	4690      	mov	r8, r2
 8003e92:	d801      	bhi.n	8003e98 <_strtol_l.constprop.0+0x10>
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d106      	bne.n	8003ea6 <_strtol_l.constprop.0+0x1e>
 8003e98:	f000 fa3a 	bl	8004310 <__errno>
 8003e9c:	2316      	movs	r3, #22
 8003e9e:	6003      	str	r3, [r0, #0]
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea6:	460d      	mov	r5, r1
 8003ea8:	4833      	ldr	r0, [pc, #204]	@ (8003f78 <_strtol_l.constprop.0+0xf0>)
 8003eaa:	462a      	mov	r2, r5
 8003eac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003eb0:	5d06      	ldrb	r6, [r0, r4]
 8003eb2:	f016 0608 	ands.w	r6, r6, #8
 8003eb6:	d1f8      	bne.n	8003eaa <_strtol_l.constprop.0+0x22>
 8003eb8:	2c2d      	cmp	r4, #45	@ 0x2d
 8003eba:	d12d      	bne.n	8003f18 <_strtol_l.constprop.0+0x90>
 8003ebc:	2601      	movs	r6, #1
 8003ebe:	782c      	ldrb	r4, [r5, #0]
 8003ec0:	1c95      	adds	r5, r2, #2
 8003ec2:	f033 0210 	bics.w	r2, r3, #16
 8003ec6:	d109      	bne.n	8003edc <_strtol_l.constprop.0+0x54>
 8003ec8:	2c30      	cmp	r4, #48	@ 0x30
 8003eca:	d12a      	bne.n	8003f22 <_strtol_l.constprop.0+0x9a>
 8003ecc:	782a      	ldrb	r2, [r5, #0]
 8003ece:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003ed2:	2a58      	cmp	r2, #88	@ 0x58
 8003ed4:	d125      	bne.n	8003f22 <_strtol_l.constprop.0+0x9a>
 8003ed6:	2310      	movs	r3, #16
 8003ed8:	786c      	ldrb	r4, [r5, #1]
 8003eda:	3502      	adds	r5, #2
 8003edc:	2200      	movs	r2, #0
 8003ede:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003ee2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003ee6:	fbbc f9f3 	udiv	r9, ip, r3
 8003eea:	4610      	mov	r0, r2
 8003eec:	fb03 ca19 	mls	sl, r3, r9, ip
 8003ef0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003ef4:	2f09      	cmp	r7, #9
 8003ef6:	d81b      	bhi.n	8003f30 <_strtol_l.constprop.0+0xa8>
 8003ef8:	463c      	mov	r4, r7
 8003efa:	42a3      	cmp	r3, r4
 8003efc:	dd27      	ble.n	8003f4e <_strtol_l.constprop.0+0xc6>
 8003efe:	1c57      	adds	r7, r2, #1
 8003f00:	d007      	beq.n	8003f12 <_strtol_l.constprop.0+0x8a>
 8003f02:	4581      	cmp	r9, r0
 8003f04:	d320      	bcc.n	8003f48 <_strtol_l.constprop.0+0xc0>
 8003f06:	d101      	bne.n	8003f0c <_strtol_l.constprop.0+0x84>
 8003f08:	45a2      	cmp	sl, r4
 8003f0a:	db1d      	blt.n	8003f48 <_strtol_l.constprop.0+0xc0>
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	fb00 4003 	mla	r0, r0, r3, r4
 8003f12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f16:	e7eb      	b.n	8003ef0 <_strtol_l.constprop.0+0x68>
 8003f18:	2c2b      	cmp	r4, #43	@ 0x2b
 8003f1a:	bf04      	itt	eq
 8003f1c:	782c      	ldrbeq	r4, [r5, #0]
 8003f1e:	1c95      	addeq	r5, r2, #2
 8003f20:	e7cf      	b.n	8003ec2 <_strtol_l.constprop.0+0x3a>
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1da      	bne.n	8003edc <_strtol_l.constprop.0+0x54>
 8003f26:	2c30      	cmp	r4, #48	@ 0x30
 8003f28:	bf0c      	ite	eq
 8003f2a:	2308      	moveq	r3, #8
 8003f2c:	230a      	movne	r3, #10
 8003f2e:	e7d5      	b.n	8003edc <_strtol_l.constprop.0+0x54>
 8003f30:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003f34:	2f19      	cmp	r7, #25
 8003f36:	d801      	bhi.n	8003f3c <_strtol_l.constprop.0+0xb4>
 8003f38:	3c37      	subs	r4, #55	@ 0x37
 8003f3a:	e7de      	b.n	8003efa <_strtol_l.constprop.0+0x72>
 8003f3c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003f40:	2f19      	cmp	r7, #25
 8003f42:	d804      	bhi.n	8003f4e <_strtol_l.constprop.0+0xc6>
 8003f44:	3c57      	subs	r4, #87	@ 0x57
 8003f46:	e7d8      	b.n	8003efa <_strtol_l.constprop.0+0x72>
 8003f48:	f04f 32ff 	mov.w	r2, #4294967295
 8003f4c:	e7e1      	b.n	8003f12 <_strtol_l.constprop.0+0x8a>
 8003f4e:	1c53      	adds	r3, r2, #1
 8003f50:	d108      	bne.n	8003f64 <_strtol_l.constprop.0+0xdc>
 8003f52:	2322      	movs	r3, #34	@ 0x22
 8003f54:	4660      	mov	r0, ip
 8003f56:	f8ce 3000 	str.w	r3, [lr]
 8003f5a:	f1b8 0f00 	cmp.w	r8, #0
 8003f5e:	d0a0      	beq.n	8003ea2 <_strtol_l.constprop.0+0x1a>
 8003f60:	1e69      	subs	r1, r5, #1
 8003f62:	e006      	b.n	8003f72 <_strtol_l.constprop.0+0xea>
 8003f64:	b106      	cbz	r6, 8003f68 <_strtol_l.constprop.0+0xe0>
 8003f66:	4240      	negs	r0, r0
 8003f68:	f1b8 0f00 	cmp.w	r8, #0
 8003f6c:	d099      	beq.n	8003ea2 <_strtol_l.constprop.0+0x1a>
 8003f6e:	2a00      	cmp	r2, #0
 8003f70:	d1f6      	bne.n	8003f60 <_strtol_l.constprop.0+0xd8>
 8003f72:	f8c8 1000 	str.w	r1, [r8]
 8003f76:	e794      	b.n	8003ea2 <_strtol_l.constprop.0+0x1a>
 8003f78:	08004ee3 	.word	0x08004ee3

08003f7c <strtol>:
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	460a      	mov	r2, r1
 8003f80:	4601      	mov	r1, r0
 8003f82:	4802      	ldr	r0, [pc, #8]	@ (8003f8c <strtol+0x10>)
 8003f84:	6800      	ldr	r0, [r0, #0]
 8003f86:	f7ff bf7f 	b.w	8003e88 <_strtol_l.constprop.0>
 8003f8a:	bf00      	nop
 8003f8c:	20000018 	.word	0x20000018

08003f90 <std>:
 8003f90:	2300      	movs	r3, #0
 8003f92:	b510      	push	{r4, lr}
 8003f94:	4604      	mov	r4, r0
 8003f96:	e9c0 3300 	strd	r3, r3, [r0]
 8003f9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f9e:	6083      	str	r3, [r0, #8]
 8003fa0:	8181      	strh	r1, [r0, #12]
 8003fa2:	6643      	str	r3, [r0, #100]	@ 0x64
 8003fa4:	81c2      	strh	r2, [r0, #14]
 8003fa6:	6183      	str	r3, [r0, #24]
 8003fa8:	4619      	mov	r1, r3
 8003faa:	2208      	movs	r2, #8
 8003fac:	305c      	adds	r0, #92	@ 0x5c
 8003fae:	f000 f8f4 	bl	800419a <memset>
 8003fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe8 <std+0x58>)
 8003fb4:	6224      	str	r4, [r4, #32]
 8003fb6:	6263      	str	r3, [r4, #36]	@ 0x24
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003fec <std+0x5c>)
 8003fba:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff0 <std+0x60>)
 8003fbe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff4 <std+0x64>)
 8003fc2:	6323      	str	r3, [r4, #48]	@ 0x30
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff8 <std+0x68>)
 8003fc6:	429c      	cmp	r4, r3
 8003fc8:	d006      	beq.n	8003fd8 <std+0x48>
 8003fca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003fce:	4294      	cmp	r4, r2
 8003fd0:	d002      	beq.n	8003fd8 <std+0x48>
 8003fd2:	33d0      	adds	r3, #208	@ 0xd0
 8003fd4:	429c      	cmp	r4, r3
 8003fd6:	d105      	bne.n	8003fe4 <std+0x54>
 8003fd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fe0:	f000 b9c0 	b.w	8004364 <__retarget_lock_init_recursive>
 8003fe4:	bd10      	pop	{r4, pc}
 8003fe6:	bf00      	nop
 8003fe8:	08004115 	.word	0x08004115
 8003fec:	08004137 	.word	0x08004137
 8003ff0:	0800416f 	.word	0x0800416f
 8003ff4:	08004193 	.word	0x08004193
 8003ff8:	200001c4 	.word	0x200001c4

08003ffc <stdio_exit_handler>:
 8003ffc:	4a02      	ldr	r2, [pc, #8]	@ (8004008 <stdio_exit_handler+0xc>)
 8003ffe:	4903      	ldr	r1, [pc, #12]	@ (800400c <stdio_exit_handler+0x10>)
 8004000:	4803      	ldr	r0, [pc, #12]	@ (8004010 <stdio_exit_handler+0x14>)
 8004002:	f000 b869 	b.w	80040d8 <_fwalk_sglue>
 8004006:	bf00      	nop
 8004008:	2000000c 	.word	0x2000000c
 800400c:	08004575 	.word	0x08004575
 8004010:	2000001c 	.word	0x2000001c

08004014 <cleanup_stdio>:
 8004014:	6841      	ldr	r1, [r0, #4]
 8004016:	4b0c      	ldr	r3, [pc, #48]	@ (8004048 <cleanup_stdio+0x34>)
 8004018:	b510      	push	{r4, lr}
 800401a:	4299      	cmp	r1, r3
 800401c:	4604      	mov	r4, r0
 800401e:	d001      	beq.n	8004024 <cleanup_stdio+0x10>
 8004020:	f000 faa8 	bl	8004574 <_fflush_r>
 8004024:	68a1      	ldr	r1, [r4, #8]
 8004026:	4b09      	ldr	r3, [pc, #36]	@ (800404c <cleanup_stdio+0x38>)
 8004028:	4299      	cmp	r1, r3
 800402a:	d002      	beq.n	8004032 <cleanup_stdio+0x1e>
 800402c:	4620      	mov	r0, r4
 800402e:	f000 faa1 	bl	8004574 <_fflush_r>
 8004032:	68e1      	ldr	r1, [r4, #12]
 8004034:	4b06      	ldr	r3, [pc, #24]	@ (8004050 <cleanup_stdio+0x3c>)
 8004036:	4299      	cmp	r1, r3
 8004038:	d004      	beq.n	8004044 <cleanup_stdio+0x30>
 800403a:	4620      	mov	r0, r4
 800403c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004040:	f000 ba98 	b.w	8004574 <_fflush_r>
 8004044:	bd10      	pop	{r4, pc}
 8004046:	bf00      	nop
 8004048:	200001c4 	.word	0x200001c4
 800404c:	2000022c 	.word	0x2000022c
 8004050:	20000294 	.word	0x20000294

08004054 <global_stdio_init.part.0>:
 8004054:	b510      	push	{r4, lr}
 8004056:	4b0b      	ldr	r3, [pc, #44]	@ (8004084 <global_stdio_init.part.0+0x30>)
 8004058:	4c0b      	ldr	r4, [pc, #44]	@ (8004088 <global_stdio_init.part.0+0x34>)
 800405a:	4a0c      	ldr	r2, [pc, #48]	@ (800408c <global_stdio_init.part.0+0x38>)
 800405c:	4620      	mov	r0, r4
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	2104      	movs	r1, #4
 8004062:	2200      	movs	r2, #0
 8004064:	f7ff ff94 	bl	8003f90 <std>
 8004068:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800406c:	2201      	movs	r2, #1
 800406e:	2109      	movs	r1, #9
 8004070:	f7ff ff8e 	bl	8003f90 <std>
 8004074:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004078:	2202      	movs	r2, #2
 800407a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800407e:	2112      	movs	r1, #18
 8004080:	f7ff bf86 	b.w	8003f90 <std>
 8004084:	200002fc 	.word	0x200002fc
 8004088:	200001c4 	.word	0x200001c4
 800408c:	08003ffd 	.word	0x08003ffd

08004090 <__sfp_lock_acquire>:
 8004090:	4801      	ldr	r0, [pc, #4]	@ (8004098 <__sfp_lock_acquire+0x8>)
 8004092:	f000 b968 	b.w	8004366 <__retarget_lock_acquire_recursive>
 8004096:	bf00      	nop
 8004098:	20000305 	.word	0x20000305

0800409c <__sfp_lock_release>:
 800409c:	4801      	ldr	r0, [pc, #4]	@ (80040a4 <__sfp_lock_release+0x8>)
 800409e:	f000 b963 	b.w	8004368 <__retarget_lock_release_recursive>
 80040a2:	bf00      	nop
 80040a4:	20000305 	.word	0x20000305

080040a8 <__sinit>:
 80040a8:	b510      	push	{r4, lr}
 80040aa:	4604      	mov	r4, r0
 80040ac:	f7ff fff0 	bl	8004090 <__sfp_lock_acquire>
 80040b0:	6a23      	ldr	r3, [r4, #32]
 80040b2:	b11b      	cbz	r3, 80040bc <__sinit+0x14>
 80040b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040b8:	f7ff bff0 	b.w	800409c <__sfp_lock_release>
 80040bc:	4b04      	ldr	r3, [pc, #16]	@ (80040d0 <__sinit+0x28>)
 80040be:	6223      	str	r3, [r4, #32]
 80040c0:	4b04      	ldr	r3, [pc, #16]	@ (80040d4 <__sinit+0x2c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f5      	bne.n	80040b4 <__sinit+0xc>
 80040c8:	f7ff ffc4 	bl	8004054 <global_stdio_init.part.0>
 80040cc:	e7f2      	b.n	80040b4 <__sinit+0xc>
 80040ce:	bf00      	nop
 80040d0:	08004015 	.word	0x08004015
 80040d4:	200002fc 	.word	0x200002fc

080040d8 <_fwalk_sglue>:
 80040d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040dc:	4607      	mov	r7, r0
 80040de:	4688      	mov	r8, r1
 80040e0:	4614      	mov	r4, r2
 80040e2:	2600      	movs	r6, #0
 80040e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040e8:	f1b9 0901 	subs.w	r9, r9, #1
 80040ec:	d505      	bpl.n	80040fa <_fwalk_sglue+0x22>
 80040ee:	6824      	ldr	r4, [r4, #0]
 80040f0:	2c00      	cmp	r4, #0
 80040f2:	d1f7      	bne.n	80040e4 <_fwalk_sglue+0xc>
 80040f4:	4630      	mov	r0, r6
 80040f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040fa:	89ab      	ldrh	r3, [r5, #12]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d907      	bls.n	8004110 <_fwalk_sglue+0x38>
 8004100:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004104:	3301      	adds	r3, #1
 8004106:	d003      	beq.n	8004110 <_fwalk_sglue+0x38>
 8004108:	4629      	mov	r1, r5
 800410a:	4638      	mov	r0, r7
 800410c:	47c0      	blx	r8
 800410e:	4306      	orrs	r6, r0
 8004110:	3568      	adds	r5, #104	@ 0x68
 8004112:	e7e9      	b.n	80040e8 <_fwalk_sglue+0x10>

08004114 <__sread>:
 8004114:	b510      	push	{r4, lr}
 8004116:	460c      	mov	r4, r1
 8004118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800411c:	f000 f8c4 	bl	80042a8 <_read_r>
 8004120:	2800      	cmp	r0, #0
 8004122:	bfab      	itete	ge
 8004124:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004126:	89a3      	ldrhlt	r3, [r4, #12]
 8004128:	181b      	addge	r3, r3, r0
 800412a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800412e:	bfac      	ite	ge
 8004130:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004132:	81a3      	strhlt	r3, [r4, #12]
 8004134:	bd10      	pop	{r4, pc}

08004136 <__swrite>:
 8004136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800413a:	461f      	mov	r7, r3
 800413c:	898b      	ldrh	r3, [r1, #12]
 800413e:	4605      	mov	r5, r0
 8004140:	05db      	lsls	r3, r3, #23
 8004142:	460c      	mov	r4, r1
 8004144:	4616      	mov	r6, r2
 8004146:	d505      	bpl.n	8004154 <__swrite+0x1e>
 8004148:	2302      	movs	r3, #2
 800414a:	2200      	movs	r2, #0
 800414c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004150:	f000 f898 	bl	8004284 <_lseek_r>
 8004154:	89a3      	ldrh	r3, [r4, #12]
 8004156:	4632      	mov	r2, r6
 8004158:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800415c:	81a3      	strh	r3, [r4, #12]
 800415e:	4628      	mov	r0, r5
 8004160:	463b      	mov	r3, r7
 8004162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800416a:	f000 b8bf 	b.w	80042ec <_write_r>

0800416e <__sseek>:
 800416e:	b510      	push	{r4, lr}
 8004170:	460c      	mov	r4, r1
 8004172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004176:	f000 f885 	bl	8004284 <_lseek_r>
 800417a:	1c43      	adds	r3, r0, #1
 800417c:	89a3      	ldrh	r3, [r4, #12]
 800417e:	bf15      	itete	ne
 8004180:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004182:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004186:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800418a:	81a3      	strheq	r3, [r4, #12]
 800418c:	bf18      	it	ne
 800418e:	81a3      	strhne	r3, [r4, #12]
 8004190:	bd10      	pop	{r4, pc}

08004192 <__sclose>:
 8004192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004196:	f000 b865 	b.w	8004264 <_close_r>

0800419a <memset>:
 800419a:	4603      	mov	r3, r0
 800419c:	4402      	add	r2, r0
 800419e:	4293      	cmp	r3, r2
 80041a0:	d100      	bne.n	80041a4 <memset+0xa>
 80041a2:	4770      	bx	lr
 80041a4:	f803 1b01 	strb.w	r1, [r3], #1
 80041a8:	e7f9      	b.n	800419e <memset+0x4>
	...

080041ac <strtok>:
 80041ac:	4b16      	ldr	r3, [pc, #88]	@ (8004208 <strtok+0x5c>)
 80041ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b2:	681f      	ldr	r7, [r3, #0]
 80041b4:	4605      	mov	r5, r0
 80041b6:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80041b8:	460e      	mov	r6, r1
 80041ba:	b9ec      	cbnz	r4, 80041f8 <strtok+0x4c>
 80041bc:	2050      	movs	r0, #80	@ 0x50
 80041be:	f7ff fd6f 	bl	8003ca0 <malloc>
 80041c2:	4602      	mov	r2, r0
 80041c4:	6478      	str	r0, [r7, #68]	@ 0x44
 80041c6:	b920      	cbnz	r0, 80041d2 <strtok+0x26>
 80041c8:	215b      	movs	r1, #91	@ 0x5b
 80041ca:	4b10      	ldr	r3, [pc, #64]	@ (800420c <strtok+0x60>)
 80041cc:	4810      	ldr	r0, [pc, #64]	@ (8004210 <strtok+0x64>)
 80041ce:	f000 f8e3 	bl	8004398 <__assert_func>
 80041d2:	e9c0 4400 	strd	r4, r4, [r0]
 80041d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80041da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80041de:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80041e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80041e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80041ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80041ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80041f2:	6184      	str	r4, [r0, #24]
 80041f4:	7704      	strb	r4, [r0, #28]
 80041f6:	6244      	str	r4, [r0, #36]	@ 0x24
 80041f8:	4631      	mov	r1, r6
 80041fa:	4628      	mov	r0, r5
 80041fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041fe:	2301      	movs	r3, #1
 8004200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004204:	f000 b806 	b.w	8004214 <__strtok_r>
 8004208:	20000018 	.word	0x20000018
 800420c:	08004fe3 	.word	0x08004fe3
 8004210:	08004ffa 	.word	0x08004ffa

08004214 <__strtok_r>:
 8004214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004216:	4604      	mov	r4, r0
 8004218:	b908      	cbnz	r0, 800421e <__strtok_r+0xa>
 800421a:	6814      	ldr	r4, [r2, #0]
 800421c:	b144      	cbz	r4, 8004230 <__strtok_r+0x1c>
 800421e:	460f      	mov	r7, r1
 8004220:	4620      	mov	r0, r4
 8004222:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004226:	f817 6b01 	ldrb.w	r6, [r7], #1
 800422a:	b91e      	cbnz	r6, 8004234 <__strtok_r+0x20>
 800422c:	b965      	cbnz	r5, 8004248 <__strtok_r+0x34>
 800422e:	6015      	str	r5, [r2, #0]
 8004230:	2000      	movs	r0, #0
 8004232:	e005      	b.n	8004240 <__strtok_r+0x2c>
 8004234:	42b5      	cmp	r5, r6
 8004236:	d1f6      	bne.n	8004226 <__strtok_r+0x12>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f0      	bne.n	800421e <__strtok_r+0xa>
 800423c:	6014      	str	r4, [r2, #0]
 800423e:	7003      	strb	r3, [r0, #0]
 8004240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004242:	461c      	mov	r4, r3
 8004244:	e00c      	b.n	8004260 <__strtok_r+0x4c>
 8004246:	b915      	cbnz	r5, 800424e <__strtok_r+0x3a>
 8004248:	460e      	mov	r6, r1
 800424a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800424e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004252:	42ab      	cmp	r3, r5
 8004254:	d1f7      	bne.n	8004246 <__strtok_r+0x32>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0f3      	beq.n	8004242 <__strtok_r+0x2e>
 800425a:	2300      	movs	r3, #0
 800425c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004260:	6014      	str	r4, [r2, #0]
 8004262:	e7ed      	b.n	8004240 <__strtok_r+0x2c>

08004264 <_close_r>:
 8004264:	b538      	push	{r3, r4, r5, lr}
 8004266:	2300      	movs	r3, #0
 8004268:	4d05      	ldr	r5, [pc, #20]	@ (8004280 <_close_r+0x1c>)
 800426a:	4604      	mov	r4, r0
 800426c:	4608      	mov	r0, r1
 800426e:	602b      	str	r3, [r5, #0]
 8004270:	f7fd f871 	bl	8001356 <_close>
 8004274:	1c43      	adds	r3, r0, #1
 8004276:	d102      	bne.n	800427e <_close_r+0x1a>
 8004278:	682b      	ldr	r3, [r5, #0]
 800427a:	b103      	cbz	r3, 800427e <_close_r+0x1a>
 800427c:	6023      	str	r3, [r4, #0]
 800427e:	bd38      	pop	{r3, r4, r5, pc}
 8004280:	20000300 	.word	0x20000300

08004284 <_lseek_r>:
 8004284:	b538      	push	{r3, r4, r5, lr}
 8004286:	4604      	mov	r4, r0
 8004288:	4608      	mov	r0, r1
 800428a:	4611      	mov	r1, r2
 800428c:	2200      	movs	r2, #0
 800428e:	4d05      	ldr	r5, [pc, #20]	@ (80042a4 <_lseek_r+0x20>)
 8004290:	602a      	str	r2, [r5, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	f7fd f883 	bl	800139e <_lseek>
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	d102      	bne.n	80042a2 <_lseek_r+0x1e>
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	b103      	cbz	r3, 80042a2 <_lseek_r+0x1e>
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	bd38      	pop	{r3, r4, r5, pc}
 80042a4:	20000300 	.word	0x20000300

080042a8 <_read_r>:
 80042a8:	b538      	push	{r3, r4, r5, lr}
 80042aa:	4604      	mov	r4, r0
 80042ac:	4608      	mov	r0, r1
 80042ae:	4611      	mov	r1, r2
 80042b0:	2200      	movs	r2, #0
 80042b2:	4d05      	ldr	r5, [pc, #20]	@ (80042c8 <_read_r+0x20>)
 80042b4:	602a      	str	r2, [r5, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f7fd f814 	bl	80012e4 <_read>
 80042bc:	1c43      	adds	r3, r0, #1
 80042be:	d102      	bne.n	80042c6 <_read_r+0x1e>
 80042c0:	682b      	ldr	r3, [r5, #0]
 80042c2:	b103      	cbz	r3, 80042c6 <_read_r+0x1e>
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	bd38      	pop	{r3, r4, r5, pc}
 80042c8:	20000300 	.word	0x20000300

080042cc <_sbrk_r>:
 80042cc:	b538      	push	{r3, r4, r5, lr}
 80042ce:	2300      	movs	r3, #0
 80042d0:	4d05      	ldr	r5, [pc, #20]	@ (80042e8 <_sbrk_r+0x1c>)
 80042d2:	4604      	mov	r4, r0
 80042d4:	4608      	mov	r0, r1
 80042d6:	602b      	str	r3, [r5, #0]
 80042d8:	f7fd f86e 	bl	80013b8 <_sbrk>
 80042dc:	1c43      	adds	r3, r0, #1
 80042de:	d102      	bne.n	80042e6 <_sbrk_r+0x1a>
 80042e0:	682b      	ldr	r3, [r5, #0]
 80042e2:	b103      	cbz	r3, 80042e6 <_sbrk_r+0x1a>
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	bd38      	pop	{r3, r4, r5, pc}
 80042e8:	20000300 	.word	0x20000300

080042ec <_write_r>:
 80042ec:	b538      	push	{r3, r4, r5, lr}
 80042ee:	4604      	mov	r4, r0
 80042f0:	4608      	mov	r0, r1
 80042f2:	4611      	mov	r1, r2
 80042f4:	2200      	movs	r2, #0
 80042f6:	4d05      	ldr	r5, [pc, #20]	@ (800430c <_write_r+0x20>)
 80042f8:	602a      	str	r2, [r5, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	f7fd f80f 	bl	800131e <_write>
 8004300:	1c43      	adds	r3, r0, #1
 8004302:	d102      	bne.n	800430a <_write_r+0x1e>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	b103      	cbz	r3, 800430a <_write_r+0x1e>
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	bd38      	pop	{r3, r4, r5, pc}
 800430c:	20000300 	.word	0x20000300

08004310 <__errno>:
 8004310:	4b01      	ldr	r3, [pc, #4]	@ (8004318 <__errno+0x8>)
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	20000018 	.word	0x20000018

0800431c <__libc_init_array>:
 800431c:	b570      	push	{r4, r5, r6, lr}
 800431e:	2600      	movs	r6, #0
 8004320:	4d0c      	ldr	r5, [pc, #48]	@ (8004354 <__libc_init_array+0x38>)
 8004322:	4c0d      	ldr	r4, [pc, #52]	@ (8004358 <__libc_init_array+0x3c>)
 8004324:	1b64      	subs	r4, r4, r5
 8004326:	10a4      	asrs	r4, r4, #2
 8004328:	42a6      	cmp	r6, r4
 800432a:	d109      	bne.n	8004340 <__libc_init_array+0x24>
 800432c:	f000 fd9e 	bl	8004e6c <_init>
 8004330:	2600      	movs	r6, #0
 8004332:	4d0a      	ldr	r5, [pc, #40]	@ (800435c <__libc_init_array+0x40>)
 8004334:	4c0a      	ldr	r4, [pc, #40]	@ (8004360 <__libc_init_array+0x44>)
 8004336:	1b64      	subs	r4, r4, r5
 8004338:	10a4      	asrs	r4, r4, #2
 800433a:	42a6      	cmp	r6, r4
 800433c:	d105      	bne.n	800434a <__libc_init_array+0x2e>
 800433e:	bd70      	pop	{r4, r5, r6, pc}
 8004340:	f855 3b04 	ldr.w	r3, [r5], #4
 8004344:	4798      	blx	r3
 8004346:	3601      	adds	r6, #1
 8004348:	e7ee      	b.n	8004328 <__libc_init_array+0xc>
 800434a:	f855 3b04 	ldr.w	r3, [r5], #4
 800434e:	4798      	blx	r3
 8004350:	3601      	adds	r6, #1
 8004352:	e7f2      	b.n	800433a <__libc_init_array+0x1e>
 8004354:	080050cc 	.word	0x080050cc
 8004358:	080050cc 	.word	0x080050cc
 800435c:	080050cc 	.word	0x080050cc
 8004360:	080050d0 	.word	0x080050d0

08004364 <__retarget_lock_init_recursive>:
 8004364:	4770      	bx	lr

08004366 <__retarget_lock_acquire_recursive>:
 8004366:	4770      	bx	lr

08004368 <__retarget_lock_release_recursive>:
 8004368:	4770      	bx	lr

0800436a <strcpy>:
 800436a:	4603      	mov	r3, r0
 800436c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004370:	f803 2b01 	strb.w	r2, [r3], #1
 8004374:	2a00      	cmp	r2, #0
 8004376:	d1f9      	bne.n	800436c <strcpy+0x2>
 8004378:	4770      	bx	lr

0800437a <memcpy>:
 800437a:	440a      	add	r2, r1
 800437c:	4291      	cmp	r1, r2
 800437e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004382:	d100      	bne.n	8004386 <memcpy+0xc>
 8004384:	4770      	bx	lr
 8004386:	b510      	push	{r4, lr}
 8004388:	f811 4b01 	ldrb.w	r4, [r1], #1
 800438c:	4291      	cmp	r1, r2
 800438e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004392:	d1f9      	bne.n	8004388 <memcpy+0xe>
 8004394:	bd10      	pop	{r4, pc}
	...

08004398 <__assert_func>:
 8004398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800439a:	4614      	mov	r4, r2
 800439c:	461a      	mov	r2, r3
 800439e:	4b09      	ldr	r3, [pc, #36]	@ (80043c4 <__assert_func+0x2c>)
 80043a0:	4605      	mov	r5, r0
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68d8      	ldr	r0, [r3, #12]
 80043a6:	b954      	cbnz	r4, 80043be <__assert_func+0x26>
 80043a8:	4b07      	ldr	r3, [pc, #28]	@ (80043c8 <__assert_func+0x30>)
 80043aa:	461c      	mov	r4, r3
 80043ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80043b0:	9100      	str	r1, [sp, #0]
 80043b2:	462b      	mov	r3, r5
 80043b4:	4905      	ldr	r1, [pc, #20]	@ (80043cc <__assert_func+0x34>)
 80043b6:	f000 f905 	bl	80045c4 <fiprintf>
 80043ba:	f000 f915 	bl	80045e8 <abort>
 80043be:	4b04      	ldr	r3, [pc, #16]	@ (80043d0 <__assert_func+0x38>)
 80043c0:	e7f4      	b.n	80043ac <__assert_func+0x14>
 80043c2:	bf00      	nop
 80043c4:	20000018 	.word	0x20000018
 80043c8:	0800508f 	.word	0x0800508f
 80043cc:	08005061 	.word	0x08005061
 80043d0:	08005054 	.word	0x08005054

080043d4 <_free_r>:
 80043d4:	b538      	push	{r3, r4, r5, lr}
 80043d6:	4605      	mov	r5, r0
 80043d8:	2900      	cmp	r1, #0
 80043da:	d040      	beq.n	800445e <_free_r+0x8a>
 80043dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043e0:	1f0c      	subs	r4, r1, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	bfb8      	it	lt
 80043e6:	18e4      	addlt	r4, r4, r3
 80043e8:	f7ff fd0c 	bl	8003e04 <__malloc_lock>
 80043ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004460 <_free_r+0x8c>)
 80043ee:	6813      	ldr	r3, [r2, #0]
 80043f0:	b933      	cbnz	r3, 8004400 <_free_r+0x2c>
 80043f2:	6063      	str	r3, [r4, #4]
 80043f4:	6014      	str	r4, [r2, #0]
 80043f6:	4628      	mov	r0, r5
 80043f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043fc:	f7ff bd08 	b.w	8003e10 <__malloc_unlock>
 8004400:	42a3      	cmp	r3, r4
 8004402:	d908      	bls.n	8004416 <_free_r+0x42>
 8004404:	6820      	ldr	r0, [r4, #0]
 8004406:	1821      	adds	r1, r4, r0
 8004408:	428b      	cmp	r3, r1
 800440a:	bf01      	itttt	eq
 800440c:	6819      	ldreq	r1, [r3, #0]
 800440e:	685b      	ldreq	r3, [r3, #4]
 8004410:	1809      	addeq	r1, r1, r0
 8004412:	6021      	streq	r1, [r4, #0]
 8004414:	e7ed      	b.n	80043f2 <_free_r+0x1e>
 8004416:	461a      	mov	r2, r3
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	b10b      	cbz	r3, 8004420 <_free_r+0x4c>
 800441c:	42a3      	cmp	r3, r4
 800441e:	d9fa      	bls.n	8004416 <_free_r+0x42>
 8004420:	6811      	ldr	r1, [r2, #0]
 8004422:	1850      	adds	r0, r2, r1
 8004424:	42a0      	cmp	r0, r4
 8004426:	d10b      	bne.n	8004440 <_free_r+0x6c>
 8004428:	6820      	ldr	r0, [r4, #0]
 800442a:	4401      	add	r1, r0
 800442c:	1850      	adds	r0, r2, r1
 800442e:	4283      	cmp	r3, r0
 8004430:	6011      	str	r1, [r2, #0]
 8004432:	d1e0      	bne.n	80043f6 <_free_r+0x22>
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	4408      	add	r0, r1
 800443a:	6010      	str	r0, [r2, #0]
 800443c:	6053      	str	r3, [r2, #4]
 800443e:	e7da      	b.n	80043f6 <_free_r+0x22>
 8004440:	d902      	bls.n	8004448 <_free_r+0x74>
 8004442:	230c      	movs	r3, #12
 8004444:	602b      	str	r3, [r5, #0]
 8004446:	e7d6      	b.n	80043f6 <_free_r+0x22>
 8004448:	6820      	ldr	r0, [r4, #0]
 800444a:	1821      	adds	r1, r4, r0
 800444c:	428b      	cmp	r3, r1
 800444e:	bf01      	itttt	eq
 8004450:	6819      	ldreq	r1, [r3, #0]
 8004452:	685b      	ldreq	r3, [r3, #4]
 8004454:	1809      	addeq	r1, r1, r0
 8004456:	6021      	streq	r1, [r4, #0]
 8004458:	6063      	str	r3, [r4, #4]
 800445a:	6054      	str	r4, [r2, #4]
 800445c:	e7cb      	b.n	80043f6 <_free_r+0x22>
 800445e:	bd38      	pop	{r3, r4, r5, pc}
 8004460:	200001c0 	.word	0x200001c0

08004464 <_malloc_usable_size_r>:
 8004464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004468:	1f18      	subs	r0, r3, #4
 800446a:	2b00      	cmp	r3, #0
 800446c:	bfbc      	itt	lt
 800446e:	580b      	ldrlt	r3, [r1, r0]
 8004470:	18c0      	addlt	r0, r0, r3
 8004472:	4770      	bx	lr

08004474 <__sflush_r>:
 8004474:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447a:	0716      	lsls	r6, r2, #28
 800447c:	4605      	mov	r5, r0
 800447e:	460c      	mov	r4, r1
 8004480:	d454      	bmi.n	800452c <__sflush_r+0xb8>
 8004482:	684b      	ldr	r3, [r1, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	dc02      	bgt.n	800448e <__sflush_r+0x1a>
 8004488:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800448a:	2b00      	cmp	r3, #0
 800448c:	dd48      	ble.n	8004520 <__sflush_r+0xac>
 800448e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004490:	2e00      	cmp	r6, #0
 8004492:	d045      	beq.n	8004520 <__sflush_r+0xac>
 8004494:	2300      	movs	r3, #0
 8004496:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800449a:	682f      	ldr	r7, [r5, #0]
 800449c:	6a21      	ldr	r1, [r4, #32]
 800449e:	602b      	str	r3, [r5, #0]
 80044a0:	d030      	beq.n	8004504 <__sflush_r+0x90>
 80044a2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80044a4:	89a3      	ldrh	r3, [r4, #12]
 80044a6:	0759      	lsls	r1, r3, #29
 80044a8:	d505      	bpl.n	80044b6 <__sflush_r+0x42>
 80044aa:	6863      	ldr	r3, [r4, #4]
 80044ac:	1ad2      	subs	r2, r2, r3
 80044ae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80044b0:	b10b      	cbz	r3, 80044b6 <__sflush_r+0x42>
 80044b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80044b4:	1ad2      	subs	r2, r2, r3
 80044b6:	2300      	movs	r3, #0
 80044b8:	4628      	mov	r0, r5
 80044ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044bc:	6a21      	ldr	r1, [r4, #32]
 80044be:	47b0      	blx	r6
 80044c0:	1c43      	adds	r3, r0, #1
 80044c2:	89a3      	ldrh	r3, [r4, #12]
 80044c4:	d106      	bne.n	80044d4 <__sflush_r+0x60>
 80044c6:	6829      	ldr	r1, [r5, #0]
 80044c8:	291d      	cmp	r1, #29
 80044ca:	d82b      	bhi.n	8004524 <__sflush_r+0xb0>
 80044cc:	4a28      	ldr	r2, [pc, #160]	@ (8004570 <__sflush_r+0xfc>)
 80044ce:	410a      	asrs	r2, r1
 80044d0:	07d6      	lsls	r6, r2, #31
 80044d2:	d427      	bmi.n	8004524 <__sflush_r+0xb0>
 80044d4:	2200      	movs	r2, #0
 80044d6:	6062      	str	r2, [r4, #4]
 80044d8:	6922      	ldr	r2, [r4, #16]
 80044da:	04d9      	lsls	r1, r3, #19
 80044dc:	6022      	str	r2, [r4, #0]
 80044de:	d504      	bpl.n	80044ea <__sflush_r+0x76>
 80044e0:	1c42      	adds	r2, r0, #1
 80044e2:	d101      	bne.n	80044e8 <__sflush_r+0x74>
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	b903      	cbnz	r3, 80044ea <__sflush_r+0x76>
 80044e8:	6560      	str	r0, [r4, #84]	@ 0x54
 80044ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044ec:	602f      	str	r7, [r5, #0]
 80044ee:	b1b9      	cbz	r1, 8004520 <__sflush_r+0xac>
 80044f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044f4:	4299      	cmp	r1, r3
 80044f6:	d002      	beq.n	80044fe <__sflush_r+0x8a>
 80044f8:	4628      	mov	r0, r5
 80044fa:	f7ff ff6b 	bl	80043d4 <_free_r>
 80044fe:	2300      	movs	r3, #0
 8004500:	6363      	str	r3, [r4, #52]	@ 0x34
 8004502:	e00d      	b.n	8004520 <__sflush_r+0xac>
 8004504:	2301      	movs	r3, #1
 8004506:	4628      	mov	r0, r5
 8004508:	47b0      	blx	r6
 800450a:	4602      	mov	r2, r0
 800450c:	1c50      	adds	r0, r2, #1
 800450e:	d1c9      	bne.n	80044a4 <__sflush_r+0x30>
 8004510:	682b      	ldr	r3, [r5, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0c6      	beq.n	80044a4 <__sflush_r+0x30>
 8004516:	2b1d      	cmp	r3, #29
 8004518:	d001      	beq.n	800451e <__sflush_r+0xaa>
 800451a:	2b16      	cmp	r3, #22
 800451c:	d11d      	bne.n	800455a <__sflush_r+0xe6>
 800451e:	602f      	str	r7, [r5, #0]
 8004520:	2000      	movs	r0, #0
 8004522:	e021      	b.n	8004568 <__sflush_r+0xf4>
 8004524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004528:	b21b      	sxth	r3, r3
 800452a:	e01a      	b.n	8004562 <__sflush_r+0xee>
 800452c:	690f      	ldr	r7, [r1, #16]
 800452e:	2f00      	cmp	r7, #0
 8004530:	d0f6      	beq.n	8004520 <__sflush_r+0xac>
 8004532:	0793      	lsls	r3, r2, #30
 8004534:	bf18      	it	ne
 8004536:	2300      	movne	r3, #0
 8004538:	680e      	ldr	r6, [r1, #0]
 800453a:	bf08      	it	eq
 800453c:	694b      	ldreq	r3, [r1, #20]
 800453e:	1bf6      	subs	r6, r6, r7
 8004540:	600f      	str	r7, [r1, #0]
 8004542:	608b      	str	r3, [r1, #8]
 8004544:	2e00      	cmp	r6, #0
 8004546:	ddeb      	ble.n	8004520 <__sflush_r+0xac>
 8004548:	4633      	mov	r3, r6
 800454a:	463a      	mov	r2, r7
 800454c:	4628      	mov	r0, r5
 800454e:	6a21      	ldr	r1, [r4, #32]
 8004550:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004554:	47e0      	blx	ip
 8004556:	2800      	cmp	r0, #0
 8004558:	dc07      	bgt.n	800456a <__sflush_r+0xf6>
 800455a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800455e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004562:	f04f 30ff 	mov.w	r0, #4294967295
 8004566:	81a3      	strh	r3, [r4, #12]
 8004568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800456a:	4407      	add	r7, r0
 800456c:	1a36      	subs	r6, r6, r0
 800456e:	e7e9      	b.n	8004544 <__sflush_r+0xd0>
 8004570:	dfbffffe 	.word	0xdfbffffe

08004574 <_fflush_r>:
 8004574:	b538      	push	{r3, r4, r5, lr}
 8004576:	690b      	ldr	r3, [r1, #16]
 8004578:	4605      	mov	r5, r0
 800457a:	460c      	mov	r4, r1
 800457c:	b913      	cbnz	r3, 8004584 <_fflush_r+0x10>
 800457e:	2500      	movs	r5, #0
 8004580:	4628      	mov	r0, r5
 8004582:	bd38      	pop	{r3, r4, r5, pc}
 8004584:	b118      	cbz	r0, 800458e <_fflush_r+0x1a>
 8004586:	6a03      	ldr	r3, [r0, #32]
 8004588:	b90b      	cbnz	r3, 800458e <_fflush_r+0x1a>
 800458a:	f7ff fd8d 	bl	80040a8 <__sinit>
 800458e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f3      	beq.n	800457e <_fflush_r+0xa>
 8004596:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004598:	07d0      	lsls	r0, r2, #31
 800459a:	d404      	bmi.n	80045a6 <_fflush_r+0x32>
 800459c:	0599      	lsls	r1, r3, #22
 800459e:	d402      	bmi.n	80045a6 <_fflush_r+0x32>
 80045a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045a2:	f7ff fee0 	bl	8004366 <__retarget_lock_acquire_recursive>
 80045a6:	4628      	mov	r0, r5
 80045a8:	4621      	mov	r1, r4
 80045aa:	f7ff ff63 	bl	8004474 <__sflush_r>
 80045ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045b0:	4605      	mov	r5, r0
 80045b2:	07da      	lsls	r2, r3, #31
 80045b4:	d4e4      	bmi.n	8004580 <_fflush_r+0xc>
 80045b6:	89a3      	ldrh	r3, [r4, #12]
 80045b8:	059b      	lsls	r3, r3, #22
 80045ba:	d4e1      	bmi.n	8004580 <_fflush_r+0xc>
 80045bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045be:	f7ff fed3 	bl	8004368 <__retarget_lock_release_recursive>
 80045c2:	e7dd      	b.n	8004580 <_fflush_r+0xc>

080045c4 <fiprintf>:
 80045c4:	b40e      	push	{r1, r2, r3}
 80045c6:	b503      	push	{r0, r1, lr}
 80045c8:	4601      	mov	r1, r0
 80045ca:	ab03      	add	r3, sp, #12
 80045cc:	4805      	ldr	r0, [pc, #20]	@ (80045e4 <fiprintf+0x20>)
 80045ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80045d2:	6800      	ldr	r0, [r0, #0]
 80045d4:	9301      	str	r3, [sp, #4]
 80045d6:	f000 f835 	bl	8004644 <_vfiprintf_r>
 80045da:	b002      	add	sp, #8
 80045dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80045e0:	b003      	add	sp, #12
 80045e2:	4770      	bx	lr
 80045e4:	20000018 	.word	0x20000018

080045e8 <abort>:
 80045e8:	2006      	movs	r0, #6
 80045ea:	b508      	push	{r3, lr}
 80045ec:	f000 fb90 	bl	8004d10 <raise>
 80045f0:	2001      	movs	r0, #1
 80045f2:	f7fc fe6c 	bl	80012ce <_exit>

080045f6 <__sfputc_r>:
 80045f6:	6893      	ldr	r3, [r2, #8]
 80045f8:	b410      	push	{r4}
 80045fa:	3b01      	subs	r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	6093      	str	r3, [r2, #8]
 8004600:	da07      	bge.n	8004612 <__sfputc_r+0x1c>
 8004602:	6994      	ldr	r4, [r2, #24]
 8004604:	42a3      	cmp	r3, r4
 8004606:	db01      	blt.n	800460c <__sfputc_r+0x16>
 8004608:	290a      	cmp	r1, #10
 800460a:	d102      	bne.n	8004612 <__sfputc_r+0x1c>
 800460c:	bc10      	pop	{r4}
 800460e:	f000 bac3 	b.w	8004b98 <__swbuf_r>
 8004612:	6813      	ldr	r3, [r2, #0]
 8004614:	1c58      	adds	r0, r3, #1
 8004616:	6010      	str	r0, [r2, #0]
 8004618:	7019      	strb	r1, [r3, #0]
 800461a:	4608      	mov	r0, r1
 800461c:	bc10      	pop	{r4}
 800461e:	4770      	bx	lr

08004620 <__sfputs_r>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	4606      	mov	r6, r0
 8004624:	460f      	mov	r7, r1
 8004626:	4614      	mov	r4, r2
 8004628:	18d5      	adds	r5, r2, r3
 800462a:	42ac      	cmp	r4, r5
 800462c:	d101      	bne.n	8004632 <__sfputs_r+0x12>
 800462e:	2000      	movs	r0, #0
 8004630:	e007      	b.n	8004642 <__sfputs_r+0x22>
 8004632:	463a      	mov	r2, r7
 8004634:	4630      	mov	r0, r6
 8004636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800463a:	f7ff ffdc 	bl	80045f6 <__sfputc_r>
 800463e:	1c43      	adds	r3, r0, #1
 8004640:	d1f3      	bne.n	800462a <__sfputs_r+0xa>
 8004642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004644 <_vfiprintf_r>:
 8004644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004648:	460d      	mov	r5, r1
 800464a:	4614      	mov	r4, r2
 800464c:	4698      	mov	r8, r3
 800464e:	4606      	mov	r6, r0
 8004650:	b09d      	sub	sp, #116	@ 0x74
 8004652:	b118      	cbz	r0, 800465c <_vfiprintf_r+0x18>
 8004654:	6a03      	ldr	r3, [r0, #32]
 8004656:	b90b      	cbnz	r3, 800465c <_vfiprintf_r+0x18>
 8004658:	f7ff fd26 	bl	80040a8 <__sinit>
 800465c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800465e:	07d9      	lsls	r1, r3, #31
 8004660:	d405      	bmi.n	800466e <_vfiprintf_r+0x2a>
 8004662:	89ab      	ldrh	r3, [r5, #12]
 8004664:	059a      	lsls	r2, r3, #22
 8004666:	d402      	bmi.n	800466e <_vfiprintf_r+0x2a>
 8004668:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800466a:	f7ff fe7c 	bl	8004366 <__retarget_lock_acquire_recursive>
 800466e:	89ab      	ldrh	r3, [r5, #12]
 8004670:	071b      	lsls	r3, r3, #28
 8004672:	d501      	bpl.n	8004678 <_vfiprintf_r+0x34>
 8004674:	692b      	ldr	r3, [r5, #16]
 8004676:	b99b      	cbnz	r3, 80046a0 <_vfiprintf_r+0x5c>
 8004678:	4629      	mov	r1, r5
 800467a:	4630      	mov	r0, r6
 800467c:	f000 faca 	bl	8004c14 <__swsetup_r>
 8004680:	b170      	cbz	r0, 80046a0 <_vfiprintf_r+0x5c>
 8004682:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004684:	07dc      	lsls	r4, r3, #31
 8004686:	d504      	bpl.n	8004692 <_vfiprintf_r+0x4e>
 8004688:	f04f 30ff 	mov.w	r0, #4294967295
 800468c:	b01d      	add	sp, #116	@ 0x74
 800468e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004692:	89ab      	ldrh	r3, [r5, #12]
 8004694:	0598      	lsls	r0, r3, #22
 8004696:	d4f7      	bmi.n	8004688 <_vfiprintf_r+0x44>
 8004698:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800469a:	f7ff fe65 	bl	8004368 <__retarget_lock_release_recursive>
 800469e:	e7f3      	b.n	8004688 <_vfiprintf_r+0x44>
 80046a0:	2300      	movs	r3, #0
 80046a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80046a4:	2320      	movs	r3, #32
 80046a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046aa:	2330      	movs	r3, #48	@ 0x30
 80046ac:	f04f 0901 	mov.w	r9, #1
 80046b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80046b4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004860 <_vfiprintf_r+0x21c>
 80046b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046bc:	4623      	mov	r3, r4
 80046be:	469a      	mov	sl, r3
 80046c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046c4:	b10a      	cbz	r2, 80046ca <_vfiprintf_r+0x86>
 80046c6:	2a25      	cmp	r2, #37	@ 0x25
 80046c8:	d1f9      	bne.n	80046be <_vfiprintf_r+0x7a>
 80046ca:	ebba 0b04 	subs.w	fp, sl, r4
 80046ce:	d00b      	beq.n	80046e8 <_vfiprintf_r+0xa4>
 80046d0:	465b      	mov	r3, fp
 80046d2:	4622      	mov	r2, r4
 80046d4:	4629      	mov	r1, r5
 80046d6:	4630      	mov	r0, r6
 80046d8:	f7ff ffa2 	bl	8004620 <__sfputs_r>
 80046dc:	3001      	adds	r0, #1
 80046de:	f000 80a7 	beq.w	8004830 <_vfiprintf_r+0x1ec>
 80046e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046e4:	445a      	add	r2, fp
 80046e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80046e8:	f89a 3000 	ldrb.w	r3, [sl]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 809f 	beq.w	8004830 <_vfiprintf_r+0x1ec>
 80046f2:	2300      	movs	r3, #0
 80046f4:	f04f 32ff 	mov.w	r2, #4294967295
 80046f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046fc:	f10a 0a01 	add.w	sl, sl, #1
 8004700:	9304      	str	r3, [sp, #16]
 8004702:	9307      	str	r3, [sp, #28]
 8004704:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004708:	931a      	str	r3, [sp, #104]	@ 0x68
 800470a:	4654      	mov	r4, sl
 800470c:	2205      	movs	r2, #5
 800470e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004712:	4853      	ldr	r0, [pc, #332]	@ (8004860 <_vfiprintf_r+0x21c>)
 8004714:	f000 fb18 	bl	8004d48 <memchr>
 8004718:	9a04      	ldr	r2, [sp, #16]
 800471a:	b9d8      	cbnz	r0, 8004754 <_vfiprintf_r+0x110>
 800471c:	06d1      	lsls	r1, r2, #27
 800471e:	bf44      	itt	mi
 8004720:	2320      	movmi	r3, #32
 8004722:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004726:	0713      	lsls	r3, r2, #28
 8004728:	bf44      	itt	mi
 800472a:	232b      	movmi	r3, #43	@ 0x2b
 800472c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004730:	f89a 3000 	ldrb.w	r3, [sl]
 8004734:	2b2a      	cmp	r3, #42	@ 0x2a
 8004736:	d015      	beq.n	8004764 <_vfiprintf_r+0x120>
 8004738:	4654      	mov	r4, sl
 800473a:	2000      	movs	r0, #0
 800473c:	f04f 0c0a 	mov.w	ip, #10
 8004740:	9a07      	ldr	r2, [sp, #28]
 8004742:	4621      	mov	r1, r4
 8004744:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004748:	3b30      	subs	r3, #48	@ 0x30
 800474a:	2b09      	cmp	r3, #9
 800474c:	d94b      	bls.n	80047e6 <_vfiprintf_r+0x1a2>
 800474e:	b1b0      	cbz	r0, 800477e <_vfiprintf_r+0x13a>
 8004750:	9207      	str	r2, [sp, #28]
 8004752:	e014      	b.n	800477e <_vfiprintf_r+0x13a>
 8004754:	eba0 0308 	sub.w	r3, r0, r8
 8004758:	fa09 f303 	lsl.w	r3, r9, r3
 800475c:	4313      	orrs	r3, r2
 800475e:	46a2      	mov	sl, r4
 8004760:	9304      	str	r3, [sp, #16]
 8004762:	e7d2      	b.n	800470a <_vfiprintf_r+0xc6>
 8004764:	9b03      	ldr	r3, [sp, #12]
 8004766:	1d19      	adds	r1, r3, #4
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	9103      	str	r1, [sp, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	bfbb      	ittet	lt
 8004770:	425b      	neglt	r3, r3
 8004772:	f042 0202 	orrlt.w	r2, r2, #2
 8004776:	9307      	strge	r3, [sp, #28]
 8004778:	9307      	strlt	r3, [sp, #28]
 800477a:	bfb8      	it	lt
 800477c:	9204      	strlt	r2, [sp, #16]
 800477e:	7823      	ldrb	r3, [r4, #0]
 8004780:	2b2e      	cmp	r3, #46	@ 0x2e
 8004782:	d10a      	bne.n	800479a <_vfiprintf_r+0x156>
 8004784:	7863      	ldrb	r3, [r4, #1]
 8004786:	2b2a      	cmp	r3, #42	@ 0x2a
 8004788:	d132      	bne.n	80047f0 <_vfiprintf_r+0x1ac>
 800478a:	9b03      	ldr	r3, [sp, #12]
 800478c:	3402      	adds	r4, #2
 800478e:	1d1a      	adds	r2, r3, #4
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	9203      	str	r2, [sp, #12]
 8004794:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004798:	9305      	str	r3, [sp, #20]
 800479a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004864 <_vfiprintf_r+0x220>
 800479e:	2203      	movs	r2, #3
 80047a0:	4650      	mov	r0, sl
 80047a2:	7821      	ldrb	r1, [r4, #0]
 80047a4:	f000 fad0 	bl	8004d48 <memchr>
 80047a8:	b138      	cbz	r0, 80047ba <_vfiprintf_r+0x176>
 80047aa:	2240      	movs	r2, #64	@ 0x40
 80047ac:	9b04      	ldr	r3, [sp, #16]
 80047ae:	eba0 000a 	sub.w	r0, r0, sl
 80047b2:	4082      	lsls	r2, r0
 80047b4:	4313      	orrs	r3, r2
 80047b6:	3401      	adds	r4, #1
 80047b8:	9304      	str	r3, [sp, #16]
 80047ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047be:	2206      	movs	r2, #6
 80047c0:	4829      	ldr	r0, [pc, #164]	@ (8004868 <_vfiprintf_r+0x224>)
 80047c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80047c6:	f000 fabf 	bl	8004d48 <memchr>
 80047ca:	2800      	cmp	r0, #0
 80047cc:	d03f      	beq.n	800484e <_vfiprintf_r+0x20a>
 80047ce:	4b27      	ldr	r3, [pc, #156]	@ (800486c <_vfiprintf_r+0x228>)
 80047d0:	bb1b      	cbnz	r3, 800481a <_vfiprintf_r+0x1d6>
 80047d2:	9b03      	ldr	r3, [sp, #12]
 80047d4:	3307      	adds	r3, #7
 80047d6:	f023 0307 	bic.w	r3, r3, #7
 80047da:	3308      	adds	r3, #8
 80047dc:	9303      	str	r3, [sp, #12]
 80047de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047e0:	443b      	add	r3, r7
 80047e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80047e4:	e76a      	b.n	80046bc <_vfiprintf_r+0x78>
 80047e6:	460c      	mov	r4, r1
 80047e8:	2001      	movs	r0, #1
 80047ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80047ee:	e7a8      	b.n	8004742 <_vfiprintf_r+0xfe>
 80047f0:	2300      	movs	r3, #0
 80047f2:	f04f 0c0a 	mov.w	ip, #10
 80047f6:	4619      	mov	r1, r3
 80047f8:	3401      	adds	r4, #1
 80047fa:	9305      	str	r3, [sp, #20]
 80047fc:	4620      	mov	r0, r4
 80047fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004802:	3a30      	subs	r2, #48	@ 0x30
 8004804:	2a09      	cmp	r2, #9
 8004806:	d903      	bls.n	8004810 <_vfiprintf_r+0x1cc>
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0c6      	beq.n	800479a <_vfiprintf_r+0x156>
 800480c:	9105      	str	r1, [sp, #20]
 800480e:	e7c4      	b.n	800479a <_vfiprintf_r+0x156>
 8004810:	4604      	mov	r4, r0
 8004812:	2301      	movs	r3, #1
 8004814:	fb0c 2101 	mla	r1, ip, r1, r2
 8004818:	e7f0      	b.n	80047fc <_vfiprintf_r+0x1b8>
 800481a:	ab03      	add	r3, sp, #12
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	462a      	mov	r2, r5
 8004820:	4630      	mov	r0, r6
 8004822:	4b13      	ldr	r3, [pc, #76]	@ (8004870 <_vfiprintf_r+0x22c>)
 8004824:	a904      	add	r1, sp, #16
 8004826:	f3af 8000 	nop.w
 800482a:	4607      	mov	r7, r0
 800482c:	1c78      	adds	r0, r7, #1
 800482e:	d1d6      	bne.n	80047de <_vfiprintf_r+0x19a>
 8004830:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004832:	07d9      	lsls	r1, r3, #31
 8004834:	d405      	bmi.n	8004842 <_vfiprintf_r+0x1fe>
 8004836:	89ab      	ldrh	r3, [r5, #12]
 8004838:	059a      	lsls	r2, r3, #22
 800483a:	d402      	bmi.n	8004842 <_vfiprintf_r+0x1fe>
 800483c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800483e:	f7ff fd93 	bl	8004368 <__retarget_lock_release_recursive>
 8004842:	89ab      	ldrh	r3, [r5, #12]
 8004844:	065b      	lsls	r3, r3, #25
 8004846:	f53f af1f 	bmi.w	8004688 <_vfiprintf_r+0x44>
 800484a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800484c:	e71e      	b.n	800468c <_vfiprintf_r+0x48>
 800484e:	ab03      	add	r3, sp, #12
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	462a      	mov	r2, r5
 8004854:	4630      	mov	r0, r6
 8004856:	4b06      	ldr	r3, [pc, #24]	@ (8004870 <_vfiprintf_r+0x22c>)
 8004858:	a904      	add	r1, sp, #16
 800485a:	f000 f87d 	bl	8004958 <_printf_i>
 800485e:	e7e4      	b.n	800482a <_vfiprintf_r+0x1e6>
 8004860:	08005090 	.word	0x08005090
 8004864:	08005096 	.word	0x08005096
 8004868:	0800509a 	.word	0x0800509a
 800486c:	00000000 	.word	0x00000000
 8004870:	08004621 	.word	0x08004621

08004874 <_printf_common>:
 8004874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004878:	4616      	mov	r6, r2
 800487a:	4698      	mov	r8, r3
 800487c:	688a      	ldr	r2, [r1, #8]
 800487e:	690b      	ldr	r3, [r1, #16]
 8004880:	4607      	mov	r7, r0
 8004882:	4293      	cmp	r3, r2
 8004884:	bfb8      	it	lt
 8004886:	4613      	movlt	r3, r2
 8004888:	6033      	str	r3, [r6, #0]
 800488a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800488e:	460c      	mov	r4, r1
 8004890:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004894:	b10a      	cbz	r2, 800489a <_printf_common+0x26>
 8004896:	3301      	adds	r3, #1
 8004898:	6033      	str	r3, [r6, #0]
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	0699      	lsls	r1, r3, #26
 800489e:	bf42      	ittt	mi
 80048a0:	6833      	ldrmi	r3, [r6, #0]
 80048a2:	3302      	addmi	r3, #2
 80048a4:	6033      	strmi	r3, [r6, #0]
 80048a6:	6825      	ldr	r5, [r4, #0]
 80048a8:	f015 0506 	ands.w	r5, r5, #6
 80048ac:	d106      	bne.n	80048bc <_printf_common+0x48>
 80048ae:	f104 0a19 	add.w	sl, r4, #25
 80048b2:	68e3      	ldr	r3, [r4, #12]
 80048b4:	6832      	ldr	r2, [r6, #0]
 80048b6:	1a9b      	subs	r3, r3, r2
 80048b8:	42ab      	cmp	r3, r5
 80048ba:	dc2b      	bgt.n	8004914 <_printf_common+0xa0>
 80048bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048c0:	6822      	ldr	r2, [r4, #0]
 80048c2:	3b00      	subs	r3, #0
 80048c4:	bf18      	it	ne
 80048c6:	2301      	movne	r3, #1
 80048c8:	0692      	lsls	r2, r2, #26
 80048ca:	d430      	bmi.n	800492e <_printf_common+0xba>
 80048cc:	4641      	mov	r1, r8
 80048ce:	4638      	mov	r0, r7
 80048d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80048d4:	47c8      	blx	r9
 80048d6:	3001      	adds	r0, #1
 80048d8:	d023      	beq.n	8004922 <_printf_common+0xae>
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	6922      	ldr	r2, [r4, #16]
 80048de:	f003 0306 	and.w	r3, r3, #6
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	bf14      	ite	ne
 80048e6:	2500      	movne	r5, #0
 80048e8:	6833      	ldreq	r3, [r6, #0]
 80048ea:	f04f 0600 	mov.w	r6, #0
 80048ee:	bf08      	it	eq
 80048f0:	68e5      	ldreq	r5, [r4, #12]
 80048f2:	f104 041a 	add.w	r4, r4, #26
 80048f6:	bf08      	it	eq
 80048f8:	1aed      	subeq	r5, r5, r3
 80048fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80048fe:	bf08      	it	eq
 8004900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004904:	4293      	cmp	r3, r2
 8004906:	bfc4      	itt	gt
 8004908:	1a9b      	subgt	r3, r3, r2
 800490a:	18ed      	addgt	r5, r5, r3
 800490c:	42b5      	cmp	r5, r6
 800490e:	d11a      	bne.n	8004946 <_printf_common+0xd2>
 8004910:	2000      	movs	r0, #0
 8004912:	e008      	b.n	8004926 <_printf_common+0xb2>
 8004914:	2301      	movs	r3, #1
 8004916:	4652      	mov	r2, sl
 8004918:	4641      	mov	r1, r8
 800491a:	4638      	mov	r0, r7
 800491c:	47c8      	blx	r9
 800491e:	3001      	adds	r0, #1
 8004920:	d103      	bne.n	800492a <_printf_common+0xb6>
 8004922:	f04f 30ff 	mov.w	r0, #4294967295
 8004926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800492a:	3501      	adds	r5, #1
 800492c:	e7c1      	b.n	80048b2 <_printf_common+0x3e>
 800492e:	2030      	movs	r0, #48	@ 0x30
 8004930:	18e1      	adds	r1, r4, r3
 8004932:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800493c:	4422      	add	r2, r4
 800493e:	3302      	adds	r3, #2
 8004940:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004944:	e7c2      	b.n	80048cc <_printf_common+0x58>
 8004946:	2301      	movs	r3, #1
 8004948:	4622      	mov	r2, r4
 800494a:	4641      	mov	r1, r8
 800494c:	4638      	mov	r0, r7
 800494e:	47c8      	blx	r9
 8004950:	3001      	adds	r0, #1
 8004952:	d0e6      	beq.n	8004922 <_printf_common+0xae>
 8004954:	3601      	adds	r6, #1
 8004956:	e7d9      	b.n	800490c <_printf_common+0x98>

08004958 <_printf_i>:
 8004958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800495c:	7e0f      	ldrb	r7, [r1, #24]
 800495e:	4691      	mov	r9, r2
 8004960:	2f78      	cmp	r7, #120	@ 0x78
 8004962:	4680      	mov	r8, r0
 8004964:	460c      	mov	r4, r1
 8004966:	469a      	mov	sl, r3
 8004968:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800496a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800496e:	d807      	bhi.n	8004980 <_printf_i+0x28>
 8004970:	2f62      	cmp	r7, #98	@ 0x62
 8004972:	d80a      	bhi.n	800498a <_printf_i+0x32>
 8004974:	2f00      	cmp	r7, #0
 8004976:	f000 80d3 	beq.w	8004b20 <_printf_i+0x1c8>
 800497a:	2f58      	cmp	r7, #88	@ 0x58
 800497c:	f000 80ba 	beq.w	8004af4 <_printf_i+0x19c>
 8004980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004984:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004988:	e03a      	b.n	8004a00 <_printf_i+0xa8>
 800498a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800498e:	2b15      	cmp	r3, #21
 8004990:	d8f6      	bhi.n	8004980 <_printf_i+0x28>
 8004992:	a101      	add	r1, pc, #4	@ (adr r1, 8004998 <_printf_i+0x40>)
 8004994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004998:	080049f1 	.word	0x080049f1
 800499c:	08004a05 	.word	0x08004a05
 80049a0:	08004981 	.word	0x08004981
 80049a4:	08004981 	.word	0x08004981
 80049a8:	08004981 	.word	0x08004981
 80049ac:	08004981 	.word	0x08004981
 80049b0:	08004a05 	.word	0x08004a05
 80049b4:	08004981 	.word	0x08004981
 80049b8:	08004981 	.word	0x08004981
 80049bc:	08004981 	.word	0x08004981
 80049c0:	08004981 	.word	0x08004981
 80049c4:	08004b07 	.word	0x08004b07
 80049c8:	08004a2f 	.word	0x08004a2f
 80049cc:	08004ac1 	.word	0x08004ac1
 80049d0:	08004981 	.word	0x08004981
 80049d4:	08004981 	.word	0x08004981
 80049d8:	08004b29 	.word	0x08004b29
 80049dc:	08004981 	.word	0x08004981
 80049e0:	08004a2f 	.word	0x08004a2f
 80049e4:	08004981 	.word	0x08004981
 80049e8:	08004981 	.word	0x08004981
 80049ec:	08004ac9 	.word	0x08004ac9
 80049f0:	6833      	ldr	r3, [r6, #0]
 80049f2:	1d1a      	adds	r2, r3, #4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6032      	str	r2, [r6, #0]
 80049f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a00:	2301      	movs	r3, #1
 8004a02:	e09e      	b.n	8004b42 <_printf_i+0x1ea>
 8004a04:	6833      	ldr	r3, [r6, #0]
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	1d19      	adds	r1, r3, #4
 8004a0a:	6031      	str	r1, [r6, #0]
 8004a0c:	0606      	lsls	r6, r0, #24
 8004a0e:	d501      	bpl.n	8004a14 <_printf_i+0xbc>
 8004a10:	681d      	ldr	r5, [r3, #0]
 8004a12:	e003      	b.n	8004a1c <_printf_i+0xc4>
 8004a14:	0645      	lsls	r5, r0, #25
 8004a16:	d5fb      	bpl.n	8004a10 <_printf_i+0xb8>
 8004a18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a1c:	2d00      	cmp	r5, #0
 8004a1e:	da03      	bge.n	8004a28 <_printf_i+0xd0>
 8004a20:	232d      	movs	r3, #45	@ 0x2d
 8004a22:	426d      	negs	r5, r5
 8004a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a28:	230a      	movs	r3, #10
 8004a2a:	4859      	ldr	r0, [pc, #356]	@ (8004b90 <_printf_i+0x238>)
 8004a2c:	e011      	b.n	8004a52 <_printf_i+0xfa>
 8004a2e:	6821      	ldr	r1, [r4, #0]
 8004a30:	6833      	ldr	r3, [r6, #0]
 8004a32:	0608      	lsls	r0, r1, #24
 8004a34:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a38:	d402      	bmi.n	8004a40 <_printf_i+0xe8>
 8004a3a:	0649      	lsls	r1, r1, #25
 8004a3c:	bf48      	it	mi
 8004a3e:	b2ad      	uxthmi	r5, r5
 8004a40:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a42:	6033      	str	r3, [r6, #0]
 8004a44:	bf14      	ite	ne
 8004a46:	230a      	movne	r3, #10
 8004a48:	2308      	moveq	r3, #8
 8004a4a:	4851      	ldr	r0, [pc, #324]	@ (8004b90 <_printf_i+0x238>)
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a52:	6866      	ldr	r6, [r4, #4]
 8004a54:	2e00      	cmp	r6, #0
 8004a56:	bfa8      	it	ge
 8004a58:	6821      	ldrge	r1, [r4, #0]
 8004a5a:	60a6      	str	r6, [r4, #8]
 8004a5c:	bfa4      	itt	ge
 8004a5e:	f021 0104 	bicge.w	r1, r1, #4
 8004a62:	6021      	strge	r1, [r4, #0]
 8004a64:	b90d      	cbnz	r5, 8004a6a <_printf_i+0x112>
 8004a66:	2e00      	cmp	r6, #0
 8004a68:	d04b      	beq.n	8004b02 <_printf_i+0x1aa>
 8004a6a:	4616      	mov	r6, r2
 8004a6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a70:	fb03 5711 	mls	r7, r3, r1, r5
 8004a74:	5dc7      	ldrb	r7, [r0, r7]
 8004a76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a7a:	462f      	mov	r7, r5
 8004a7c:	42bb      	cmp	r3, r7
 8004a7e:	460d      	mov	r5, r1
 8004a80:	d9f4      	bls.n	8004a6c <_printf_i+0x114>
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d10b      	bne.n	8004a9e <_printf_i+0x146>
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	07df      	lsls	r7, r3, #31
 8004a8a:	d508      	bpl.n	8004a9e <_printf_i+0x146>
 8004a8c:	6923      	ldr	r3, [r4, #16]
 8004a8e:	6861      	ldr	r1, [r4, #4]
 8004a90:	4299      	cmp	r1, r3
 8004a92:	bfde      	ittt	le
 8004a94:	2330      	movle	r3, #48	@ 0x30
 8004a96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a9e:	1b92      	subs	r2, r2, r6
 8004aa0:	6122      	str	r2, [r4, #16]
 8004aa2:	464b      	mov	r3, r9
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	f8cd a000 	str.w	sl, [sp]
 8004aac:	aa03      	add	r2, sp, #12
 8004aae:	f7ff fee1 	bl	8004874 <_printf_common>
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	d14a      	bne.n	8004b4c <_printf_i+0x1f4>
 8004ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aba:	b004      	add	sp, #16
 8004abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	f043 0320 	orr.w	r3, r3, #32
 8004ac6:	6023      	str	r3, [r4, #0]
 8004ac8:	2778      	movs	r7, #120	@ 0x78
 8004aca:	4832      	ldr	r0, [pc, #200]	@ (8004b94 <_printf_i+0x23c>)
 8004acc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	6831      	ldr	r1, [r6, #0]
 8004ad4:	061f      	lsls	r7, r3, #24
 8004ad6:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ada:	d402      	bmi.n	8004ae2 <_printf_i+0x18a>
 8004adc:	065f      	lsls	r7, r3, #25
 8004ade:	bf48      	it	mi
 8004ae0:	b2ad      	uxthmi	r5, r5
 8004ae2:	6031      	str	r1, [r6, #0]
 8004ae4:	07d9      	lsls	r1, r3, #31
 8004ae6:	bf44      	itt	mi
 8004ae8:	f043 0320 	orrmi.w	r3, r3, #32
 8004aec:	6023      	strmi	r3, [r4, #0]
 8004aee:	b11d      	cbz	r5, 8004af8 <_printf_i+0x1a0>
 8004af0:	2310      	movs	r3, #16
 8004af2:	e7ab      	b.n	8004a4c <_printf_i+0xf4>
 8004af4:	4826      	ldr	r0, [pc, #152]	@ (8004b90 <_printf_i+0x238>)
 8004af6:	e7e9      	b.n	8004acc <_printf_i+0x174>
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	f023 0320 	bic.w	r3, r3, #32
 8004afe:	6023      	str	r3, [r4, #0]
 8004b00:	e7f6      	b.n	8004af0 <_printf_i+0x198>
 8004b02:	4616      	mov	r6, r2
 8004b04:	e7bd      	b.n	8004a82 <_printf_i+0x12a>
 8004b06:	6833      	ldr	r3, [r6, #0]
 8004b08:	6825      	ldr	r5, [r4, #0]
 8004b0a:	1d18      	adds	r0, r3, #4
 8004b0c:	6961      	ldr	r1, [r4, #20]
 8004b0e:	6030      	str	r0, [r6, #0]
 8004b10:	062e      	lsls	r6, r5, #24
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	d501      	bpl.n	8004b1a <_printf_i+0x1c2>
 8004b16:	6019      	str	r1, [r3, #0]
 8004b18:	e002      	b.n	8004b20 <_printf_i+0x1c8>
 8004b1a:	0668      	lsls	r0, r5, #25
 8004b1c:	d5fb      	bpl.n	8004b16 <_printf_i+0x1be>
 8004b1e:	8019      	strh	r1, [r3, #0]
 8004b20:	2300      	movs	r3, #0
 8004b22:	4616      	mov	r6, r2
 8004b24:	6123      	str	r3, [r4, #16]
 8004b26:	e7bc      	b.n	8004aa2 <_printf_i+0x14a>
 8004b28:	6833      	ldr	r3, [r6, #0]
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	1d1a      	adds	r2, r3, #4
 8004b2e:	6032      	str	r2, [r6, #0]
 8004b30:	681e      	ldr	r6, [r3, #0]
 8004b32:	6862      	ldr	r2, [r4, #4]
 8004b34:	4630      	mov	r0, r6
 8004b36:	f000 f907 	bl	8004d48 <memchr>
 8004b3a:	b108      	cbz	r0, 8004b40 <_printf_i+0x1e8>
 8004b3c:	1b80      	subs	r0, r0, r6
 8004b3e:	6060      	str	r0, [r4, #4]
 8004b40:	6863      	ldr	r3, [r4, #4]
 8004b42:	6123      	str	r3, [r4, #16]
 8004b44:	2300      	movs	r3, #0
 8004b46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b4a:	e7aa      	b.n	8004aa2 <_printf_i+0x14a>
 8004b4c:	4632      	mov	r2, r6
 8004b4e:	4649      	mov	r1, r9
 8004b50:	4640      	mov	r0, r8
 8004b52:	6923      	ldr	r3, [r4, #16]
 8004b54:	47d0      	blx	sl
 8004b56:	3001      	adds	r0, #1
 8004b58:	d0ad      	beq.n	8004ab6 <_printf_i+0x15e>
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	079b      	lsls	r3, r3, #30
 8004b5e:	d413      	bmi.n	8004b88 <_printf_i+0x230>
 8004b60:	68e0      	ldr	r0, [r4, #12]
 8004b62:	9b03      	ldr	r3, [sp, #12]
 8004b64:	4298      	cmp	r0, r3
 8004b66:	bfb8      	it	lt
 8004b68:	4618      	movlt	r0, r3
 8004b6a:	e7a6      	b.n	8004aba <_printf_i+0x162>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	4632      	mov	r2, r6
 8004b70:	4649      	mov	r1, r9
 8004b72:	4640      	mov	r0, r8
 8004b74:	47d0      	blx	sl
 8004b76:	3001      	adds	r0, #1
 8004b78:	d09d      	beq.n	8004ab6 <_printf_i+0x15e>
 8004b7a:	3501      	adds	r5, #1
 8004b7c:	68e3      	ldr	r3, [r4, #12]
 8004b7e:	9903      	ldr	r1, [sp, #12]
 8004b80:	1a5b      	subs	r3, r3, r1
 8004b82:	42ab      	cmp	r3, r5
 8004b84:	dcf2      	bgt.n	8004b6c <_printf_i+0x214>
 8004b86:	e7eb      	b.n	8004b60 <_printf_i+0x208>
 8004b88:	2500      	movs	r5, #0
 8004b8a:	f104 0619 	add.w	r6, r4, #25
 8004b8e:	e7f5      	b.n	8004b7c <_printf_i+0x224>
 8004b90:	080050a1 	.word	0x080050a1
 8004b94:	080050b2 	.word	0x080050b2

08004b98 <__swbuf_r>:
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	460e      	mov	r6, r1
 8004b9c:	4614      	mov	r4, r2
 8004b9e:	4605      	mov	r5, r0
 8004ba0:	b118      	cbz	r0, 8004baa <__swbuf_r+0x12>
 8004ba2:	6a03      	ldr	r3, [r0, #32]
 8004ba4:	b90b      	cbnz	r3, 8004baa <__swbuf_r+0x12>
 8004ba6:	f7ff fa7f 	bl	80040a8 <__sinit>
 8004baa:	69a3      	ldr	r3, [r4, #24]
 8004bac:	60a3      	str	r3, [r4, #8]
 8004bae:	89a3      	ldrh	r3, [r4, #12]
 8004bb0:	071a      	lsls	r2, r3, #28
 8004bb2:	d501      	bpl.n	8004bb8 <__swbuf_r+0x20>
 8004bb4:	6923      	ldr	r3, [r4, #16]
 8004bb6:	b943      	cbnz	r3, 8004bca <__swbuf_r+0x32>
 8004bb8:	4621      	mov	r1, r4
 8004bba:	4628      	mov	r0, r5
 8004bbc:	f000 f82a 	bl	8004c14 <__swsetup_r>
 8004bc0:	b118      	cbz	r0, 8004bca <__swbuf_r+0x32>
 8004bc2:	f04f 37ff 	mov.w	r7, #4294967295
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	6922      	ldr	r2, [r4, #16]
 8004bce:	b2f6      	uxtb	r6, r6
 8004bd0:	1a98      	subs	r0, r3, r2
 8004bd2:	6963      	ldr	r3, [r4, #20]
 8004bd4:	4637      	mov	r7, r6
 8004bd6:	4283      	cmp	r3, r0
 8004bd8:	dc05      	bgt.n	8004be6 <__swbuf_r+0x4e>
 8004bda:	4621      	mov	r1, r4
 8004bdc:	4628      	mov	r0, r5
 8004bde:	f7ff fcc9 	bl	8004574 <_fflush_r>
 8004be2:	2800      	cmp	r0, #0
 8004be4:	d1ed      	bne.n	8004bc2 <__swbuf_r+0x2a>
 8004be6:	68a3      	ldr	r3, [r4, #8]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	60a3      	str	r3, [r4, #8]
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	6022      	str	r2, [r4, #0]
 8004bf2:	701e      	strb	r6, [r3, #0]
 8004bf4:	6962      	ldr	r2, [r4, #20]
 8004bf6:	1c43      	adds	r3, r0, #1
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d004      	beq.n	8004c06 <__swbuf_r+0x6e>
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	07db      	lsls	r3, r3, #31
 8004c00:	d5e1      	bpl.n	8004bc6 <__swbuf_r+0x2e>
 8004c02:	2e0a      	cmp	r6, #10
 8004c04:	d1df      	bne.n	8004bc6 <__swbuf_r+0x2e>
 8004c06:	4621      	mov	r1, r4
 8004c08:	4628      	mov	r0, r5
 8004c0a:	f7ff fcb3 	bl	8004574 <_fflush_r>
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d0d9      	beq.n	8004bc6 <__swbuf_r+0x2e>
 8004c12:	e7d6      	b.n	8004bc2 <__swbuf_r+0x2a>

08004c14 <__swsetup_r>:
 8004c14:	b538      	push	{r3, r4, r5, lr}
 8004c16:	4b29      	ldr	r3, [pc, #164]	@ (8004cbc <__swsetup_r+0xa8>)
 8004c18:	4605      	mov	r5, r0
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	460c      	mov	r4, r1
 8004c1e:	b118      	cbz	r0, 8004c28 <__swsetup_r+0x14>
 8004c20:	6a03      	ldr	r3, [r0, #32]
 8004c22:	b90b      	cbnz	r3, 8004c28 <__swsetup_r+0x14>
 8004c24:	f7ff fa40 	bl	80040a8 <__sinit>
 8004c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c2c:	0719      	lsls	r1, r3, #28
 8004c2e:	d422      	bmi.n	8004c76 <__swsetup_r+0x62>
 8004c30:	06da      	lsls	r2, r3, #27
 8004c32:	d407      	bmi.n	8004c44 <__swsetup_r+0x30>
 8004c34:	2209      	movs	r2, #9
 8004c36:	602a      	str	r2, [r5, #0]
 8004c38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c40:	81a3      	strh	r3, [r4, #12]
 8004c42:	e033      	b.n	8004cac <__swsetup_r+0x98>
 8004c44:	0758      	lsls	r0, r3, #29
 8004c46:	d512      	bpl.n	8004c6e <__swsetup_r+0x5a>
 8004c48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c4a:	b141      	cbz	r1, 8004c5e <__swsetup_r+0x4a>
 8004c4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c50:	4299      	cmp	r1, r3
 8004c52:	d002      	beq.n	8004c5a <__swsetup_r+0x46>
 8004c54:	4628      	mov	r0, r5
 8004c56:	f7ff fbbd 	bl	80043d4 <_free_r>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c5e:	89a3      	ldrh	r3, [r4, #12]
 8004c60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c64:	81a3      	strh	r3, [r4, #12]
 8004c66:	2300      	movs	r3, #0
 8004c68:	6063      	str	r3, [r4, #4]
 8004c6a:	6923      	ldr	r3, [r4, #16]
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	89a3      	ldrh	r3, [r4, #12]
 8004c70:	f043 0308 	orr.w	r3, r3, #8
 8004c74:	81a3      	strh	r3, [r4, #12]
 8004c76:	6923      	ldr	r3, [r4, #16]
 8004c78:	b94b      	cbnz	r3, 8004c8e <__swsetup_r+0x7a>
 8004c7a:	89a3      	ldrh	r3, [r4, #12]
 8004c7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c84:	d003      	beq.n	8004c8e <__swsetup_r+0x7a>
 8004c86:	4621      	mov	r1, r4
 8004c88:	4628      	mov	r0, r5
 8004c8a:	f000 f890 	bl	8004dae <__smakebuf_r>
 8004c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c92:	f013 0201 	ands.w	r2, r3, #1
 8004c96:	d00a      	beq.n	8004cae <__swsetup_r+0x9a>
 8004c98:	2200      	movs	r2, #0
 8004c9a:	60a2      	str	r2, [r4, #8]
 8004c9c:	6962      	ldr	r2, [r4, #20]
 8004c9e:	4252      	negs	r2, r2
 8004ca0:	61a2      	str	r2, [r4, #24]
 8004ca2:	6922      	ldr	r2, [r4, #16]
 8004ca4:	b942      	cbnz	r2, 8004cb8 <__swsetup_r+0xa4>
 8004ca6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004caa:	d1c5      	bne.n	8004c38 <__swsetup_r+0x24>
 8004cac:	bd38      	pop	{r3, r4, r5, pc}
 8004cae:	0799      	lsls	r1, r3, #30
 8004cb0:	bf58      	it	pl
 8004cb2:	6962      	ldrpl	r2, [r4, #20]
 8004cb4:	60a2      	str	r2, [r4, #8]
 8004cb6:	e7f4      	b.n	8004ca2 <__swsetup_r+0x8e>
 8004cb8:	2000      	movs	r0, #0
 8004cba:	e7f7      	b.n	8004cac <__swsetup_r+0x98>
 8004cbc:	20000018 	.word	0x20000018

08004cc0 <_raise_r>:
 8004cc0:	291f      	cmp	r1, #31
 8004cc2:	b538      	push	{r3, r4, r5, lr}
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	d904      	bls.n	8004cd4 <_raise_r+0x14>
 8004cca:	2316      	movs	r3, #22
 8004ccc:	6003      	str	r3, [r0, #0]
 8004cce:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd2:	bd38      	pop	{r3, r4, r5, pc}
 8004cd4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004cd6:	b112      	cbz	r2, 8004cde <_raise_r+0x1e>
 8004cd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004cdc:	b94b      	cbnz	r3, 8004cf2 <_raise_r+0x32>
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f000 f830 	bl	8004d44 <_getpid_r>
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	4601      	mov	r1, r0
 8004ce8:	4628      	mov	r0, r5
 8004cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cee:	f000 b817 	b.w	8004d20 <_kill_r>
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d00a      	beq.n	8004d0c <_raise_r+0x4c>
 8004cf6:	1c59      	adds	r1, r3, #1
 8004cf8:	d103      	bne.n	8004d02 <_raise_r+0x42>
 8004cfa:	2316      	movs	r3, #22
 8004cfc:	6003      	str	r3, [r0, #0]
 8004cfe:	2001      	movs	r0, #1
 8004d00:	e7e7      	b.n	8004cd2 <_raise_r+0x12>
 8004d02:	2100      	movs	r1, #0
 8004d04:	4620      	mov	r0, r4
 8004d06:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004d0a:	4798      	blx	r3
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	e7e0      	b.n	8004cd2 <_raise_r+0x12>

08004d10 <raise>:
 8004d10:	4b02      	ldr	r3, [pc, #8]	@ (8004d1c <raise+0xc>)
 8004d12:	4601      	mov	r1, r0
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	f7ff bfd3 	b.w	8004cc0 <_raise_r>
 8004d1a:	bf00      	nop
 8004d1c:	20000018 	.word	0x20000018

08004d20 <_kill_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	2300      	movs	r3, #0
 8004d24:	4d06      	ldr	r5, [pc, #24]	@ (8004d40 <_kill_r+0x20>)
 8004d26:	4604      	mov	r4, r0
 8004d28:	4608      	mov	r0, r1
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	602b      	str	r3, [r5, #0]
 8004d2e:	f7fc fabe 	bl	80012ae <_kill>
 8004d32:	1c43      	adds	r3, r0, #1
 8004d34:	d102      	bne.n	8004d3c <_kill_r+0x1c>
 8004d36:	682b      	ldr	r3, [r5, #0]
 8004d38:	b103      	cbz	r3, 8004d3c <_kill_r+0x1c>
 8004d3a:	6023      	str	r3, [r4, #0]
 8004d3c:	bd38      	pop	{r3, r4, r5, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000300 	.word	0x20000300

08004d44 <_getpid_r>:
 8004d44:	f7fc baac 	b.w	80012a0 <_getpid>

08004d48 <memchr>:
 8004d48:	4603      	mov	r3, r0
 8004d4a:	b510      	push	{r4, lr}
 8004d4c:	b2c9      	uxtb	r1, r1
 8004d4e:	4402      	add	r2, r0
 8004d50:	4293      	cmp	r3, r2
 8004d52:	4618      	mov	r0, r3
 8004d54:	d101      	bne.n	8004d5a <memchr+0x12>
 8004d56:	2000      	movs	r0, #0
 8004d58:	e003      	b.n	8004d62 <memchr+0x1a>
 8004d5a:	7804      	ldrb	r4, [r0, #0]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	428c      	cmp	r4, r1
 8004d60:	d1f6      	bne.n	8004d50 <memchr+0x8>
 8004d62:	bd10      	pop	{r4, pc}

08004d64 <__swhatbuf_r>:
 8004d64:	b570      	push	{r4, r5, r6, lr}
 8004d66:	460c      	mov	r4, r1
 8004d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d6c:	4615      	mov	r5, r2
 8004d6e:	2900      	cmp	r1, #0
 8004d70:	461e      	mov	r6, r3
 8004d72:	b096      	sub	sp, #88	@ 0x58
 8004d74:	da0c      	bge.n	8004d90 <__swhatbuf_r+0x2c>
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	2100      	movs	r1, #0
 8004d7a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d7e:	bf14      	ite	ne
 8004d80:	2340      	movne	r3, #64	@ 0x40
 8004d82:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d86:	2000      	movs	r0, #0
 8004d88:	6031      	str	r1, [r6, #0]
 8004d8a:	602b      	str	r3, [r5, #0]
 8004d8c:	b016      	add	sp, #88	@ 0x58
 8004d8e:	bd70      	pop	{r4, r5, r6, pc}
 8004d90:	466a      	mov	r2, sp
 8004d92:	f000 f849 	bl	8004e28 <_fstat_r>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	dbed      	blt.n	8004d76 <__swhatbuf_r+0x12>
 8004d9a:	9901      	ldr	r1, [sp, #4]
 8004d9c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004da0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004da4:	4259      	negs	r1, r3
 8004da6:	4159      	adcs	r1, r3
 8004da8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dac:	e7eb      	b.n	8004d86 <__swhatbuf_r+0x22>

08004dae <__smakebuf_r>:
 8004dae:	898b      	ldrh	r3, [r1, #12]
 8004db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004db2:	079d      	lsls	r5, r3, #30
 8004db4:	4606      	mov	r6, r0
 8004db6:	460c      	mov	r4, r1
 8004db8:	d507      	bpl.n	8004dca <__smakebuf_r+0x1c>
 8004dba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004dbe:	6023      	str	r3, [r4, #0]
 8004dc0:	6123      	str	r3, [r4, #16]
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	6163      	str	r3, [r4, #20]
 8004dc6:	b003      	add	sp, #12
 8004dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dca:	466a      	mov	r2, sp
 8004dcc:	ab01      	add	r3, sp, #4
 8004dce:	f7ff ffc9 	bl	8004d64 <__swhatbuf_r>
 8004dd2:	9f00      	ldr	r7, [sp, #0]
 8004dd4:	4605      	mov	r5, r0
 8004dd6:	4639      	mov	r1, r7
 8004dd8:	4630      	mov	r0, r6
 8004dda:	f7fe ff93 	bl	8003d04 <_malloc_r>
 8004dde:	b948      	cbnz	r0, 8004df4 <__smakebuf_r+0x46>
 8004de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004de4:	059a      	lsls	r2, r3, #22
 8004de6:	d4ee      	bmi.n	8004dc6 <__smakebuf_r+0x18>
 8004de8:	f023 0303 	bic.w	r3, r3, #3
 8004dec:	f043 0302 	orr.w	r3, r3, #2
 8004df0:	81a3      	strh	r3, [r4, #12]
 8004df2:	e7e2      	b.n	8004dba <__smakebuf_r+0xc>
 8004df4:	89a3      	ldrh	r3, [r4, #12]
 8004df6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dfe:	81a3      	strh	r3, [r4, #12]
 8004e00:	9b01      	ldr	r3, [sp, #4]
 8004e02:	6020      	str	r0, [r4, #0]
 8004e04:	b15b      	cbz	r3, 8004e1e <__smakebuf_r+0x70>
 8004e06:	4630      	mov	r0, r6
 8004e08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e0c:	f000 f81e 	bl	8004e4c <_isatty_r>
 8004e10:	b128      	cbz	r0, 8004e1e <__smakebuf_r+0x70>
 8004e12:	89a3      	ldrh	r3, [r4, #12]
 8004e14:	f023 0303 	bic.w	r3, r3, #3
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	81a3      	strh	r3, [r4, #12]
 8004e1e:	89a3      	ldrh	r3, [r4, #12]
 8004e20:	431d      	orrs	r5, r3
 8004e22:	81a5      	strh	r5, [r4, #12]
 8004e24:	e7cf      	b.n	8004dc6 <__smakebuf_r+0x18>
	...

08004e28 <_fstat_r>:
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	4d06      	ldr	r5, [pc, #24]	@ (8004e48 <_fstat_r+0x20>)
 8004e2e:	4604      	mov	r4, r0
 8004e30:	4608      	mov	r0, r1
 8004e32:	4611      	mov	r1, r2
 8004e34:	602b      	str	r3, [r5, #0]
 8004e36:	f7fc fa99 	bl	800136c <_fstat>
 8004e3a:	1c43      	adds	r3, r0, #1
 8004e3c:	d102      	bne.n	8004e44 <_fstat_r+0x1c>
 8004e3e:	682b      	ldr	r3, [r5, #0]
 8004e40:	b103      	cbz	r3, 8004e44 <_fstat_r+0x1c>
 8004e42:	6023      	str	r3, [r4, #0]
 8004e44:	bd38      	pop	{r3, r4, r5, pc}
 8004e46:	bf00      	nop
 8004e48:	20000300 	.word	0x20000300

08004e4c <_isatty_r>:
 8004e4c:	b538      	push	{r3, r4, r5, lr}
 8004e4e:	2300      	movs	r3, #0
 8004e50:	4d05      	ldr	r5, [pc, #20]	@ (8004e68 <_isatty_r+0x1c>)
 8004e52:	4604      	mov	r4, r0
 8004e54:	4608      	mov	r0, r1
 8004e56:	602b      	str	r3, [r5, #0]
 8004e58:	f7fc fa97 	bl	800138a <_isatty>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d102      	bne.n	8004e66 <_isatty_r+0x1a>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	b103      	cbz	r3, 8004e66 <_isatty_r+0x1a>
 8004e64:	6023      	str	r3, [r4, #0]
 8004e66:	bd38      	pop	{r3, r4, r5, pc}
 8004e68:	20000300 	.word	0x20000300

08004e6c <_init>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	bf00      	nop
 8004e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e72:	bc08      	pop	{r3}
 8004e74:	469e      	mov	lr, r3
 8004e76:	4770      	bx	lr

08004e78 <_fini>:
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	bf00      	nop
 8004e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7e:	bc08      	pop	{r3}
 8004e80:	469e      	mov	lr, r3
 8004e82:	4770      	bx	lr
