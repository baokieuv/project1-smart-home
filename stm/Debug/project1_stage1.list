
project1_stage1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004300  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  0800440c  0800440c  0000540c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004638  08004638  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004638  08004638  00005638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004640  08004640  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004640  08004640  00005640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004644  08004644  00005644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004648  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  080046b0  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  080046b0  000062b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c434  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dec  00000000  00000000  000124c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  000142b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009fb  00000000  00000000  00014f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018288  00000000  00000000  0001597b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb4e  00000000  00000000  0002dc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089d1c  00000000  00000000  0003c751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c646d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f98  00000000  00000000  000c64b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000ca448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080043f4 	.word	0x080043f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080043f4 	.word	0x080043f4

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fc54 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f81e 	bl	80001a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f910 	bl	8000390 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000170:	f000 f860 	bl	8000234 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000174:	f000 f8e2 	bl	800033c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000178:	f000 f8c2 	bl	8000300 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800017c:	2104      	movs	r1, #4
 800017e:	4807      	ldr	r0, [pc, #28]	@ (800019c <main+0x3c>)
 8000180:	f001 fd40 	bl	8001c04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000184:	2108      	movs	r1, #8
 8000186:	4805      	ldr	r0, [pc, #20]	@ (800019c <main+0x3c>)
 8000188:	f001 fd3c 	bl	8001c04 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1, &size, 1);
 800018c:	2201      	movs	r2, #1
 800018e:	4904      	ldr	r1, [pc, #16]	@ (80001a0 <main+0x40>)
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <main+0x44>)
 8000192:	f002 fb0a 	bl	80027aa <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000196:	bf00      	nop
 8000198:	e7fd      	b.n	8000196 <main+0x36>
 800019a:	bf00      	nop
 800019c:	20000084 	.word	0x20000084
 80001a0:	2000015c 	.word	0x2000015c
 80001a4:	20000114 	.word	0x20000114

080001a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b090      	sub	sp, #64	@ 0x40
 80001ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ae:	f107 0318 	add.w	r3, r7, #24
 80001b2:	2228      	movs	r2, #40	@ 0x28
 80001b4:	2100      	movs	r1, #0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f003 fad1 	bl	800375e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
 80001c2:	605a      	str	r2, [r3, #4]
 80001c4:	609a      	str	r2, [r3, #8]
 80001c6:	60da      	str	r2, [r3, #12]
 80001c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ca:	2301      	movs	r3, #1
 80001cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d8:	2301      	movs	r3, #1
 80001da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001dc:	2302      	movs	r3, #2
 80001de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 80001e6:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80001ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ec:	f107 0318 	add.w	r3, r7, #24
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 ffdd 	bl	80011b0 <HAL_RCC_OscConfig>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001fc:	f000 f9dc 	bl	80005b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000200:	230f      	movs	r3, #15
 8000202:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000204:	2302      	movs	r3, #2
 8000206:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000208:	2390      	movs	r3, #144	@ 0x90
 800020a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800020c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	2101      	movs	r1, #1
 800021a:	4618      	mov	r0, r3
 800021c:	f001 fa4a 	bl	80016b4 <HAL_RCC_ClockConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000226:	f000 f9c7 	bl	80005b8 <Error_Handler>
  }
}
 800022a:	bf00      	nop
 800022c:	3740      	adds	r7, #64	@ 0x40
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b08a      	sub	sp, #40	@ 0x28
 8000238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800023a:	f107 0320 	add.w	r3, r7, #32
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]
 8000252:	615a      	str	r2, [r3, #20]
 8000254:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000256:	4b29      	ldr	r3, [pc, #164]	@ (80002fc <MX_TIM2_Init+0xc8>)
 8000258:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800025c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 800025e:	4b27      	ldr	r3, [pc, #156]	@ (80002fc <MX_TIM2_Init+0xc8>)
 8000260:	2263      	movs	r2, #99	@ 0x63
 8000262:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000264:	4b25      	ldr	r3, [pc, #148]	@ (80002fc <MX_TIM2_Init+0xc8>)
 8000266:	2200      	movs	r2, #0
 8000268:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800026a:	4b24      	ldr	r3, [pc, #144]	@ (80002fc <MX_TIM2_Init+0xc8>)
 800026c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000270:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000272:	4b22      	ldr	r3, [pc, #136]	@ (80002fc <MX_TIM2_Init+0xc8>)
 8000274:	2200      	movs	r2, #0
 8000276:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000278:	4b20      	ldr	r3, [pc, #128]	@ (80002fc <MX_TIM2_Init+0xc8>)
 800027a:	2200      	movs	r2, #0
 800027c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800027e:	481f      	ldr	r0, [pc, #124]	@ (80002fc <MX_TIM2_Init+0xc8>)
 8000280:	f001 fc70 	bl	8001b64 <HAL_TIM_PWM_Init>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800028a:	f000 f995 	bl	80005b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800028e:	2300      	movs	r3, #0
 8000290:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000292:	2300      	movs	r3, #0
 8000294:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000296:	f107 0320 	add.w	r3, r7, #32
 800029a:	4619      	mov	r1, r3
 800029c:	4817      	ldr	r0, [pc, #92]	@ (80002fc <MX_TIM2_Init+0xc8>)
 800029e:	f002 f933 	bl	8002508 <HAL_TIMEx_MasterConfigSynchronization>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80002a8:	f000 f986 	bl	80005b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002ac:	2360      	movs	r3, #96	@ 0x60
 80002ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80002b0:	2332      	movs	r3, #50	@ 0x32
 80002b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002b8:	2300      	movs	r3, #0
 80002ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2204      	movs	r2, #4
 80002c0:	4619      	mov	r1, r3
 80002c2:	480e      	ldr	r0, [pc, #56]	@ (80002fc <MX_TIM2_Init+0xc8>)
 80002c4:	f001 fe2a 	bl	8001f1c <HAL_TIM_PWM_ConfigChannel>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80002ce:	f000 f973 	bl	80005b8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2208      	movs	r2, #8
 80002da:	4619      	mov	r1, r3
 80002dc:	4807      	ldr	r0, [pc, #28]	@ (80002fc <MX_TIM2_Init+0xc8>)
 80002de:	f001 fe1d 	bl	8001f1c <HAL_TIM_PWM_ConfigChannel>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80002e8:	f000 f966 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80002ec:	4803      	ldr	r0, [pc, #12]	@ (80002fc <MX_TIM2_Init+0xc8>)
 80002ee:	f000 f9dd 	bl	80006ac <HAL_TIM_MspPostInit>

}
 80002f2:	bf00      	nop
 80002f4:	3728      	adds	r7, #40	@ 0x28
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000084 	.word	0x20000084

08000300 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0

  /* USER CODE END TIM3_Init 0 */
  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000304:	4b0b      	ldr	r3, [pc, #44]	@ (8000334 <MX_TIM3_Init+0x34>)
 8000306:	4a0c      	ldr	r2, [pc, #48]	@ (8000338 <MX_TIM3_Init+0x38>)
 8000308:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 800030a:	4b0a      	ldr	r3, [pc, #40]	@ (8000334 <MX_TIM3_Init+0x34>)
 800030c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000310:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000312:	4b08      	ldr	r3, [pc, #32]	@ (8000334 <MX_TIM3_Init+0x34>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2999;
 8000318:	4b06      	ldr	r3, [pc, #24]	@ (8000334 <MX_TIM3_Init+0x34>)
 800031a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800031e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000320:	4804      	ldr	r0, [pc, #16]	@ (8000334 <MX_TIM3_Init+0x34>)
 8000322:	f001 fb55 	bl	80019d0 <HAL_TIM_Base_Init>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_TIM3_Init+0x30>
  {
    Error_Handler();
 800032c:	f000 f944 	bl	80005b8 <Error_Handler>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  //HAL_TIM_MspPostInit(&htim3);

}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}
 8000334:	200000cc 	.word	0x200000cc
 8000338:	40000400 	.word	0x40000400

0800033c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000340:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000342:	4a12      	ldr	r2, [pc, #72]	@ (800038c <MX_USART1_UART_Init+0x50>)
 8000344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000346:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000348:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800034c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800034e:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000354:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000360:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000362:	220c      	movs	r2, #12
 8000364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000372:	4805      	ldr	r0, [pc, #20]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000374:	f002 f932 	bl	80025dc <HAL_UART_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800037e:	f000 f91b 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000114 	.word	0x20000114
 800038c:	40013800 	.word	0x40013800

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000420 <MX_GPIO_Init+0x90>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000420 <MX_GPIO_Init+0x90>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000420 <MX_GPIO_Init+0x90>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0310 	and.w	r3, r3, #16
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003bc:	4b18      	ldr	r3, [pc, #96]	@ (8000420 <MX_GPIO_Init+0x90>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a17      	ldr	r2, [pc, #92]	@ (8000420 <MX_GPIO_Init+0x90>)
 80003c2:	f043 0320 	orr.w	r3, r3, #32
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b15      	ldr	r3, [pc, #84]	@ (8000420 <MX_GPIO_Init+0x90>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0320 	and.w	r3, r3, #32
 80003d0:	60bb      	str	r3, [r7, #8]
 80003d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d4:	4b12      	ldr	r3, [pc, #72]	@ (8000420 <MX_GPIO_Init+0x90>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a11      	ldr	r2, [pc, #68]	@ (8000420 <MX_GPIO_Init+0x90>)
 80003da:	f043 0304 	orr.w	r3, r3, #4
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000420 <MX_GPIO_Init+0x90>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0304 	and.w	r3, r3, #4
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003f2:	480c      	ldr	r0, [pc, #48]	@ (8000424 <MX_GPIO_Init+0x94>)
 80003f4:	f000 feaa 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 80003f8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80003fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fe:	2301      	movs	r3, #1
 8000400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000406:	2301      	movs	r3, #1
 8000408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	4619      	mov	r1, r3
 8000410:	4804      	ldr	r0, [pc, #16]	@ (8000424 <MX_GPIO_Init+0x94>)
 8000412:	f000 fd1f 	bl	8000e54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000416:	bf00      	nop
 8000418:	3720      	adds	r7, #32
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000
 8000424:	40011000 	.word	0x40011000

08000428 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a41      	ldr	r2, [pc, #260]	@ (800053c <HAL_UART_RxCpltCallback+0x114>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d17c      	bne.n	8000534 <HAL_UART_RxCpltCallback+0x10c>
		char *data = (char*) malloc(100);
 800043a:	2064      	movs	r0, #100	@ 0x64
 800043c:	f002 ff48 	bl	80032d0 <malloc>
 8000440:	4603      	mov	r3, r0
 8000442:	617b      	str	r3, [r7, #20]
		uint8_t s = size;
 8000444:	4b3e      	ldr	r3, [pc, #248]	@ (8000540 <HAL_UART_RxCpltCallback+0x118>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	74fb      	strb	r3, [r7, #19]
		HAL_UART_Receive(huart, (uint8_t*)data, size, HAL_MAX_DELAY);
 800044a:	4b3d      	ldr	r3, [pc, #244]	@ (8000540 <HAL_UART_RxCpltCallback+0x118>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	461a      	mov	r2, r3
 8000450:	f04f 33ff 	mov.w	r3, #4294967295
 8000454:	6979      	ldr	r1, [r7, #20]
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f002 f910 	bl	800267c <HAL_UART_Receive>
		data[s] = '\0';
 800045c:	7cfb      	ldrb	r3, [r7, #19]
 800045e:	697a      	ldr	r2, [r7, #20]
 8000460:	4413      	add	r3, r2
 8000462:	2200      	movs	r2, #0
 8000464:	701a      	strb	r2, [r3, #0]
	    char *token = strtok(data, "+");
 8000466:	4937      	ldr	r1, [pc, #220]	@ (8000544 <HAL_UART_RxCpltCallback+0x11c>)
 8000468:	6978      	ldr	r0, [r7, #20]
 800046a:	f003 f981 	bl	8003770 <strtok>
 800046e:	60f8      	str	r0, [r7, #12]
	    char *val = strtok(NULL, "+");
 8000470:	4934      	ldr	r1, [pc, #208]	@ (8000544 <HAL_UART_RxCpltCallback+0x11c>)
 8000472:	2000      	movs	r0, #0
 8000474:	f003 f97c 	bl	8003770 <strtok>
 8000478:	60b8      	str	r0, [r7, #8]

	    if(strcmp(token, "LED") == 0){
 800047a:	4933      	ldr	r1, [pc, #204]	@ (8000548 <HAL_UART_RxCpltCallback+0x120>)
 800047c:	68f8      	ldr	r0, [r7, #12]
 800047e:	f7ff fe65 	bl	800014c <strcmp>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d123      	bne.n	80004d0 <HAL_UART_RxCpltCallback+0xa8>
	    	if(strcmp(val, "ON") == 0){
 8000488:	4930      	ldr	r1, [pc, #192]	@ (800054c <HAL_UART_RxCpltCallback+0x124>)
 800048a:	68b8      	ldr	r0, [r7, #8]
 800048c:	f7ff fe5e 	bl	800014c <strcmp>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d105      	bne.n	80004a2 <HAL_UART_RxCpltCallback+0x7a>
	    		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 750);
 8000496:	4b2e      	ldr	r3, [pc, #184]	@ (8000550 <HAL_UART_RxCpltCallback+0x128>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800049e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80004a0:	e040      	b.n	8000524 <HAL_UART_RxCpltCallback+0xfc>
	    	}else if(strcmp(val, "OFF") == 0){
 80004a2:	492c      	ldr	r1, [pc, #176]	@ (8000554 <HAL_UART_RxCpltCallback+0x12c>)
 80004a4:	68b8      	ldr	r0, [r7, #8]
 80004a6:	f7ff fe51 	bl	800014c <strcmp>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d104      	bne.n	80004ba <HAL_UART_RxCpltCallback+0x92>
	    		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80004b0:	4b27      	ldr	r3, [pc, #156]	@ (8000550 <HAL_UART_RxCpltCallback+0x128>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2200      	movs	r2, #0
 80004b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80004b8:	e034      	b.n	8000524 <HAL_UART_RxCpltCallback+0xfc>
	    	}else{
	    		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, atoi(val)*15);
 80004ba:	68b8      	ldr	r0, [r7, #8]
 80004bc:	f002 ff04 	bl	80032c8 <atoi>
 80004c0:	4602      	mov	r2, r0
 80004c2:	4613      	mov	r3, r2
 80004c4:	011b      	lsls	r3, r3, #4
 80004c6:	1a9a      	subs	r2, r3, r2
 80004c8:	4b21      	ldr	r3, [pc, #132]	@ (8000550 <HAL_UART_RxCpltCallback+0x128>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80004ce:	e029      	b.n	8000524 <HAL_UART_RxCpltCallback+0xfc>
	    	}
	    }
	    else if(strcmp(token, "DOOR") == 0){
 80004d0:	4921      	ldr	r1, [pc, #132]	@ (8000558 <HAL_UART_RxCpltCallback+0x130>)
 80004d2:	68f8      	ldr	r0, [r7, #12]
 80004d4:	f7ff fe3a 	bl	800014c <strcmp>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d122      	bne.n	8000524 <HAL_UART_RxCpltCallback+0xfc>
	    	if(strcmp(val, "OPEN") == 0){
 80004de:	491f      	ldr	r1, [pc, #124]	@ (800055c <HAL_UART_RxCpltCallback+0x134>)
 80004e0:	68b8      	ldr	r0, [r7, #8]
 80004e2:	f7ff fe33 	bl	800014c <strcmp>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d111      	bne.n	8000510 <HAL_UART_RxCpltCallback+0xe8>
	    		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 250);
 80004ec:	4b18      	ldr	r3, [pc, #96]	@ (8000550 <HAL_UART_RxCpltCallback+0x128>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	22fa      	movs	r2, #250	@ 0xfa
 80004f2:	639a      	str	r2, [r3, #56]	@ 0x38
	    		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, ENABLE);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004fa:	4819      	ldr	r0, [pc, #100]	@ (8000560 <HAL_UART_RxCpltCallback+0x138>)
 80004fc:	f000 fe26 	bl	800114c <HAL_GPIO_WritePin>
	    		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000500:	4b18      	ldr	r3, [pc, #96]	@ (8000564 <HAL_UART_RxCpltCallback+0x13c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2200      	movs	r2, #0
 8000506:	625a      	str	r2, [r3, #36]	@ 0x24
	    		HAL_TIM_Base_Start_IT(&htim3);
 8000508:	4816      	ldr	r0, [pc, #88]	@ (8000564 <HAL_UART_RxCpltCallback+0x13c>)
 800050a:	f001 fab1 	bl	8001a70 <HAL_TIM_Base_Start_IT>
 800050e:	e009      	b.n	8000524 <HAL_UART_RxCpltCallback+0xfc>
	    	}else{
	    		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, DISABLE);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000516:	4812      	ldr	r0, [pc, #72]	@ (8000560 <HAL_UART_RxCpltCallback+0x138>)
 8000518:	f000 fe18 	bl	800114c <HAL_GPIO_WritePin>
	    		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 50);
 800051c:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <HAL_UART_RxCpltCallback+0x128>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2232      	movs	r2, #50	@ 0x32
 8000522:	639a      	str	r2, [r3, #56]	@ 0x38
	    	}
	    }
		free(data);
 8000524:	6978      	ldr	r0, [r7, #20]
 8000526:	f002 fedb 	bl	80032e0 <free>

		HAL_UART_Receive_IT(huart, &size, 1);
 800052a:	2201      	movs	r2, #1
 800052c:	4904      	ldr	r1, [pc, #16]	@ (8000540 <HAL_UART_RxCpltCallback+0x118>)
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f002 f93b 	bl	80027aa <HAL_UART_Receive_IT>
	}
}
 8000534:	bf00      	nop
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40013800 	.word	0x40013800
 8000540:	2000015c 	.word	0x2000015c
 8000544:	0800440c 	.word	0x0800440c
 8000548:	08004410 	.word	0x08004410
 800054c:	08004414 	.word	0x08004414
 8000550:	20000084 	.word	0x20000084
 8000554:	08004418 	.word	0x08004418
 8000558:	0800441c 	.word	0x0800441c
 800055c:	08004424 	.word	0x08004424
 8000560:	40011000 	.word	0x40011000
 8000564:	200000cc 	.word	0x200000cc

08000568 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a0c      	ldr	r2, [pc, #48]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d111      	bne.n	800059e <HAL_TIM_PeriodElapsedCallback+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, DISABLE);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000580:	480a      	ldr	r0, [pc, #40]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000582:	f000 fde3 	bl	800114c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 50);
 8000586:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2232      	movs	r2, #50	@ 0x32
 800058c:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_TIM_Base_Stop_IT(&htim3);
 800058e:	4809      	ldr	r0, [pc, #36]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000590:	f001 faba 	bl	8001b08 <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000594:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000598:	4804      	ldr	r0, [pc, #16]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x44>)
 800059a:	f000 fdef 	bl	800117c <HAL_GPIO_TogglePin>
	}
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40000400 	.word	0x40000400
 80005ac:	40011000 	.word	0x40011000
 80005b0:	20000084 	.word	0x20000084
 80005b4:	200000cc 	.word	0x200000cc

080005b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005bc:	b672      	cpsid	i
}
 80005be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <Error_Handler+0x8>

080005c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ca:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <HAL_MspInit+0x5c>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	4a14      	ldr	r2, [pc, #80]	@ (8000620 <HAL_MspInit+0x5c>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6193      	str	r3, [r2, #24]
 80005d6:	4b12      	ldr	r3, [pc, #72]	@ (8000620 <HAL_MspInit+0x5c>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <HAL_MspInit+0x5c>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000620 <HAL_MspInit+0x5c>)
 80005e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <HAL_MspInit+0x5c>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <HAL_MspInit+0x60>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	4a04      	ldr	r2, [pc, #16]	@ (8000624 <HAL_MspInit+0x60>)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	40021000 	.word	0x40021000
 8000624:	40010000 	.word	0x40010000

08000628 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000638:	d10b      	bne.n	8000652 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800063a:	4b08      	ldr	r3, [pc, #32]	@ (800065c <HAL_TIM_PWM_MspInit+0x34>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	4a07      	ldr	r2, [pc, #28]	@ (800065c <HAL_TIM_PWM_MspInit+0x34>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	61d3      	str	r3, [r2, #28]
 8000646:	4b05      	ldr	r3, [pc, #20]	@ (800065c <HAL_TIM_PWM_MspInit+0x34>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	40021000 	.word	0x40021000

08000660 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a0d      	ldr	r2, [pc, #52]	@ (80006a4 <HAL_TIM_Base_MspInit+0x44>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d113      	bne.n	800069a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000672:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <HAL_TIM_Base_MspInit+0x48>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	4a0c      	ldr	r2, [pc, #48]	@ (80006a8 <HAL_TIM_Base_MspInit+0x48>)
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	61d3      	str	r3, [r2, #28]
 800067e:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <HAL_TIM_Base_MspInit+0x48>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800068a:	201d      	movs	r0, #29
 800068c:	f000 fb15 	bl	8000cba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	210f      	movs	r1, #15
 8000694:	201d      	movs	r0, #29
 8000696:	f000 faf4 	bl	8000c82 <HAL_NVIC_SetPriority>
  }

}
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40000400 	.word	0x40000400
 80006a8:	40021000 	.word	0x40021000

080006ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006ca:	d117      	bne.n	80006fc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <HAL_TIM_MspPostInit+0x58>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000704 <HAL_TIM_MspPostInit+0x58>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <HAL_TIM_MspPostInit+0x58>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0304 	and.w	r3, r3, #4
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80006e4:	2306      	movs	r3, #6
 80006e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	4804      	ldr	r0, [pc, #16]	@ (8000708 <HAL_TIM_MspPostInit+0x5c>)
 80006f8:	f000 fbac 	bl	8000e54 <HAL_GPIO_Init>
//  /* USER CODE BEGIN TIM3_MspPostInit 1 */
////
//  /* USER CODE END TIM3_MspPostInit 1 */
//  }

}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021000 	.word	0x40021000
 8000708:	40010800 	.word	0x40010800

0800070c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a20      	ldr	r2, [pc, #128]	@ (80007a8 <HAL_UART_MspInit+0x9c>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d139      	bne.n	80007a0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800072c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ac <HAL_UART_MspInit+0xa0>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a1e      	ldr	r2, [pc, #120]	@ (80007ac <HAL_UART_MspInit+0xa0>)
 8000732:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b1c      	ldr	r3, [pc, #112]	@ (80007ac <HAL_UART_MspInit+0xa0>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	4b19      	ldr	r3, [pc, #100]	@ (80007ac <HAL_UART_MspInit+0xa0>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a18      	ldr	r2, [pc, #96]	@ (80007ac <HAL_UART_MspInit+0xa0>)
 800074a:	f043 0304 	orr.w	r3, r3, #4
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b16      	ldr	r3, [pc, #88]	@ (80007ac <HAL_UART_MspInit+0xa0>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0304 	and.w	r3, r3, #4
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800075c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000760:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	4619      	mov	r1, r3
 8000770:	480f      	ldr	r0, [pc, #60]	@ (80007b0 <HAL_UART_MspInit+0xa4>)
 8000772:	f000 fb6f 	bl	8000e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000776:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800077a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	4619      	mov	r1, r3
 800078a:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <HAL_UART_MspInit+0xa4>)
 800078c:	f000 fb62 	bl	8000e54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	210e      	movs	r1, #14
 8000794:	2025      	movs	r0, #37	@ 0x25
 8000796:	f000 fa74 	bl	8000c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800079a:	2025      	movs	r0, #37	@ 0x25
 800079c:	f000 fa8d 	bl	8000cba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40013800 	.word	0x40013800
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40010800 	.word	0x40010800

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <NMI_Handler+0x4>

080007bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <HardFault_Handler+0x4>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <MemManage_Handler+0x4>

080007cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <UsageFault_Handler+0x4>

080007dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000804:	f000 f94a 	bl	8000a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000810:	4802      	ldr	r0, [pc, #8]	@ (800081c <TIM3_IRQHandler+0x10>)
 8000812:	f001 fa93 	bl	8001d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000cc 	.word	0x200000cc

08000820 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000824:	4802      	ldr	r0, [pc, #8]	@ (8000830 <USART1_IRQHandler+0x10>)
 8000826:	f001 ffe5 	bl	80027f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000114 	.word	0x20000114

08000834 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return 1;
 8000838:	2301      	movs	r3, #1
}
 800083a:	4618      	mov	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr

08000842 <_kill>:

int _kill(int pid, int sig)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b082      	sub	sp, #8
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
 800084a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800084c:	f003 f842 	bl	80038d4 <__errno>
 8000850:	4603      	mov	r3, r0
 8000852:	2216      	movs	r2, #22
 8000854:	601a      	str	r2, [r3, #0]
  return -1;
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <_exit>:

void _exit (int status)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800086a:	f04f 31ff 	mov.w	r1, #4294967295
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff ffe7 	bl	8000842 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <_exit+0x12>

08000878 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	e00a      	b.n	80008a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800088a:	f3af 8000 	nop.w
 800088e:	4601      	mov	r1, r0
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	60ba      	str	r2, [r7, #8]
 8000896:	b2ca      	uxtb	r2, r1
 8000898:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	3301      	adds	r3, #1
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697a      	ldr	r2, [r7, #20]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	dbf0      	blt.n	800088a <_read+0x12>
  }

  return len;
 80008a8:	687b      	ldr	r3, [r7, #4]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b086      	sub	sp, #24
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	e009      	b.n	80008d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	60ba      	str	r2, [r7, #8]
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	3301      	adds	r3, #1
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697a      	ldr	r2, [r7, #20]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	429a      	cmp	r2, r3
 80008de:	dbf1      	blt.n	80008c4 <_write+0x12>
  }
  return len;
 80008e0:	687b      	ldr	r3, [r7, #4]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <_close>:

int _close(int file)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000910:	605a      	str	r2, [r3, #4]
  return 0;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr

0800091e <_isatty>:

int _isatty(int file)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000926:	2301      	movs	r3, #1
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr

08000932 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000932:	b480      	push	{r7}
 8000934:	b085      	sub	sp, #20
 8000936:	af00      	add	r7, sp, #0
 8000938:	60f8      	str	r0, [r7, #12]
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800093e:	2300      	movs	r3, #0
}
 8000940:	4618      	mov	r0, r3
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
	...

0800094c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000954:	4a14      	ldr	r2, [pc, #80]	@ (80009a8 <_sbrk+0x5c>)
 8000956:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <_sbrk+0x60>)
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000960:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <_sbrk+0x64>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d102      	bne.n	800096e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000968:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <_sbrk+0x64>)
 800096a:	4a12      	ldr	r2, [pc, #72]	@ (80009b4 <_sbrk+0x68>)
 800096c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800096e:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	429a      	cmp	r2, r3
 800097a:	d207      	bcs.n	800098c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800097c:	f002 ffaa 	bl	80038d4 <__errno>
 8000980:	4603      	mov	r3, r0
 8000982:	220c      	movs	r2, #12
 8000984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000986:	f04f 33ff 	mov.w	r3, #4294967295
 800098a:	e009      	b.n	80009a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800098c:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000992:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <_sbrk+0x64>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	4a05      	ldr	r2, [pc, #20]	@ (80009b0 <_sbrk+0x64>)
 800099c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800099e:	68fb      	ldr	r3, [r7, #12]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20002800 	.word	0x20002800
 80009ac:	00000400 	.word	0x00000400
 80009b0:	20000160 	.word	0x20000160
 80009b4:	200002b8 	.word	0x200002b8

080009b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009c4:	f7ff fff8 	bl	80009b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c8:	480b      	ldr	r0, [pc, #44]	@ (80009f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009ca:	490c      	ldr	r1, [pc, #48]	@ (80009fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000a00 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a09      	ldr	r2, [pc, #36]	@ (8000a04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009e0:	4c09      	ldr	r4, [pc, #36]	@ (8000a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ee:	f002 ff77 	bl	80038e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f2:	f7ff fbb5 	bl	8000160 <main>
  bx lr
 80009f6:	4770      	bx	lr
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a00:	08004648 	.word	0x08004648
  ldr r2, =_sbss
 8000a04:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a08:	200002b4 	.word	0x200002b4

08000a0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC1_2_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a14:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <HAL_Init+0x28>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a07      	ldr	r2, [pc, #28]	@ (8000a38 <HAL_Init+0x28>)
 8000a1a:	f043 0310 	orr.w	r3, r3, #16
 8000a1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a20:	2003      	movs	r0, #3
 8000a22:	f000 f923 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a26:	200d      	movs	r0, #13
 8000a28:	f000 f808 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2c:	f7ff fdca 	bl	80005c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40022000 	.word	0x40022000

08000a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a44:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <HAL_InitTick+0x54>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <HAL_InitTick+0x58>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f93b 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e00e      	b.n	8000a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d80a      	bhi.n	8000a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	f000 f903 	bl	8000c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a7c:	4a06      	ldr	r2, [pc, #24]	@ (8000a98 <HAL_InitTick+0x5c>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e000      	b.n	8000a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000000 	.word	0x20000000
 8000a94:	20000008 	.word	0x20000008
 8000a98:	20000004 	.word	0x20000004

08000a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa0:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <HAL_IncTick+0x1c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <HAL_IncTick+0x20>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a03      	ldr	r2, [pc, #12]	@ (8000abc <HAL_IncTick+0x20>)
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000164 	.word	0x20000164

08000ac0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b02      	ldr	r3, [pc, #8]	@ (8000ad0 <HAL_GetTick+0x10>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	20000164 	.word	0x20000164

08000ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	@ (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	db0b      	blt.n	8000b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 021f 	and.w	r2, r3, #31
 8000b50:	4906      	ldr	r1, [pc, #24]	@ (8000b6c <__NVIC_EnableIRQ+0x34>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	095b      	lsrs	r3, r3, #5
 8000b58:	2001      	movs	r0, #1
 8000b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	@ (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	@ (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	@ 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	@ 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f7ff ff90 	bl	8000b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff2d 	bl	8000ad4 <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c94:	f7ff ff42 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff ff90 	bl	8000bc4 <NVIC_EncodePriority>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff5f 	bl	8000b70 <__NVIC_SetPriority>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff35 	bl	8000b38 <__NVIC_EnableIRQ>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ffa2 	bl	8000c28 <SysTick_Config>
 8000ce4:	4603      	mov	r3, r0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b085      	sub	sp, #20
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d008      	beq.n	8000d18 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2204      	movs	r2, #4
 8000d0a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e020      	b.n	8000d5a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 020e 	bic.w	r2, r2, #14
 8000d26:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f022 0201 	bic.w	r2, r2, #1
 8000d36:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d40:	2101      	movs	r1, #1
 8000d42:	fa01 f202 	lsl.w	r2, r1, r2
 8000d46:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d005      	beq.n	8000d88 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2204      	movs	r2, #4
 8000d80:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	73fb      	strb	r3, [r7, #15]
 8000d86:	e051      	b.n	8000e2c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f022 020e 	bic.w	r2, r2, #14
 8000d96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 0201 	bic.w	r2, r2, #1
 8000da6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a22      	ldr	r2, [pc, #136]	@ (8000e38 <HAL_DMA_Abort_IT+0xd4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d029      	beq.n	8000e06 <HAL_DMA_Abort_IT+0xa2>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a21      	ldr	r2, [pc, #132]	@ (8000e3c <HAL_DMA_Abort_IT+0xd8>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d022      	beq.n	8000e02 <HAL_DMA_Abort_IT+0x9e>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8000e40 <HAL_DMA_Abort_IT+0xdc>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d01a      	beq.n	8000dfc <HAL_DMA_Abort_IT+0x98>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a1e      	ldr	r2, [pc, #120]	@ (8000e44 <HAL_DMA_Abort_IT+0xe0>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d012      	beq.n	8000df6 <HAL_DMA_Abort_IT+0x92>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8000e48 <HAL_DMA_Abort_IT+0xe4>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d00a      	beq.n	8000df0 <HAL_DMA_Abort_IT+0x8c>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a1b      	ldr	r2, [pc, #108]	@ (8000e4c <HAL_DMA_Abort_IT+0xe8>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d102      	bne.n	8000dea <HAL_DMA_Abort_IT+0x86>
 8000de4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000de8:	e00e      	b.n	8000e08 <HAL_DMA_Abort_IT+0xa4>
 8000dea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000dee:	e00b      	b.n	8000e08 <HAL_DMA_Abort_IT+0xa4>
 8000df0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df4:	e008      	b.n	8000e08 <HAL_DMA_Abort_IT+0xa4>
 8000df6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dfa:	e005      	b.n	8000e08 <HAL_DMA_Abort_IT+0xa4>
 8000dfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e00:	e002      	b.n	8000e08 <HAL_DMA_Abort_IT+0xa4>
 8000e02:	2310      	movs	r3, #16
 8000e04:	e000      	b.n	8000e08 <HAL_DMA_Abort_IT+0xa4>
 8000e06:	2301      	movs	r3, #1
 8000e08:	4a11      	ldr	r2, [pc, #68]	@ (8000e50 <HAL_DMA_Abort_IT+0xec>)
 8000e0a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	4798      	blx	r3
    } 
  }
  return status;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40020008 	.word	0x40020008
 8000e3c:	4002001c 	.word	0x4002001c
 8000e40:	40020030 	.word	0x40020030
 8000e44:	40020044 	.word	0x40020044
 8000e48:	40020058 	.word	0x40020058
 8000e4c:	4002006c 	.word	0x4002006c
 8000e50:	40020000 	.word	0x40020000

08000e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b08b      	sub	sp, #44	@ 0x2c
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e66:	e161      	b.n	800112c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	69fa      	ldr	r2, [r7, #28]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	f040 8150 	bne.w	8001126 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	4a97      	ldr	r2, [pc, #604]	@ (80010e8 <HAL_GPIO_Init+0x294>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d05e      	beq.n	8000f4e <HAL_GPIO_Init+0xfa>
 8000e90:	4a95      	ldr	r2, [pc, #596]	@ (80010e8 <HAL_GPIO_Init+0x294>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d875      	bhi.n	8000f82 <HAL_GPIO_Init+0x12e>
 8000e96:	4a95      	ldr	r2, [pc, #596]	@ (80010ec <HAL_GPIO_Init+0x298>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d058      	beq.n	8000f4e <HAL_GPIO_Init+0xfa>
 8000e9c:	4a93      	ldr	r2, [pc, #588]	@ (80010ec <HAL_GPIO_Init+0x298>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d86f      	bhi.n	8000f82 <HAL_GPIO_Init+0x12e>
 8000ea2:	4a93      	ldr	r2, [pc, #588]	@ (80010f0 <HAL_GPIO_Init+0x29c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d052      	beq.n	8000f4e <HAL_GPIO_Init+0xfa>
 8000ea8:	4a91      	ldr	r2, [pc, #580]	@ (80010f0 <HAL_GPIO_Init+0x29c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d869      	bhi.n	8000f82 <HAL_GPIO_Init+0x12e>
 8000eae:	4a91      	ldr	r2, [pc, #580]	@ (80010f4 <HAL_GPIO_Init+0x2a0>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d04c      	beq.n	8000f4e <HAL_GPIO_Init+0xfa>
 8000eb4:	4a8f      	ldr	r2, [pc, #572]	@ (80010f4 <HAL_GPIO_Init+0x2a0>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d863      	bhi.n	8000f82 <HAL_GPIO_Init+0x12e>
 8000eba:	4a8f      	ldr	r2, [pc, #572]	@ (80010f8 <HAL_GPIO_Init+0x2a4>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d046      	beq.n	8000f4e <HAL_GPIO_Init+0xfa>
 8000ec0:	4a8d      	ldr	r2, [pc, #564]	@ (80010f8 <HAL_GPIO_Init+0x2a4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d85d      	bhi.n	8000f82 <HAL_GPIO_Init+0x12e>
 8000ec6:	2b12      	cmp	r3, #18
 8000ec8:	d82a      	bhi.n	8000f20 <HAL_GPIO_Init+0xcc>
 8000eca:	2b12      	cmp	r3, #18
 8000ecc:	d859      	bhi.n	8000f82 <HAL_GPIO_Init+0x12e>
 8000ece:	a201      	add	r2, pc, #4	@ (adr r2, 8000ed4 <HAL_GPIO_Init+0x80>)
 8000ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed4:	08000f4f 	.word	0x08000f4f
 8000ed8:	08000f29 	.word	0x08000f29
 8000edc:	08000f3b 	.word	0x08000f3b
 8000ee0:	08000f7d 	.word	0x08000f7d
 8000ee4:	08000f83 	.word	0x08000f83
 8000ee8:	08000f83 	.word	0x08000f83
 8000eec:	08000f83 	.word	0x08000f83
 8000ef0:	08000f83 	.word	0x08000f83
 8000ef4:	08000f83 	.word	0x08000f83
 8000ef8:	08000f83 	.word	0x08000f83
 8000efc:	08000f83 	.word	0x08000f83
 8000f00:	08000f83 	.word	0x08000f83
 8000f04:	08000f83 	.word	0x08000f83
 8000f08:	08000f83 	.word	0x08000f83
 8000f0c:	08000f83 	.word	0x08000f83
 8000f10:	08000f83 	.word	0x08000f83
 8000f14:	08000f83 	.word	0x08000f83
 8000f18:	08000f31 	.word	0x08000f31
 8000f1c:	08000f45 	.word	0x08000f45
 8000f20:	4a76      	ldr	r2, [pc, #472]	@ (80010fc <HAL_GPIO_Init+0x2a8>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d013      	beq.n	8000f4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f26:	e02c      	b.n	8000f82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	623b      	str	r3, [r7, #32]
          break;
 8000f2e:	e029      	b.n	8000f84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	3304      	adds	r3, #4
 8000f36:	623b      	str	r3, [r7, #32]
          break;
 8000f38:	e024      	b.n	8000f84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	3308      	adds	r3, #8
 8000f40:	623b      	str	r3, [r7, #32]
          break;
 8000f42:	e01f      	b.n	8000f84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	330c      	adds	r3, #12
 8000f4a:	623b      	str	r3, [r7, #32]
          break;
 8000f4c:	e01a      	b.n	8000f84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d102      	bne.n	8000f5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f56:	2304      	movs	r3, #4
 8000f58:	623b      	str	r3, [r7, #32]
          break;
 8000f5a:	e013      	b.n	8000f84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d105      	bne.n	8000f70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f64:	2308      	movs	r3, #8
 8000f66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	69fa      	ldr	r2, [r7, #28]
 8000f6c:	611a      	str	r2, [r3, #16]
          break;
 8000f6e:	e009      	b.n	8000f84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f70:	2308      	movs	r3, #8
 8000f72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69fa      	ldr	r2, [r7, #28]
 8000f78:	615a      	str	r2, [r3, #20]
          break;
 8000f7a:	e003      	b.n	8000f84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
          break;
 8000f80:	e000      	b.n	8000f84 <HAL_GPIO_Init+0x130>
          break;
 8000f82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	2bff      	cmp	r3, #255	@ 0xff
 8000f88:	d801      	bhi.n	8000f8e <HAL_GPIO_Init+0x13a>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	e001      	b.n	8000f92 <HAL_GPIO_Init+0x13e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3304      	adds	r3, #4
 8000f92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	2bff      	cmp	r3, #255	@ 0xff
 8000f98:	d802      	bhi.n	8000fa0 <HAL_GPIO_Init+0x14c>
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	e002      	b.n	8000fa6 <HAL_GPIO_Init+0x152>
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa2:	3b08      	subs	r3, #8
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	210f      	movs	r1, #15
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	6a39      	ldr	r1, [r7, #32]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 80a9 	beq.w	8001126 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd4:	4b4a      	ldr	r3, [pc, #296]	@ (8001100 <HAL_GPIO_Init+0x2ac>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a49      	ldr	r2, [pc, #292]	@ (8001100 <HAL_GPIO_Init+0x2ac>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b47      	ldr	r3, [pc, #284]	@ (8001100 <HAL_GPIO_Init+0x2ac>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fec:	4a45      	ldr	r2, [pc, #276]	@ (8001104 <HAL_GPIO_Init+0x2b0>)
 8000fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	4013      	ands	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a3d      	ldr	r2, [pc, #244]	@ (8001108 <HAL_GPIO_Init+0x2b4>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d00d      	beq.n	8001034 <HAL_GPIO_Init+0x1e0>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a3c      	ldr	r2, [pc, #240]	@ (800110c <HAL_GPIO_Init+0x2b8>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d007      	beq.n	8001030 <HAL_GPIO_Init+0x1dc>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a3b      	ldr	r2, [pc, #236]	@ (8001110 <HAL_GPIO_Init+0x2bc>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d101      	bne.n	800102c <HAL_GPIO_Init+0x1d8>
 8001028:	2302      	movs	r3, #2
 800102a:	e004      	b.n	8001036 <HAL_GPIO_Init+0x1e2>
 800102c:	2303      	movs	r3, #3
 800102e:	e002      	b.n	8001036 <HAL_GPIO_Init+0x1e2>
 8001030:	2301      	movs	r3, #1
 8001032:	e000      	b.n	8001036 <HAL_GPIO_Init+0x1e2>
 8001034:	2300      	movs	r3, #0
 8001036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001038:	f002 0203 	and.w	r2, r2, #3
 800103c:	0092      	lsls	r2, r2, #2
 800103e:	4093      	lsls	r3, r2
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001046:	492f      	ldr	r1, [pc, #188]	@ (8001104 <HAL_GPIO_Init+0x2b0>)
 8001048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104a:	089b      	lsrs	r3, r3, #2
 800104c:	3302      	adds	r3, #2
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d006      	beq.n	800106e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001060:	4b2c      	ldr	r3, [pc, #176]	@ (8001114 <HAL_GPIO_Init+0x2c0>)
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	492b      	ldr	r1, [pc, #172]	@ (8001114 <HAL_GPIO_Init+0x2c0>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	608b      	str	r3, [r1, #8]
 800106c:	e006      	b.n	800107c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800106e:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <HAL_GPIO_Init+0x2c0>)
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	43db      	mvns	r3, r3
 8001076:	4927      	ldr	r1, [pc, #156]	@ (8001114 <HAL_GPIO_Init+0x2c0>)
 8001078:	4013      	ands	r3, r2
 800107a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d006      	beq.n	8001096 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001088:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <HAL_GPIO_Init+0x2c0>)
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	4921      	ldr	r1, [pc, #132]	@ (8001114 <HAL_GPIO_Init+0x2c0>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	60cb      	str	r3, [r1, #12]
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001096:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <HAL_GPIO_Init+0x2c0>)
 8001098:	68da      	ldr	r2, [r3, #12]
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	43db      	mvns	r3, r3
 800109e:	491d      	ldr	r1, [pc, #116]	@ (8001114 <HAL_GPIO_Init+0x2c0>)
 80010a0:	4013      	ands	r3, r2
 80010a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d006      	beq.n	80010be <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010b0:	4b18      	ldr	r3, [pc, #96]	@ (8001114 <HAL_GPIO_Init+0x2c0>)
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	4917      	ldr	r1, [pc, #92]	@ (8001114 <HAL_GPIO_Init+0x2c0>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	604b      	str	r3, [r1, #4]
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <HAL_GPIO_Init+0x2c0>)
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	4913      	ldr	r1, [pc, #76]	@ (8001114 <HAL_GPIO_Init+0x2c0>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d01f      	beq.n	8001118 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <HAL_GPIO_Init+0x2c0>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	490d      	ldr	r1, [pc, #52]	@ (8001114 <HAL_GPIO_Init+0x2c0>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	600b      	str	r3, [r1, #0]
 80010e4:	e01f      	b.n	8001126 <HAL_GPIO_Init+0x2d2>
 80010e6:	bf00      	nop
 80010e8:	10320000 	.word	0x10320000
 80010ec:	10310000 	.word	0x10310000
 80010f0:	10220000 	.word	0x10220000
 80010f4:	10210000 	.word	0x10210000
 80010f8:	10120000 	.word	0x10120000
 80010fc:	10110000 	.word	0x10110000
 8001100:	40021000 	.word	0x40021000
 8001104:	40010000 	.word	0x40010000
 8001108:	40010800 	.word	0x40010800
 800110c:	40010c00 	.word	0x40010c00
 8001110:	40011000 	.word	0x40011000
 8001114:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001118:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <HAL_GPIO_Init+0x2f4>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	43db      	mvns	r3, r3
 8001120:	4909      	ldr	r1, [pc, #36]	@ (8001148 <HAL_GPIO_Init+0x2f4>)
 8001122:	4013      	ands	r3, r2
 8001124:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	3301      	adds	r3, #1
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001132:	fa22 f303 	lsr.w	r3, r2, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	f47f ae96 	bne.w	8000e68 <HAL_GPIO_Init+0x14>
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	372c      	adds	r7, #44	@ 0x2c
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	40010400 	.word	0x40010400

0800114c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
 8001158:	4613      	mov	r3, r2
 800115a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800115c:	787b      	ldrb	r3, [r7, #1]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001168:	e003      	b.n	8001172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	041a      	lsls	r2, r3, #16
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	611a      	str	r2, [r3, #16]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4013      	ands	r3, r2
 8001194:	041a      	lsls	r2, r3, #16
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	43d9      	mvns	r1, r3
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	400b      	ands	r3, r1
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	611a      	str	r2, [r3, #16]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
	...

080011b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e272      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 8087 	beq.w	80012de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011d0:	4b92      	ldr	r3, [pc, #584]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 030c 	and.w	r3, r3, #12
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d00c      	beq.n	80011f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011dc:	4b8f      	ldr	r3, [pc, #572]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 030c 	and.w	r3, r3, #12
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d112      	bne.n	800120e <HAL_RCC_OscConfig+0x5e>
 80011e8:	4b8c      	ldr	r3, [pc, #560]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011f4:	d10b      	bne.n	800120e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f6:	4b89      	ldr	r3, [pc, #548]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d06c      	beq.n	80012dc <HAL_RCC_OscConfig+0x12c>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d168      	bne.n	80012dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e24c      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001216:	d106      	bne.n	8001226 <HAL_RCC_OscConfig+0x76>
 8001218:	4b80      	ldr	r3, [pc, #512]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a7f      	ldr	r2, [pc, #508]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 800121e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	e02e      	b.n	8001284 <HAL_RCC_OscConfig+0xd4>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0x98>
 800122e:	4b7b      	ldr	r3, [pc, #492]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a7a      	ldr	r2, [pc, #488]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001234:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b78      	ldr	r3, [pc, #480]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a77      	ldr	r2, [pc, #476]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001240:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e01d      	b.n	8001284 <HAL_RCC_OscConfig+0xd4>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001250:	d10c      	bne.n	800126c <HAL_RCC_OscConfig+0xbc>
 8001252:	4b72      	ldr	r3, [pc, #456]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a71      	ldr	r2, [pc, #452]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001258:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	4b6f      	ldr	r3, [pc, #444]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a6e      	ldr	r2, [pc, #440]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e00b      	b.n	8001284 <HAL_RCC_OscConfig+0xd4>
 800126c:	4b6b      	ldr	r3, [pc, #428]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a6a      	ldr	r2, [pc, #424]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001272:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b68      	ldr	r3, [pc, #416]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a67      	ldr	r2, [pc, #412]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 800127e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001282:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d013      	beq.n	80012b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fc18 	bl	8000ac0 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff fc14 	bl	8000ac0 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	@ 0x64
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e200      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a6:	4b5d      	ldr	r3, [pc, #372]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0xe4>
 80012b2:	e014      	b.n	80012de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fc04 	bl	8000ac0 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012bc:	f7ff fc00 	bl	8000ac0 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b64      	cmp	r3, #100	@ 0x64
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e1ec      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ce:	4b53      	ldr	r3, [pc, #332]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x10c>
 80012da:	e000      	b.n	80012de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d063      	beq.n	80013b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ea:	4b4c      	ldr	r3, [pc, #304]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00b      	beq.n	800130e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012f6:	4b49      	ldr	r3, [pc, #292]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d11c      	bne.n	800133c <HAL_RCC_OscConfig+0x18c>
 8001302:	4b46      	ldr	r3, [pc, #280]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d116      	bne.n	800133c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130e:	4b43      	ldr	r3, [pc, #268]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d005      	beq.n	8001326 <HAL_RCC_OscConfig+0x176>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d001      	beq.n	8001326 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e1c0      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001326:	4b3d      	ldr	r3, [pc, #244]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	4939      	ldr	r1, [pc, #228]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	e03a      	b.n	80013b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d020      	beq.n	8001386 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001344:	4b36      	ldr	r3, [pc, #216]	@ (8001420 <HAL_RCC_OscConfig+0x270>)
 8001346:	2201      	movs	r2, #1
 8001348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134a:	f7ff fbb9 	bl	8000ac0 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001352:	f7ff fbb5 	bl	8000ac0 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e1a1      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001364:	4b2d      	ldr	r3, [pc, #180]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001370:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	4927      	ldr	r1, [pc, #156]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001380:	4313      	orrs	r3, r2
 8001382:	600b      	str	r3, [r1, #0]
 8001384:	e015      	b.n	80013b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001386:	4b26      	ldr	r3, [pc, #152]	@ (8001420 <HAL_RCC_OscConfig+0x270>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fb98 	bl	8000ac0 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001394:	f7ff fb94 	bl	8000ac0 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e180      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a6:	4b1d      	ldr	r3, [pc, #116]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d03a      	beq.n	8001434 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d019      	beq.n	80013fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c6:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <HAL_RCC_OscConfig+0x274>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013cc:	f7ff fb78 	bl	8000ac0 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d4:	f7ff fb74 	bl	8000ac0 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e160      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80013e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f000 face 	bl	8001994 <RCC_Delay>
 80013f8:	e01c      	b.n	8001434 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <HAL_RCC_OscConfig+0x274>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001400:	f7ff fb5e 	bl	8000ac0 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001406:	e00f      	b.n	8001428 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001408:	f7ff fb5a 	bl	8000ac0 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d908      	bls.n	8001428 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e146      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	42420000 	.word	0x42420000
 8001424:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001428:	4b92      	ldr	r3, [pc, #584]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 800142a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1e9      	bne.n	8001408 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80a6 	beq.w	800158e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001446:	4b8b      	ldr	r3, [pc, #556]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10d      	bne.n	800146e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4b88      	ldr	r3, [pc, #544]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	4a87      	ldr	r2, [pc, #540]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800145c:	61d3      	str	r3, [r2, #28]
 800145e:	4b85      	ldr	r3, [pc, #532]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800146a:	2301      	movs	r3, #1
 800146c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146e:	4b82      	ldr	r3, [pc, #520]	@ (8001678 <HAL_RCC_OscConfig+0x4c8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d118      	bne.n	80014ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800147a:	4b7f      	ldr	r3, [pc, #508]	@ (8001678 <HAL_RCC_OscConfig+0x4c8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a7e      	ldr	r2, [pc, #504]	@ (8001678 <HAL_RCC_OscConfig+0x4c8>)
 8001480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001486:	f7ff fb1b 	bl	8000ac0 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148e:	f7ff fb17 	bl	8000ac0 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b64      	cmp	r3, #100	@ 0x64
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e103      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a0:	4b75      	ldr	r3, [pc, #468]	@ (8001678 <HAL_RCC_OscConfig+0x4c8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d106      	bne.n	80014c2 <HAL_RCC_OscConfig+0x312>
 80014b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4a6e      	ldr	r2, [pc, #440]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6213      	str	r3, [r2, #32]
 80014c0:	e02d      	b.n	800151e <HAL_RCC_OscConfig+0x36e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x334>
 80014ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	4a69      	ldr	r2, [pc, #420]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	6213      	str	r3, [r2, #32]
 80014d6:	4b67      	ldr	r3, [pc, #412]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4a66      	ldr	r2, [pc, #408]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	f023 0304 	bic.w	r3, r3, #4
 80014e0:	6213      	str	r3, [r2, #32]
 80014e2:	e01c      	b.n	800151e <HAL_RCC_OscConfig+0x36e>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b05      	cmp	r3, #5
 80014ea:	d10c      	bne.n	8001506 <HAL_RCC_OscConfig+0x356>
 80014ec:	4b61      	ldr	r3, [pc, #388]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4a60      	ldr	r2, [pc, #384]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014f2:	f043 0304 	orr.w	r3, r3, #4
 80014f6:	6213      	str	r3, [r2, #32]
 80014f8:	4b5e      	ldr	r3, [pc, #376]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4a5d      	ldr	r2, [pc, #372]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6213      	str	r3, [r2, #32]
 8001504:	e00b      	b.n	800151e <HAL_RCC_OscConfig+0x36e>
 8001506:	4b5b      	ldr	r3, [pc, #364]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4a5a      	ldr	r2, [pc, #360]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	6213      	str	r3, [r2, #32]
 8001512:	4b58      	ldr	r3, [pc, #352]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4a57      	ldr	r2, [pc, #348]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	f023 0304 	bic.w	r3, r3, #4
 800151c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d015      	beq.n	8001552 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001526:	f7ff facb 	bl	8000ac0 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152c:	e00a      	b.n	8001544 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152e:	f7ff fac7 	bl	8000ac0 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153c:	4293      	cmp	r3, r2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e0b1      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001544:	4b4b      	ldr	r3, [pc, #300]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0ee      	beq.n	800152e <HAL_RCC_OscConfig+0x37e>
 8001550:	e014      	b.n	800157c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001552:	f7ff fab5 	bl	8000ac0 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001558:	e00a      	b.n	8001570 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155a:	f7ff fab1 	bl	8000ac0 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001568:	4293      	cmp	r3, r2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e09b      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001570:	4b40      	ldr	r3, [pc, #256]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1ee      	bne.n	800155a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800157c:	7dfb      	ldrb	r3, [r7, #23]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d105      	bne.n	800158e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001582:	4b3c      	ldr	r3, [pc, #240]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	4a3b      	ldr	r2, [pc, #236]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001588:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800158c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 8087 	beq.w	80016a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001598:	4b36      	ldr	r3, [pc, #216]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 030c 	and.w	r3, r3, #12
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d061      	beq.n	8001668 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d146      	bne.n	800163a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ac:	4b33      	ldr	r3, [pc, #204]	@ (800167c <HAL_RCC_OscConfig+0x4cc>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7ff fa85 	bl	8000ac0 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ba:	f7ff fa81 	bl	8000ac0 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e06d      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015cc:	4b29      	ldr	r3, [pc, #164]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f0      	bne.n	80015ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015e0:	d108      	bne.n	80015f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015e2:	4b24      	ldr	r3, [pc, #144]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	4921      	ldr	r1, [pc, #132]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a19      	ldr	r1, [r3, #32]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001604:	430b      	orrs	r3, r1
 8001606:	491b      	ldr	r1, [pc, #108]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800160c:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <HAL_RCC_OscConfig+0x4cc>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff fa55 	bl	8000ac0 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161a:	f7ff fa51 	bl	8000ac0 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e03d      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x46a>
 8001638:	e035      	b.n	80016a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <HAL_RCC_OscConfig+0x4cc>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fa3e 	bl	8000ac0 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fa3a 	bl	8000ac0 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e026      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x498>
 8001666:	e01e      	b.n	80016a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d107      	bne.n	8001680 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e019      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
 8001674:	40021000 	.word	0x40021000
 8001678:	40007000 	.word	0x40007000
 800167c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001680:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <HAL_RCC_OscConfig+0x500>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	429a      	cmp	r2, r3
 8001692:	d106      	bne.n	80016a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800169e:	429a      	cmp	r2, r3
 80016a0:	d001      	beq.n	80016a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000

080016b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e0d0      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d910      	bls.n	80016f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d6:	4b67      	ldr	r3, [pc, #412]	@ (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 0207 	bic.w	r2, r3, #7
 80016de:	4965      	ldr	r1, [pc, #404]	@ (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b63      	ldr	r3, [pc, #396]	@ (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0b8      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d020      	beq.n	8001746 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001710:	4b59      	ldr	r3, [pc, #356]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	4a58      	ldr	r2, [pc, #352]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800171a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001728:	4b53      	ldr	r3, [pc, #332]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4a52      	ldr	r2, [pc, #328]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001732:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001734:	4b50      	ldr	r3, [pc, #320]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	494d      	ldr	r1, [pc, #308]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d040      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d107      	bne.n	800176a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175a:	4b47      	ldr	r3, [pc, #284]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d115      	bne.n	8001792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e07f      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d107      	bne.n	8001782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001772:	4b41      	ldr	r3, [pc, #260]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e073      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001782:	4b3d      	ldr	r3, [pc, #244]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e06b      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001792:	4b39      	ldr	r3, [pc, #228]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f023 0203 	bic.w	r2, r3, #3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4936      	ldr	r1, [pc, #216]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a4:	f7ff f98c 	bl	8000ac0 <HAL_GetTick>
 80017a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017aa:	e00a      	b.n	80017c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ac:	f7ff f988 	bl	8000ac0 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e053      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 020c 	and.w	r2, r3, #12
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d1eb      	bne.n	80017ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017d4:	4b27      	ldr	r3, [pc, #156]	@ (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d210      	bcs.n	8001804 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b24      	ldr	r3, [pc, #144]	@ (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 0207 	bic.w	r2, r3, #7
 80017ea:	4922      	ldr	r1, [pc, #136]	@ (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e032      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001810:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4916      	ldr	r1, [pc, #88]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d009      	beq.n	8001842 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800182e:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	490e      	ldr	r1, [pc, #56]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	4313      	orrs	r3, r2
 8001840:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001842:	f000 f821 	bl	8001888 <HAL_RCC_GetSysClockFreq>
 8001846:	4602      	mov	r2, r0
 8001848:	4b0b      	ldr	r3, [pc, #44]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	490a      	ldr	r1, [pc, #40]	@ (800187c <HAL_RCC_ClockConfig+0x1c8>)
 8001854:	5ccb      	ldrb	r3, [r1, r3]
 8001856:	fa22 f303 	lsr.w	r3, r2, r3
 800185a:	4a09      	ldr	r2, [pc, #36]	@ (8001880 <HAL_RCC_ClockConfig+0x1cc>)
 800185c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800185e:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <HAL_RCC_ClockConfig+0x1d0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff f8ea 	bl	8000a3c <HAL_InitTick>

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40022000 	.word	0x40022000
 8001878:	40021000 	.word	0x40021000
 800187c:	0800442c 	.word	0x0800442c
 8001880:	20000000 	.word	0x20000000
 8001884:	20000004 	.word	0x20000004

08001888 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018a2:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <HAL_RCC_GetSysClockFreq+0x94>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d002      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x30>
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d003      	beq.n	80018be <HAL_RCC_GetSysClockFreq+0x36>
 80018b6:	e027      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018b8:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ba:	613b      	str	r3, [r7, #16]
      break;
 80018bc:	e027      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	0c9b      	lsrs	r3, r3, #18
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	4a17      	ldr	r2, [pc, #92]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x9c>)
 80018c8:	5cd3      	ldrb	r3, [r2, r3]
 80018ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d010      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018d6:	4b11      	ldr	r3, [pc, #68]	@ (800191c <HAL_RCC_GetSysClockFreq+0x94>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	0c5b      	lsrs	r3, r3, #17
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	4a11      	ldr	r2, [pc, #68]	@ (8001928 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018e2:	5cd3      	ldrb	r3, [r2, r3]
 80018e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ea:	fb03 f202 	mul.w	r2, r3, r2
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e004      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a0c      	ldr	r2, [pc, #48]	@ (800192c <HAL_RCC_GetSysClockFreq+0xa4>)
 80018fc:	fb02 f303 	mul.w	r3, r2, r3
 8001900:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	613b      	str	r3, [r7, #16]
      break;
 8001906:	e002      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001908:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x98>)
 800190a:	613b      	str	r3, [r7, #16]
      break;
 800190c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800190e:	693b      	ldr	r3, [r7, #16]
}
 8001910:	4618      	mov	r0, r3
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	007a1200 	.word	0x007a1200
 8001924:	08004444 	.word	0x08004444
 8001928:	08004454 	.word	0x08004454
 800192c:	003d0900 	.word	0x003d0900

08001930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001934:	4b02      	ldr	r3, [pc, #8]	@ (8001940 <HAL_RCC_GetHCLKFreq+0x10>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	20000000 	.word	0x20000000

08001944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001948:	f7ff fff2 	bl	8001930 <HAL_RCC_GetHCLKFreq>
 800194c:	4602      	mov	r2, r0
 800194e:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	0a1b      	lsrs	r3, r3, #8
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	4903      	ldr	r1, [pc, #12]	@ (8001968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800195a:	5ccb      	ldrb	r3, [r1, r3]
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001960:	4618      	mov	r0, r3
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40021000 	.word	0x40021000
 8001968:	0800443c 	.word	0x0800443c

0800196c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001970:	f7ff ffde 	bl	8001930 <HAL_RCC_GetHCLKFreq>
 8001974:	4602      	mov	r2, r0
 8001976:	4b05      	ldr	r3, [pc, #20]	@ (800198c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	0adb      	lsrs	r3, r3, #11
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	4903      	ldr	r1, [pc, #12]	@ (8001990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001982:	5ccb      	ldrb	r3, [r1, r3]
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001988:	4618      	mov	r0, r3
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40021000 	.word	0x40021000
 8001990:	0800443c 	.word	0x0800443c

08001994 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800199c:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <RCC_Delay+0x34>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0a      	ldr	r2, [pc, #40]	@ (80019cc <RCC_Delay+0x38>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	0a5b      	lsrs	r3, r3, #9
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	fb02 f303 	mul.w	r3, r2, r3
 80019ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019b0:	bf00      	nop
  }
  while (Delay --);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1e5a      	subs	r2, r3, #1
 80019b6:	60fa      	str	r2, [r7, #12]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f9      	bne.n	80019b0 <RCC_Delay+0x1c>
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	20000000 	.word	0x20000000
 80019cc:	10624dd3 	.word	0x10624dd3

080019d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e041      	b.n	8001a66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d106      	bne.n	80019fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7fe fe32 	bl	8000660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2202      	movs	r2, #2
 8001a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4610      	mov	r0, r2
 8001a10:	f000 fb6a 	bl	80020e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d001      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e035      	b.n	8001af4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a16      	ldr	r2, [pc, #88]	@ (8001b00 <HAL_TIM_Base_Start_IT+0x90>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d009      	beq.n	8001abe <HAL_TIM_Base_Start_IT+0x4e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ab2:	d004      	beq.n	8001abe <HAL_TIM_Base_Start_IT+0x4e>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a12      	ldr	r2, [pc, #72]	@ (8001b04 <HAL_TIM_Base_Start_IT+0x94>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d111      	bne.n	8001ae2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2b06      	cmp	r3, #6
 8001ace:	d010      	beq.n	8001af2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae0:	e007      	b.n	8001af2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0201 	orr.w	r2, r2, #1
 8001af0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40012c00 	.word	0x40012c00
 8001b04:	40000400 	.word	0x40000400

08001b08 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0201 	bic.w	r2, r2, #1
 8001b1e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6a1a      	ldr	r2, [r3, #32]
 8001b26:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10f      	bne.n	8001b50 <HAL_TIM_Base_Stop_IT+0x48>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6a1a      	ldr	r2, [r3, #32]
 8001b36:	f240 4344 	movw	r3, #1092	@ 0x444
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d107      	bne.n	8001b50 <HAL_TIM_Base_Stop_IT+0x48>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e041      	b.n	8001bfa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d106      	bne.n	8001b90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7fe fd4c 	bl	8000628 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	f000 faa0 	bl	80020e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d109      	bne.n	8001c28 <HAL_TIM_PWM_Start+0x24>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	bf14      	ite	ne
 8001c20:	2301      	movne	r3, #1
 8001c22:	2300      	moveq	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	e022      	b.n	8001c6e <HAL_TIM_PWM_Start+0x6a>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d109      	bne.n	8001c42 <HAL_TIM_PWM_Start+0x3e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	bf14      	ite	ne
 8001c3a:	2301      	movne	r3, #1
 8001c3c:	2300      	moveq	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	e015      	b.n	8001c6e <HAL_TIM_PWM_Start+0x6a>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d109      	bne.n	8001c5c <HAL_TIM_PWM_Start+0x58>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	bf14      	ite	ne
 8001c54:	2301      	movne	r3, #1
 8001c56:	2300      	moveq	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	e008      	b.n	8001c6e <HAL_TIM_PWM_Start+0x6a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e059      	b.n	8001d2a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d104      	bne.n	8001c86 <HAL_TIM_PWM_Start+0x82>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c84:	e013      	b.n	8001cae <HAL_TIM_PWM_Start+0xaa>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d104      	bne.n	8001c96 <HAL_TIM_PWM_Start+0x92>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c94:	e00b      	b.n	8001cae <HAL_TIM_PWM_Start+0xaa>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d104      	bne.n	8001ca6 <HAL_TIM_PWM_Start+0xa2>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ca4:	e003      	b.n	8001cae <HAL_TIM_PWM_Start+0xaa>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2202      	movs	r2, #2
 8001caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	6839      	ldr	r1, [r7, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 fc02 	bl	80024c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d34 <HAL_TIM_PWM_Start+0x130>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d107      	bne.n	8001cd6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cd4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a16      	ldr	r2, [pc, #88]	@ (8001d34 <HAL_TIM_PWM_Start+0x130>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d009      	beq.n	8001cf4 <HAL_TIM_PWM_Start+0xf0>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ce8:	d004      	beq.n	8001cf4 <HAL_TIM_PWM_Start+0xf0>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a12      	ldr	r2, [pc, #72]	@ (8001d38 <HAL_TIM_PWM_Start+0x134>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d111      	bne.n	8001d18 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d010      	beq.n	8001d28 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d16:	e007      	b.n	8001d28 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40012c00 	.word	0x40012c00
 8001d38:	40000400 	.word	0x40000400

08001d3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d020      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d01b      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 0202 	mvn.w	r2, #2
 8001d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f993 	bl	80020b2 <HAL_TIM_IC_CaptureCallback>
 8001d8c:	e005      	b.n	8001d9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f986 	bl	80020a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f995 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d020      	beq.n	8001dec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01b      	beq.n	8001dec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0204 	mvn.w	r2, #4
 8001dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f96d 	bl	80020b2 <HAL_TIM_IC_CaptureCallback>
 8001dd8:	e005      	b.n	8001de6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f960 	bl	80020a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f96f 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d020      	beq.n	8001e38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d01b      	beq.n	8001e38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0208 	mvn.w	r2, #8
 8001e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f947 	bl	80020b2 <HAL_TIM_IC_CaptureCallback>
 8001e24:	e005      	b.n	8001e32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f93a 	bl	80020a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f949 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d020      	beq.n	8001e84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01b      	beq.n	8001e84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0210 	mvn.w	r2, #16
 8001e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2208      	movs	r2, #8
 8001e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f921 	bl	80020b2 <HAL_TIM_IC_CaptureCallback>
 8001e70:	e005      	b.n	8001e7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f914 	bl	80020a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f923 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00c      	beq.n	8001ea8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d007      	beq.n	8001ea8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0201 	mvn.w	r2, #1
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7fe fb60 	bl	8000568 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00c      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d007      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fb7f 	bl	80025ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00c      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d007      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8f3 	bl	80020d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f003 0320 	and.w	r3, r3, #32
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00c      	beq.n	8001f14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d007      	beq.n	8001f14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0220 	mvn.w	r2, #32
 8001f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 fb52 	bl	80025b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f14:	bf00      	nop
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e0ae      	b.n	8002098 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b0c      	cmp	r3, #12
 8001f46:	f200 809f 	bhi.w	8002088 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f50:	08001f85 	.word	0x08001f85
 8001f54:	08002089 	.word	0x08002089
 8001f58:	08002089 	.word	0x08002089
 8001f5c:	08002089 	.word	0x08002089
 8001f60:	08001fc5 	.word	0x08001fc5
 8001f64:	08002089 	.word	0x08002089
 8001f68:	08002089 	.word	0x08002089
 8001f6c:	08002089 	.word	0x08002089
 8001f70:	08002007 	.word	0x08002007
 8001f74:	08002089 	.word	0x08002089
 8001f78:	08002089 	.word	0x08002089
 8001f7c:	08002089 	.word	0x08002089
 8001f80:	08002047 	.word	0x08002047
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f910 	bl	80021b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699a      	ldr	r2, [r3, #24]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0208 	orr.w	r2, r2, #8
 8001f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699a      	ldr	r2, [r3, #24]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0204 	bic.w	r2, r2, #4
 8001fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6999      	ldr	r1, [r3, #24]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	619a      	str	r2, [r3, #24]
      break;
 8001fc2:	e064      	b.n	800208e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f956 	bl	800227c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699a      	ldr	r2, [r3, #24]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6999      	ldr	r1, [r3, #24]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	021a      	lsls	r2, r3, #8
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	619a      	str	r2, [r3, #24]
      break;
 8002004:	e043      	b.n	800208e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68b9      	ldr	r1, [r7, #8]
 800200c:	4618      	mov	r0, r3
 800200e:	f000 f99f 	bl	8002350 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	69da      	ldr	r2, [r3, #28]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f042 0208 	orr.w	r2, r2, #8
 8002020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	69da      	ldr	r2, [r3, #28]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0204 	bic.w	r2, r2, #4
 8002030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	69d9      	ldr	r1, [r3, #28]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	61da      	str	r2, [r3, #28]
      break;
 8002044:	e023      	b.n	800208e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68b9      	ldr	r1, [r7, #8]
 800204c:	4618      	mov	r0, r3
 800204e:	f000 f9e9 	bl	8002424 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	69da      	ldr	r2, [r3, #28]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	69da      	ldr	r2, [r3, #28]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69d9      	ldr	r1, [r3, #28]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	021a      	lsls	r2, r3, #8
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	61da      	str	r2, [r3, #28]
      break;
 8002086:	e002      	b.n	800208e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	75fb      	strb	r3, [r7, #23]
      break;
 800208c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002096:	7dfb      	ldrb	r3, [r7, #23]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a2b      	ldr	r2, [pc, #172]	@ (80021a8 <TIM_Base_SetConfig+0xc0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d007      	beq.n	8002110 <TIM_Base_SetConfig+0x28>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002106:	d003      	beq.n	8002110 <TIM_Base_SetConfig+0x28>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a28      	ldr	r2, [pc, #160]	@ (80021ac <TIM_Base_SetConfig+0xc4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d108      	bne.n	8002122 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	4313      	orrs	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a20      	ldr	r2, [pc, #128]	@ (80021a8 <TIM_Base_SetConfig+0xc0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <TIM_Base_SetConfig+0x52>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002130:	d003      	beq.n	800213a <TIM_Base_SetConfig+0x52>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a1d      	ldr	r2, [pc, #116]	@ (80021ac <TIM_Base_SetConfig+0xc4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d108      	bne.n	800214c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4313      	orrs	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a0d      	ldr	r2, [pc, #52]	@ (80021a8 <TIM_Base_SetConfig+0xc0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d103      	bne.n	8002180 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f023 0201 	bic.w	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	611a      	str	r2, [r3, #16]
  }
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	40012c00 	.word	0x40012c00
 80021ac:	40000400 	.word	0x40000400

080021b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f023 0201 	bic.w	r2, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f023 0303 	bic.w	r3, r3, #3
 80021e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f023 0302 	bic.w	r3, r3, #2
 80021f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4313      	orrs	r3, r2
 8002202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a1c      	ldr	r2, [pc, #112]	@ (8002278 <TIM_OC1_SetConfig+0xc8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d10c      	bne.n	8002226 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f023 0308 	bic.w	r3, r3, #8
 8002212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a13      	ldr	r2, [pc, #76]	@ (8002278 <TIM_OC1_SetConfig+0xc8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d111      	bne.n	8002252 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800223c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	621a      	str	r2, [r3, #32]
}
 800226c:	bf00      	nop
 800226e:	371c      	adds	r7, #28
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40012c00 	.word	0x40012c00

0800227c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	f023 0210 	bic.w	r2, r3, #16
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f023 0320 	bic.w	r3, r3, #32
 80022c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a1d      	ldr	r2, [pc, #116]	@ (800234c <TIM_OC2_SetConfig+0xd0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d10d      	bne.n	80022f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a14      	ldr	r2, [pc, #80]	@ (800234c <TIM_OC2_SetConfig+0xd0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d113      	bne.n	8002328 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002306:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800230e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	621a      	str	r2, [r3, #32]
}
 8002342:	bf00      	nop
 8002344:	371c      	adds	r7, #28
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	40012c00 	.word	0x40012c00

08002350 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800237e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f023 0303 	bic.w	r3, r3, #3
 8002386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4313      	orrs	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	021b      	lsls	r3, r3, #8
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002420 <TIM_OC3_SetConfig+0xd0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d10d      	bne.n	80023ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80023b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	4313      	orrs	r3, r2
 80023c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80023c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a14      	ldr	r2, [pc, #80]	@ (8002420 <TIM_OC3_SetConfig+0xd0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d113      	bne.n	80023fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80023d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80023e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	621a      	str	r2, [r3, #32]
}
 8002414:	bf00      	nop
 8002416:	371c      	adds	r7, #28
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40012c00 	.word	0x40012c00

08002424 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800245a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	021b      	lsls	r3, r3, #8
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4313      	orrs	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800246e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	031b      	lsls	r3, r3, #12
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a0f      	ldr	r2, [pc, #60]	@ (80024bc <TIM_OC4_SetConfig+0x98>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d109      	bne.n	8002498 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800248a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	019b      	lsls	r3, r3, #6
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4313      	orrs	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	621a      	str	r2, [r3, #32]
}
 80024b2:	bf00      	nop
 80024b4:	371c      	adds	r7, #28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	40012c00 	.word	0x40012c00

080024c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	2201      	movs	r2, #1
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a1a      	ldr	r2, [r3, #32]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	401a      	ands	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a1a      	ldr	r2, [r3, #32]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f003 031f 	and.w	r3, r3, #31
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	fa01 f303 	lsl.w	r3, r1, r3
 80024f8:	431a      	orrs	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	621a      	str	r2, [r3, #32]
}
 80024fe:	bf00      	nop
 8002500:	371c      	adds	r7, #28
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800251c:	2302      	movs	r3, #2
 800251e:	e041      	b.n	80025a4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002546:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a14      	ldr	r2, [pc, #80]	@ (80025b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d009      	beq.n	8002578 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800256c:	d004      	beq.n	8002578 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a10      	ldr	r2, [pc, #64]	@ (80025b4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d10c      	bne.n	8002592 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800257e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	4313      	orrs	r3, r2
 8002588:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40012c00 	.word	0x40012c00
 80025b4:	40000400 	.word	0x40000400

080025b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr

080025ca <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e042      	b.n	8002674 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe f882 	bl	800070c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2224      	movs	r2, #36	@ 0x24
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800261e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fdc3 	bl	80031ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	@ 0x28
 8002680:	af02      	add	r7, sp, #8
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	4613      	mov	r3, r2
 800268a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b20      	cmp	r3, #32
 800269a:	f040 8081 	bne.w	80027a0 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <HAL_UART_Receive+0x2e>
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e079      	b.n	80027a2 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2222      	movs	r2, #34	@ 0x22
 80026b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026c2:	f7fe f9fd 	bl	8000ac0 <HAL_GetTick>
 80026c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	88fa      	ldrh	r2, [r7, #6]
 80026cc:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	88fa      	ldrh	r2, [r7, #6]
 80026d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026dc:	d108      	bne.n	80026f0 <HAL_UART_Receive+0x74>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d104      	bne.n	80026f0 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	e003      	b.n	80026f8 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80026f8:	e047      	b.n	800278a <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2200      	movs	r2, #0
 8002702:	2120      	movs	r1, #32
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fb24 	bl	8002d52 <UART_WaitOnFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e042      	b.n	80027a2 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10c      	bne.n	800273c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	b29b      	uxth	r3, r3
 800272a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800272e:	b29a      	uxth	r2, r3
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	3302      	adds	r3, #2
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	e01f      	b.n	800277c <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002744:	d007      	beq.n	8002756 <HAL_UART_Receive+0xda>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <HAL_UART_Receive+0xe8>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	e008      	b.n	8002776 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002770:	b2da      	uxtb	r2, r3
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3301      	adds	r3, #1
 800277a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002780:	b29b      	uxth	r3, r3
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800278e:	b29b      	uxth	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1b2      	bne.n	80026fa <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	e000      	b.n	80027a2 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80027a0:	2302      	movs	r3, #2
  }
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3720      	adds	r7, #32
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b084      	sub	sp, #16
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	4613      	mov	r3, r2
 80027b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d112      	bne.n	80027ea <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_UART_Receive_IT+0x26>
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e00b      	b.n	80027ec <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	461a      	mov	r2, r3
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fb0f 	bl	8002e04 <UART_Start_Receive_IT>
 80027e6:	4603      	mov	r3, r0
 80027e8:	e000      	b.n	80027ec <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80027ea:	2302      	movs	r3, #2
  }
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b0ba      	sub	sp, #232	@ 0xe8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10f      	bne.n	800285a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800283a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b00      	cmp	r3, #0
 8002844:	d009      	beq.n	800285a <HAL_UART_IRQHandler+0x66>
 8002846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fbec 	bl	8003030 <UART_Receive_IT>
      return;
 8002858:	e25b      	b.n	8002d12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800285a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 80de 	beq.w	8002a20 <HAL_UART_IRQHandler+0x22c>
 8002864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d106      	bne.n	800287e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002874:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80d1 	beq.w	8002a20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800287e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00b      	beq.n	80028a2 <HAL_UART_IRQHandler+0xae>
 800288a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800288e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289a:	f043 0201 	orr.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_UART_IRQHandler+0xd2>
 80028ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028be:	f043 0202 	orr.w	r2, r3, #2
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00b      	beq.n	80028ea <HAL_UART_IRQHandler+0xf6>
 80028d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e2:	f043 0204 	orr.w	r2, r3, #4
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80028ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d011      	beq.n	800291a <HAL_UART_IRQHandler+0x126>
 80028f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d105      	bne.n	800290e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	f043 0208 	orr.w	r2, r3, #8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 81f2 	beq.w	8002d08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_UART_IRQHandler+0x14e>
 8002930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002934:	f003 0320 	and.w	r3, r3, #32
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fb77 	bl	8003030 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800294c:	2b00      	cmp	r3, #0
 800294e:	bf14      	ite	ne
 8002950:	2301      	movne	r3, #1
 8002952:	2300      	moveq	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d103      	bne.n	800296e <HAL_UART_IRQHandler+0x17a>
 8002966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800296a:	2b00      	cmp	r3, #0
 800296c:	d04f      	beq.n	8002a0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fa81 	bl	8002e76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d041      	beq.n	8002a06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	3314      	adds	r3, #20
 8002988:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002990:	e853 3f00 	ldrex	r3, [r3]
 8002994:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002998:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800299c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3314      	adds	r3, #20
 80029aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80029ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80029b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80029ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80029be:	e841 2300 	strex	r3, r2, [r1]
 80029c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80029c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1d9      	bne.n	8002982 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d013      	beq.n	80029fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029da:	4a7e      	ldr	r2, [pc, #504]	@ (8002bd4 <HAL_UART_IRQHandler+0x3e0>)
 80029dc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe f9be 	bl	8000d64 <HAL_DMA_Abort_IT>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d016      	beq.n	8002a1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029f8:	4610      	mov	r0, r2
 80029fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fc:	e00e      	b.n	8002a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f993 	bl	8002d2a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a04:	e00a      	b.n	8002a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f98f 	bl	8002d2a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	e006      	b.n	8002a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f98b 	bl	8002d2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002a1a:	e175      	b.n	8002d08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1c:	bf00      	nop
    return;
 8002a1e:	e173      	b.n	8002d08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	f040 814f 	bne.w	8002cc8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8148 	beq.w	8002cc8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 8141 	beq.w	8002cc8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a46:	2300      	movs	r3, #0
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 80b6 	beq.w	8002bd8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8145 	beq.w	8002d0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	f080 813e 	bcs.w	8002d0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a96:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	f000 8088 	beq.w	8002bb4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	330c      	adds	r3, #12
 8002aaa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ab2:	e853 3f00 	ldrex	r3, [r3]
 8002ab6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002aba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002abe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ac2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	330c      	adds	r3, #12
 8002acc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002ad0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ad4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002adc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ae0:	e841 2300 	strex	r3, r2, [r1]
 8002ae4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1d9      	bne.n	8002aa4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	3314      	adds	r3, #20
 8002af6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002afa:	e853 3f00 	ldrex	r3, [r3]
 8002afe:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002b00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b02:	f023 0301 	bic.w	r3, r3, #1
 8002b06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3314      	adds	r3, #20
 8002b10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b14:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002b18:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b20:	e841 2300 	strex	r3, r2, [r1]
 8002b24:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002b26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e1      	bne.n	8002af0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	3314      	adds	r3, #20
 8002b32:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b36:	e853 3f00 	ldrex	r3, [r3]
 8002b3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3314      	adds	r3, #20
 8002b4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b50:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b52:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b54:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b56:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b58:	e841 2300 	strex	r3, r2, [r1]
 8002b5c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1e3      	bne.n	8002b2c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	330c      	adds	r3, #12
 8002b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b7c:	e853 3f00 	ldrex	r3, [r3]
 8002b80:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b84:	f023 0310 	bic.w	r3, r3, #16
 8002b88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	330c      	adds	r3, #12
 8002b92:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002b96:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b98:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b9e:	e841 2300 	strex	r3, r2, [r1]
 8002ba2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002ba4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1e3      	bne.n	8002b72 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe f89d 	bl	8000cee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	4619      	mov	r1, r3
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f8b6 	bl	8002d3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002bd0:	e09c      	b.n	8002d0c <HAL_UART_IRQHandler+0x518>
 8002bd2:	bf00      	nop
 8002bd4:	08002f3b 	.word	0x08002f3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 808e 	beq.w	8002d10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002bf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8089 	beq.w	8002d10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	330c      	adds	r3, #12
 8002c04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c08:	e853 3f00 	ldrex	r3, [r3]
 8002c0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	330c      	adds	r3, #12
 8002c1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002c22:	647a      	str	r2, [r7, #68]	@ 0x44
 8002c24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c2a:	e841 2300 	strex	r3, r2, [r1]
 8002c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1e3      	bne.n	8002bfe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3314      	adds	r3, #20
 8002c3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	e853 3f00 	ldrex	r3, [r3]
 8002c44:	623b      	str	r3, [r7, #32]
   return(result);
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	f023 0301 	bic.w	r3, r3, #1
 8002c4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3314      	adds	r3, #20
 8002c56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c62:	e841 2300 	strex	r3, r2, [r1]
 8002c66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1e3      	bne.n	8002c36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	330c      	adds	r3, #12
 8002c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	e853 3f00 	ldrex	r3, [r3]
 8002c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 0310 	bic.w	r3, r3, #16
 8002c92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	330c      	adds	r3, #12
 8002c9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002ca0:	61fa      	str	r2, [r7, #28]
 8002ca2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca4:	69b9      	ldr	r1, [r7, #24]
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	e841 2300 	strex	r3, r2, [r1]
 8002cac:	617b      	str	r3, [r7, #20]
   return(result);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1e3      	bne.n	8002c7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f83b 	bl	8002d3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cc6:	e023      	b.n	8002d10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d009      	beq.n	8002ce8 <HAL_UART_IRQHandler+0x4f4>
 8002cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f93e 	bl	8002f62 <UART_Transmit_IT>
    return;
 8002ce6:	e014      	b.n	8002d12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00e      	beq.n	8002d12 <HAL_UART_IRQHandler+0x51e>
 8002cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f97d 	bl	8003000 <UART_EndTransmit_IT>
    return;
 8002d06:	e004      	b.n	8002d12 <HAL_UART_IRQHandler+0x51e>
    return;
 8002d08:	bf00      	nop
 8002d0a:	e002      	b.n	8002d12 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d0c:	bf00      	nop
 8002d0e:	e000      	b.n	8002d12 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d10:	bf00      	nop
  }
}
 8002d12:	37e8      	adds	r7, #232	@ 0xe8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b086      	sub	sp, #24
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d62:	e03b      	b.n	8002ddc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d037      	beq.n	8002ddc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6c:	f7fd fea8 	bl	8000ac0 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	6a3a      	ldr	r2, [r7, #32]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d302      	bcc.n	8002d82 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e03a      	b.n	8002dfc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d023      	beq.n	8002ddc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b80      	cmp	r3, #128	@ 0x80
 8002d98:	d020      	beq.n	8002ddc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b40      	cmp	r3, #64	@ 0x40
 8002d9e:	d01d      	beq.n	8002ddc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d116      	bne.n	8002ddc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f856 	bl	8002e76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2208      	movs	r2, #8
 8002dce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e00f      	b.n	8002dfc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	4013      	ands	r3, r2
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d0b4      	beq.n	8002d64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	88fa      	ldrh	r2, [r7, #6]
 8002e1c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	88fa      	ldrh	r2, [r7, #6]
 8002e22:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2222      	movs	r2, #34	@ 0x22
 8002e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e48:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695a      	ldr	r2, [r3, #20]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0220 	orr.w	r2, r2, #32
 8002e68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b095      	sub	sp, #84	@ 0x54
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	330c      	adds	r3, #12
 8002e84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e88:	e853 3f00 	ldrex	r3, [r3]
 8002e8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	330c      	adds	r3, #12
 8002e9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e9e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ea4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ea6:	e841 2300 	strex	r3, r2, [r1]
 8002eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1e5      	bne.n	8002e7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3314      	adds	r3, #20
 8002eb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	e853 3f00 	ldrex	r3, [r3]
 8002ec0:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	3314      	adds	r3, #20
 8002ed0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eda:	e841 2300 	strex	r3, r2, [r1]
 8002ede:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1e5      	bne.n	8002eb2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d119      	bne.n	8002f22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	330c      	adds	r3, #12
 8002ef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	e853 3f00 	ldrex	r3, [r3]
 8002efc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f023 0310 	bic.w	r3, r3, #16
 8002f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	330c      	adds	r3, #12
 8002f0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f0e:	61ba      	str	r2, [r7, #24]
 8002f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f12:	6979      	ldr	r1, [r7, #20]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1e5      	bne.n	8002eee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f30:	bf00      	nop
 8002f32:	3754      	adds	r7, #84	@ 0x54
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr

08002f3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f7ff fee8 	bl	8002d2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b085      	sub	sp, #20
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b21      	cmp	r3, #33	@ 0x21
 8002f74:	d13e      	bne.n	8002ff4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f7e:	d114      	bne.n	8002faa <UART_Transmit_IT+0x48>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d110      	bne.n	8002faa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	1c9a      	adds	r2, r3, #2
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	621a      	str	r2, [r3, #32]
 8002fa8:	e008      	b.n	8002fbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	1c59      	adds	r1, r3, #1
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6211      	str	r1, [r2, #32]
 8002fb4:	781a      	ldrb	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10f      	bne.n	8002ff0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e000      	b.n	8002ff6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ff4:	2302      	movs	r3, #2
  }
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003016:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff fe79 	bl	8002d18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08c      	sub	sp, #48	@ 0x30
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b22      	cmp	r3, #34	@ 0x22
 8003042:	f040 80ae 	bne.w	80031a2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800304e:	d117      	bne.n	8003080 <UART_Receive_IT+0x50>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d113      	bne.n	8003080 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003058:	2300      	movs	r3, #0
 800305a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003060:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	b29b      	uxth	r3, r3
 800306a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800306e:	b29a      	uxth	r2, r3
 8003070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003072:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	1c9a      	adds	r2, r3, #2
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	629a      	str	r2, [r3, #40]	@ 0x28
 800307e:	e026      	b.n	80030ce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003084:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003086:	2300      	movs	r3, #0
 8003088:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003092:	d007      	beq.n	80030a4 <UART_Receive_IT+0x74>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10a      	bne.n	80030b2 <UART_Receive_IT+0x82>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d106      	bne.n	80030b2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ae:	701a      	strb	r2, [r3, #0]
 80030b0:	e008      	b.n	80030c4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	4619      	mov	r1, r3
 80030dc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d15d      	bne.n	800319e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0220 	bic.w	r2, r2, #32
 80030f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003100:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0201 	bic.w	r2, r2, #1
 8003110:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003124:	2b01      	cmp	r3, #1
 8003126:	d135      	bne.n	8003194 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	330c      	adds	r3, #12
 8003134:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	e853 3f00 	ldrex	r3, [r3]
 800313c:	613b      	str	r3, [r7, #16]
   return(result);
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f023 0310 	bic.w	r3, r3, #16
 8003144:	627b      	str	r3, [r7, #36]	@ 0x24
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	330c      	adds	r3, #12
 800314c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800314e:	623a      	str	r2, [r7, #32]
 8003150:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003152:	69f9      	ldr	r1, [r7, #28]
 8003154:	6a3a      	ldr	r2, [r7, #32]
 8003156:	e841 2300 	strex	r3, r2, [r1]
 800315a:	61bb      	str	r3, [r7, #24]
   return(result);
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1e5      	bne.n	800312e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b10      	cmp	r3, #16
 800316e:	d10a      	bne.n	8003186 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800318a:	4619      	mov	r1, r3
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff fdd5 	bl	8002d3c <HAL_UARTEx_RxEventCallback>
 8003192:	e002      	b.n	800319a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7fd f947 	bl	8000428 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	e002      	b.n	80031a4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	e000      	b.n	80031a4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80031a2:	2302      	movs	r3, #2
  }
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3730      	adds	r7, #48	@ 0x30
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80031e6:	f023 030c 	bic.w	r3, r3, #12
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a2c      	ldr	r2, [pc, #176]	@ (80032c0 <UART_SetConfig+0x114>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d103      	bne.n	800321c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003214:	f7fe fbaa 	bl	800196c <HAL_RCC_GetPCLK2Freq>
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	e002      	b.n	8003222 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800321c:	f7fe fb92 	bl	8001944 <HAL_RCC_GetPCLK1Freq>
 8003220:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	009a      	lsls	r2, r3, #2
 800322c:	441a      	add	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	4a22      	ldr	r2, [pc, #136]	@ (80032c4 <UART_SetConfig+0x118>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	0119      	lsls	r1, r3, #4
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	009a      	lsls	r2, r3, #2
 800324c:	441a      	add	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	fbb2 f2f3 	udiv	r2, r2, r3
 8003258:	4b1a      	ldr	r3, [pc, #104]	@ (80032c4 <UART_SetConfig+0x118>)
 800325a:	fba3 0302 	umull	r0, r3, r3, r2
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	2064      	movs	r0, #100	@ 0x64
 8003262:	fb00 f303 	mul.w	r3, r0, r3
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	3332      	adds	r3, #50	@ 0x32
 800326c:	4a15      	ldr	r2, [pc, #84]	@ (80032c4 <UART_SetConfig+0x118>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003278:	4419      	add	r1, r3
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	009a      	lsls	r2, r3, #2
 8003284:	441a      	add	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003290:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <UART_SetConfig+0x118>)
 8003292:	fba3 0302 	umull	r0, r3, r3, r2
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	2064      	movs	r0, #100	@ 0x64
 800329a:	fb00 f303 	mul.w	r3, r0, r3
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	3332      	adds	r3, #50	@ 0x32
 80032a4:	4a07      	ldr	r2, [pc, #28]	@ (80032c4 <UART_SetConfig+0x118>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	f003 020f 	and.w	r2, r3, #15
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	440a      	add	r2, r1
 80032b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032b8:	bf00      	nop
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40013800 	.word	0x40013800
 80032c4:	51eb851f 	.word	0x51eb851f

080032c8 <atoi>:
 80032c8:	220a      	movs	r2, #10
 80032ca:	2100      	movs	r1, #0
 80032cc:	f000 b938 	b.w	8003540 <strtol>

080032d0 <malloc>:
 80032d0:	4b02      	ldr	r3, [pc, #8]	@ (80032dc <malloc+0xc>)
 80032d2:	4601      	mov	r1, r0
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	f000 b82d 	b.w	8003334 <_malloc_r>
 80032da:	bf00      	nop
 80032dc:	20000018 	.word	0x20000018

080032e0 <free>:
 80032e0:	4b02      	ldr	r3, [pc, #8]	@ (80032ec <free+0xc>)
 80032e2:	4601      	mov	r1, r0
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	f000 bb41 	b.w	800396c <_free_r>
 80032ea:	bf00      	nop
 80032ec:	20000018 	.word	0x20000018

080032f0 <sbrk_aligned>:
 80032f0:	b570      	push	{r4, r5, r6, lr}
 80032f2:	4e0f      	ldr	r6, [pc, #60]	@ (8003330 <sbrk_aligned+0x40>)
 80032f4:	460c      	mov	r4, r1
 80032f6:	6831      	ldr	r1, [r6, #0]
 80032f8:	4605      	mov	r5, r0
 80032fa:	b911      	cbnz	r1, 8003302 <sbrk_aligned+0x12>
 80032fc:	f000 fac8 	bl	8003890 <_sbrk_r>
 8003300:	6030      	str	r0, [r6, #0]
 8003302:	4621      	mov	r1, r4
 8003304:	4628      	mov	r0, r5
 8003306:	f000 fac3 	bl	8003890 <_sbrk_r>
 800330a:	1c43      	adds	r3, r0, #1
 800330c:	d103      	bne.n	8003316 <sbrk_aligned+0x26>
 800330e:	f04f 34ff 	mov.w	r4, #4294967295
 8003312:	4620      	mov	r0, r4
 8003314:	bd70      	pop	{r4, r5, r6, pc}
 8003316:	1cc4      	adds	r4, r0, #3
 8003318:	f024 0403 	bic.w	r4, r4, #3
 800331c:	42a0      	cmp	r0, r4
 800331e:	d0f8      	beq.n	8003312 <sbrk_aligned+0x22>
 8003320:	1a21      	subs	r1, r4, r0
 8003322:	4628      	mov	r0, r5
 8003324:	f000 fab4 	bl	8003890 <_sbrk_r>
 8003328:	3001      	adds	r0, #1
 800332a:	d1f2      	bne.n	8003312 <sbrk_aligned+0x22>
 800332c:	e7ef      	b.n	800330e <sbrk_aligned+0x1e>
 800332e:	bf00      	nop
 8003330:	20000168 	.word	0x20000168

08003334 <_malloc_r>:
 8003334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003338:	1ccd      	adds	r5, r1, #3
 800333a:	f025 0503 	bic.w	r5, r5, #3
 800333e:	3508      	adds	r5, #8
 8003340:	2d0c      	cmp	r5, #12
 8003342:	bf38      	it	cc
 8003344:	250c      	movcc	r5, #12
 8003346:	2d00      	cmp	r5, #0
 8003348:	4606      	mov	r6, r0
 800334a:	db01      	blt.n	8003350 <_malloc_r+0x1c>
 800334c:	42a9      	cmp	r1, r5
 800334e:	d904      	bls.n	800335a <_malloc_r+0x26>
 8003350:	230c      	movs	r3, #12
 8003352:	6033      	str	r3, [r6, #0]
 8003354:	2000      	movs	r0, #0
 8003356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800335a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003430 <_malloc_r+0xfc>
 800335e:	f000 f869 	bl	8003434 <__malloc_lock>
 8003362:	f8d8 3000 	ldr.w	r3, [r8]
 8003366:	461c      	mov	r4, r3
 8003368:	bb44      	cbnz	r4, 80033bc <_malloc_r+0x88>
 800336a:	4629      	mov	r1, r5
 800336c:	4630      	mov	r0, r6
 800336e:	f7ff ffbf 	bl	80032f0 <sbrk_aligned>
 8003372:	1c43      	adds	r3, r0, #1
 8003374:	4604      	mov	r4, r0
 8003376:	d158      	bne.n	800342a <_malloc_r+0xf6>
 8003378:	f8d8 4000 	ldr.w	r4, [r8]
 800337c:	4627      	mov	r7, r4
 800337e:	2f00      	cmp	r7, #0
 8003380:	d143      	bne.n	800340a <_malloc_r+0xd6>
 8003382:	2c00      	cmp	r4, #0
 8003384:	d04b      	beq.n	800341e <_malloc_r+0xea>
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	4639      	mov	r1, r7
 800338a:	4630      	mov	r0, r6
 800338c:	eb04 0903 	add.w	r9, r4, r3
 8003390:	f000 fa7e 	bl	8003890 <_sbrk_r>
 8003394:	4581      	cmp	r9, r0
 8003396:	d142      	bne.n	800341e <_malloc_r+0xea>
 8003398:	6821      	ldr	r1, [r4, #0]
 800339a:	4630      	mov	r0, r6
 800339c:	1a6d      	subs	r5, r5, r1
 800339e:	4629      	mov	r1, r5
 80033a0:	f7ff ffa6 	bl	80032f0 <sbrk_aligned>
 80033a4:	3001      	adds	r0, #1
 80033a6:	d03a      	beq.n	800341e <_malloc_r+0xea>
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	442b      	add	r3, r5
 80033ac:	6023      	str	r3, [r4, #0]
 80033ae:	f8d8 3000 	ldr.w	r3, [r8]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	bb62      	cbnz	r2, 8003410 <_malloc_r+0xdc>
 80033b6:	f8c8 7000 	str.w	r7, [r8]
 80033ba:	e00f      	b.n	80033dc <_malloc_r+0xa8>
 80033bc:	6822      	ldr	r2, [r4, #0]
 80033be:	1b52      	subs	r2, r2, r5
 80033c0:	d420      	bmi.n	8003404 <_malloc_r+0xd0>
 80033c2:	2a0b      	cmp	r2, #11
 80033c4:	d917      	bls.n	80033f6 <_malloc_r+0xc2>
 80033c6:	1961      	adds	r1, r4, r5
 80033c8:	42a3      	cmp	r3, r4
 80033ca:	6025      	str	r5, [r4, #0]
 80033cc:	bf18      	it	ne
 80033ce:	6059      	strne	r1, [r3, #4]
 80033d0:	6863      	ldr	r3, [r4, #4]
 80033d2:	bf08      	it	eq
 80033d4:	f8c8 1000 	streq.w	r1, [r8]
 80033d8:	5162      	str	r2, [r4, r5]
 80033da:	604b      	str	r3, [r1, #4]
 80033dc:	4630      	mov	r0, r6
 80033de:	f000 f82f 	bl	8003440 <__malloc_unlock>
 80033e2:	f104 000b 	add.w	r0, r4, #11
 80033e6:	1d23      	adds	r3, r4, #4
 80033e8:	f020 0007 	bic.w	r0, r0, #7
 80033ec:	1ac2      	subs	r2, r0, r3
 80033ee:	bf1c      	itt	ne
 80033f0:	1a1b      	subne	r3, r3, r0
 80033f2:	50a3      	strne	r3, [r4, r2]
 80033f4:	e7af      	b.n	8003356 <_malloc_r+0x22>
 80033f6:	6862      	ldr	r2, [r4, #4]
 80033f8:	42a3      	cmp	r3, r4
 80033fa:	bf0c      	ite	eq
 80033fc:	f8c8 2000 	streq.w	r2, [r8]
 8003400:	605a      	strne	r2, [r3, #4]
 8003402:	e7eb      	b.n	80033dc <_malloc_r+0xa8>
 8003404:	4623      	mov	r3, r4
 8003406:	6864      	ldr	r4, [r4, #4]
 8003408:	e7ae      	b.n	8003368 <_malloc_r+0x34>
 800340a:	463c      	mov	r4, r7
 800340c:	687f      	ldr	r7, [r7, #4]
 800340e:	e7b6      	b.n	800337e <_malloc_r+0x4a>
 8003410:	461a      	mov	r2, r3
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	42a3      	cmp	r3, r4
 8003416:	d1fb      	bne.n	8003410 <_malloc_r+0xdc>
 8003418:	2300      	movs	r3, #0
 800341a:	6053      	str	r3, [r2, #4]
 800341c:	e7de      	b.n	80033dc <_malloc_r+0xa8>
 800341e:	230c      	movs	r3, #12
 8003420:	4630      	mov	r0, r6
 8003422:	6033      	str	r3, [r6, #0]
 8003424:	f000 f80c 	bl	8003440 <__malloc_unlock>
 8003428:	e794      	b.n	8003354 <_malloc_r+0x20>
 800342a:	6005      	str	r5, [r0, #0]
 800342c:	e7d6      	b.n	80033dc <_malloc_r+0xa8>
 800342e:	bf00      	nop
 8003430:	2000016c 	.word	0x2000016c

08003434 <__malloc_lock>:
 8003434:	4801      	ldr	r0, [pc, #4]	@ (800343c <__malloc_lock+0x8>)
 8003436:	f000 ba78 	b.w	800392a <__retarget_lock_acquire_recursive>
 800343a:	bf00      	nop
 800343c:	200002b0 	.word	0x200002b0

08003440 <__malloc_unlock>:
 8003440:	4801      	ldr	r0, [pc, #4]	@ (8003448 <__malloc_unlock+0x8>)
 8003442:	f000 ba73 	b.w	800392c <__retarget_lock_release_recursive>
 8003446:	bf00      	nop
 8003448:	200002b0 	.word	0x200002b0

0800344c <_strtol_l.constprop.0>:
 800344c:	2b24      	cmp	r3, #36	@ 0x24
 800344e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003452:	4686      	mov	lr, r0
 8003454:	4690      	mov	r8, r2
 8003456:	d801      	bhi.n	800345c <_strtol_l.constprop.0+0x10>
 8003458:	2b01      	cmp	r3, #1
 800345a:	d106      	bne.n	800346a <_strtol_l.constprop.0+0x1e>
 800345c:	f000 fa3a 	bl	80038d4 <__errno>
 8003460:	2316      	movs	r3, #22
 8003462:	6003      	str	r3, [r0, #0]
 8003464:	2000      	movs	r0, #0
 8003466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800346a:	460d      	mov	r5, r1
 800346c:	4833      	ldr	r0, [pc, #204]	@ (800353c <_strtol_l.constprop.0+0xf0>)
 800346e:	462a      	mov	r2, r5
 8003470:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003474:	5d06      	ldrb	r6, [r0, r4]
 8003476:	f016 0608 	ands.w	r6, r6, #8
 800347a:	d1f8      	bne.n	800346e <_strtol_l.constprop.0+0x22>
 800347c:	2c2d      	cmp	r4, #45	@ 0x2d
 800347e:	d12d      	bne.n	80034dc <_strtol_l.constprop.0+0x90>
 8003480:	2601      	movs	r6, #1
 8003482:	782c      	ldrb	r4, [r5, #0]
 8003484:	1c95      	adds	r5, r2, #2
 8003486:	f033 0210 	bics.w	r2, r3, #16
 800348a:	d109      	bne.n	80034a0 <_strtol_l.constprop.0+0x54>
 800348c:	2c30      	cmp	r4, #48	@ 0x30
 800348e:	d12a      	bne.n	80034e6 <_strtol_l.constprop.0+0x9a>
 8003490:	782a      	ldrb	r2, [r5, #0]
 8003492:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003496:	2a58      	cmp	r2, #88	@ 0x58
 8003498:	d125      	bne.n	80034e6 <_strtol_l.constprop.0+0x9a>
 800349a:	2310      	movs	r3, #16
 800349c:	786c      	ldrb	r4, [r5, #1]
 800349e:	3502      	adds	r5, #2
 80034a0:	2200      	movs	r2, #0
 80034a2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80034a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80034aa:	fbbc f9f3 	udiv	r9, ip, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	fb03 ca19 	mls	sl, r3, r9, ip
 80034b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80034b8:	2f09      	cmp	r7, #9
 80034ba:	d81b      	bhi.n	80034f4 <_strtol_l.constprop.0+0xa8>
 80034bc:	463c      	mov	r4, r7
 80034be:	42a3      	cmp	r3, r4
 80034c0:	dd27      	ble.n	8003512 <_strtol_l.constprop.0+0xc6>
 80034c2:	1c57      	adds	r7, r2, #1
 80034c4:	d007      	beq.n	80034d6 <_strtol_l.constprop.0+0x8a>
 80034c6:	4581      	cmp	r9, r0
 80034c8:	d320      	bcc.n	800350c <_strtol_l.constprop.0+0xc0>
 80034ca:	d101      	bne.n	80034d0 <_strtol_l.constprop.0+0x84>
 80034cc:	45a2      	cmp	sl, r4
 80034ce:	db1d      	blt.n	800350c <_strtol_l.constprop.0+0xc0>
 80034d0:	2201      	movs	r2, #1
 80034d2:	fb00 4003 	mla	r0, r0, r3, r4
 80034d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80034da:	e7eb      	b.n	80034b4 <_strtol_l.constprop.0+0x68>
 80034dc:	2c2b      	cmp	r4, #43	@ 0x2b
 80034de:	bf04      	itt	eq
 80034e0:	782c      	ldrbeq	r4, [r5, #0]
 80034e2:	1c95      	addeq	r5, r2, #2
 80034e4:	e7cf      	b.n	8003486 <_strtol_l.constprop.0+0x3a>
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1da      	bne.n	80034a0 <_strtol_l.constprop.0+0x54>
 80034ea:	2c30      	cmp	r4, #48	@ 0x30
 80034ec:	bf0c      	ite	eq
 80034ee:	2308      	moveq	r3, #8
 80034f0:	230a      	movne	r3, #10
 80034f2:	e7d5      	b.n	80034a0 <_strtol_l.constprop.0+0x54>
 80034f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80034f8:	2f19      	cmp	r7, #25
 80034fa:	d801      	bhi.n	8003500 <_strtol_l.constprop.0+0xb4>
 80034fc:	3c37      	subs	r4, #55	@ 0x37
 80034fe:	e7de      	b.n	80034be <_strtol_l.constprop.0+0x72>
 8003500:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003504:	2f19      	cmp	r7, #25
 8003506:	d804      	bhi.n	8003512 <_strtol_l.constprop.0+0xc6>
 8003508:	3c57      	subs	r4, #87	@ 0x57
 800350a:	e7d8      	b.n	80034be <_strtol_l.constprop.0+0x72>
 800350c:	f04f 32ff 	mov.w	r2, #4294967295
 8003510:	e7e1      	b.n	80034d6 <_strtol_l.constprop.0+0x8a>
 8003512:	1c53      	adds	r3, r2, #1
 8003514:	d108      	bne.n	8003528 <_strtol_l.constprop.0+0xdc>
 8003516:	2322      	movs	r3, #34	@ 0x22
 8003518:	4660      	mov	r0, ip
 800351a:	f8ce 3000 	str.w	r3, [lr]
 800351e:	f1b8 0f00 	cmp.w	r8, #0
 8003522:	d0a0      	beq.n	8003466 <_strtol_l.constprop.0+0x1a>
 8003524:	1e69      	subs	r1, r5, #1
 8003526:	e006      	b.n	8003536 <_strtol_l.constprop.0+0xea>
 8003528:	b106      	cbz	r6, 800352c <_strtol_l.constprop.0+0xe0>
 800352a:	4240      	negs	r0, r0
 800352c:	f1b8 0f00 	cmp.w	r8, #0
 8003530:	d099      	beq.n	8003466 <_strtol_l.constprop.0+0x1a>
 8003532:	2a00      	cmp	r2, #0
 8003534:	d1f6      	bne.n	8003524 <_strtol_l.constprop.0+0xd8>
 8003536:	f8c8 1000 	str.w	r1, [r8]
 800353a:	e794      	b.n	8003466 <_strtol_l.constprop.0+0x1a>
 800353c:	08004457 	.word	0x08004457

08003540 <strtol>:
 8003540:	4613      	mov	r3, r2
 8003542:	460a      	mov	r2, r1
 8003544:	4601      	mov	r1, r0
 8003546:	4802      	ldr	r0, [pc, #8]	@ (8003550 <strtol+0x10>)
 8003548:	6800      	ldr	r0, [r0, #0]
 800354a:	f7ff bf7f 	b.w	800344c <_strtol_l.constprop.0>
 800354e:	bf00      	nop
 8003550:	20000018 	.word	0x20000018

08003554 <std>:
 8003554:	2300      	movs	r3, #0
 8003556:	b510      	push	{r4, lr}
 8003558:	4604      	mov	r4, r0
 800355a:	e9c0 3300 	strd	r3, r3, [r0]
 800355e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003562:	6083      	str	r3, [r0, #8]
 8003564:	8181      	strh	r1, [r0, #12]
 8003566:	6643      	str	r3, [r0, #100]	@ 0x64
 8003568:	81c2      	strh	r2, [r0, #14]
 800356a:	6183      	str	r3, [r0, #24]
 800356c:	4619      	mov	r1, r3
 800356e:	2208      	movs	r2, #8
 8003570:	305c      	adds	r0, #92	@ 0x5c
 8003572:	f000 f8f4 	bl	800375e <memset>
 8003576:	4b0d      	ldr	r3, [pc, #52]	@ (80035ac <std+0x58>)
 8003578:	6224      	str	r4, [r4, #32]
 800357a:	6263      	str	r3, [r4, #36]	@ 0x24
 800357c:	4b0c      	ldr	r3, [pc, #48]	@ (80035b0 <std+0x5c>)
 800357e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003580:	4b0c      	ldr	r3, [pc, #48]	@ (80035b4 <std+0x60>)
 8003582:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003584:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <std+0x64>)
 8003586:	6323      	str	r3, [r4, #48]	@ 0x30
 8003588:	4b0c      	ldr	r3, [pc, #48]	@ (80035bc <std+0x68>)
 800358a:	429c      	cmp	r4, r3
 800358c:	d006      	beq.n	800359c <std+0x48>
 800358e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003592:	4294      	cmp	r4, r2
 8003594:	d002      	beq.n	800359c <std+0x48>
 8003596:	33d0      	adds	r3, #208	@ 0xd0
 8003598:	429c      	cmp	r4, r3
 800359a:	d105      	bne.n	80035a8 <std+0x54>
 800359c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80035a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035a4:	f000 b9c0 	b.w	8003928 <__retarget_lock_init_recursive>
 80035a8:	bd10      	pop	{r4, pc}
 80035aa:	bf00      	nop
 80035ac:	080036d9 	.word	0x080036d9
 80035b0:	080036fb 	.word	0x080036fb
 80035b4:	08003733 	.word	0x08003733
 80035b8:	08003757 	.word	0x08003757
 80035bc:	20000170 	.word	0x20000170

080035c0 <stdio_exit_handler>:
 80035c0:	4a02      	ldr	r2, [pc, #8]	@ (80035cc <stdio_exit_handler+0xc>)
 80035c2:	4903      	ldr	r1, [pc, #12]	@ (80035d0 <stdio_exit_handler+0x10>)
 80035c4:	4803      	ldr	r0, [pc, #12]	@ (80035d4 <stdio_exit_handler+0x14>)
 80035c6:	f000 b869 	b.w	800369c <_fwalk_sglue>
 80035ca:	bf00      	nop
 80035cc:	2000000c 	.word	0x2000000c
 80035d0:	08003afd 	.word	0x08003afd
 80035d4:	2000001c 	.word	0x2000001c

080035d8 <cleanup_stdio>:
 80035d8:	6841      	ldr	r1, [r0, #4]
 80035da:	4b0c      	ldr	r3, [pc, #48]	@ (800360c <cleanup_stdio+0x34>)
 80035dc:	b510      	push	{r4, lr}
 80035de:	4299      	cmp	r1, r3
 80035e0:	4604      	mov	r4, r0
 80035e2:	d001      	beq.n	80035e8 <cleanup_stdio+0x10>
 80035e4:	f000 fa8a 	bl	8003afc <_fflush_r>
 80035e8:	68a1      	ldr	r1, [r4, #8]
 80035ea:	4b09      	ldr	r3, [pc, #36]	@ (8003610 <cleanup_stdio+0x38>)
 80035ec:	4299      	cmp	r1, r3
 80035ee:	d002      	beq.n	80035f6 <cleanup_stdio+0x1e>
 80035f0:	4620      	mov	r0, r4
 80035f2:	f000 fa83 	bl	8003afc <_fflush_r>
 80035f6:	68e1      	ldr	r1, [r4, #12]
 80035f8:	4b06      	ldr	r3, [pc, #24]	@ (8003614 <cleanup_stdio+0x3c>)
 80035fa:	4299      	cmp	r1, r3
 80035fc:	d004      	beq.n	8003608 <cleanup_stdio+0x30>
 80035fe:	4620      	mov	r0, r4
 8003600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003604:	f000 ba7a 	b.w	8003afc <_fflush_r>
 8003608:	bd10      	pop	{r4, pc}
 800360a:	bf00      	nop
 800360c:	20000170 	.word	0x20000170
 8003610:	200001d8 	.word	0x200001d8
 8003614:	20000240 	.word	0x20000240

08003618 <global_stdio_init.part.0>:
 8003618:	b510      	push	{r4, lr}
 800361a:	4b0b      	ldr	r3, [pc, #44]	@ (8003648 <global_stdio_init.part.0+0x30>)
 800361c:	4c0b      	ldr	r4, [pc, #44]	@ (800364c <global_stdio_init.part.0+0x34>)
 800361e:	4a0c      	ldr	r2, [pc, #48]	@ (8003650 <global_stdio_init.part.0+0x38>)
 8003620:	4620      	mov	r0, r4
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	2104      	movs	r1, #4
 8003626:	2200      	movs	r2, #0
 8003628:	f7ff ff94 	bl	8003554 <std>
 800362c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003630:	2201      	movs	r2, #1
 8003632:	2109      	movs	r1, #9
 8003634:	f7ff ff8e 	bl	8003554 <std>
 8003638:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800363c:	2202      	movs	r2, #2
 800363e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003642:	2112      	movs	r1, #18
 8003644:	f7ff bf86 	b.w	8003554 <std>
 8003648:	200002a8 	.word	0x200002a8
 800364c:	20000170 	.word	0x20000170
 8003650:	080035c1 	.word	0x080035c1

08003654 <__sfp_lock_acquire>:
 8003654:	4801      	ldr	r0, [pc, #4]	@ (800365c <__sfp_lock_acquire+0x8>)
 8003656:	f000 b968 	b.w	800392a <__retarget_lock_acquire_recursive>
 800365a:	bf00      	nop
 800365c:	200002b1 	.word	0x200002b1

08003660 <__sfp_lock_release>:
 8003660:	4801      	ldr	r0, [pc, #4]	@ (8003668 <__sfp_lock_release+0x8>)
 8003662:	f000 b963 	b.w	800392c <__retarget_lock_release_recursive>
 8003666:	bf00      	nop
 8003668:	200002b1 	.word	0x200002b1

0800366c <__sinit>:
 800366c:	b510      	push	{r4, lr}
 800366e:	4604      	mov	r4, r0
 8003670:	f7ff fff0 	bl	8003654 <__sfp_lock_acquire>
 8003674:	6a23      	ldr	r3, [r4, #32]
 8003676:	b11b      	cbz	r3, 8003680 <__sinit+0x14>
 8003678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800367c:	f7ff bff0 	b.w	8003660 <__sfp_lock_release>
 8003680:	4b04      	ldr	r3, [pc, #16]	@ (8003694 <__sinit+0x28>)
 8003682:	6223      	str	r3, [r4, #32]
 8003684:	4b04      	ldr	r3, [pc, #16]	@ (8003698 <__sinit+0x2c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f5      	bne.n	8003678 <__sinit+0xc>
 800368c:	f7ff ffc4 	bl	8003618 <global_stdio_init.part.0>
 8003690:	e7f2      	b.n	8003678 <__sinit+0xc>
 8003692:	bf00      	nop
 8003694:	080035d9 	.word	0x080035d9
 8003698:	200002a8 	.word	0x200002a8

0800369c <_fwalk_sglue>:
 800369c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036a0:	4607      	mov	r7, r0
 80036a2:	4688      	mov	r8, r1
 80036a4:	4614      	mov	r4, r2
 80036a6:	2600      	movs	r6, #0
 80036a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036ac:	f1b9 0901 	subs.w	r9, r9, #1
 80036b0:	d505      	bpl.n	80036be <_fwalk_sglue+0x22>
 80036b2:	6824      	ldr	r4, [r4, #0]
 80036b4:	2c00      	cmp	r4, #0
 80036b6:	d1f7      	bne.n	80036a8 <_fwalk_sglue+0xc>
 80036b8:	4630      	mov	r0, r6
 80036ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036be:	89ab      	ldrh	r3, [r5, #12]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d907      	bls.n	80036d4 <_fwalk_sglue+0x38>
 80036c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036c8:	3301      	adds	r3, #1
 80036ca:	d003      	beq.n	80036d4 <_fwalk_sglue+0x38>
 80036cc:	4629      	mov	r1, r5
 80036ce:	4638      	mov	r0, r7
 80036d0:	47c0      	blx	r8
 80036d2:	4306      	orrs	r6, r0
 80036d4:	3568      	adds	r5, #104	@ 0x68
 80036d6:	e7e9      	b.n	80036ac <_fwalk_sglue+0x10>

080036d8 <__sread>:
 80036d8:	b510      	push	{r4, lr}
 80036da:	460c      	mov	r4, r1
 80036dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036e0:	f000 f8c4 	bl	800386c <_read_r>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	bfab      	itete	ge
 80036e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80036ea:	89a3      	ldrhlt	r3, [r4, #12]
 80036ec:	181b      	addge	r3, r3, r0
 80036ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80036f2:	bfac      	ite	ge
 80036f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80036f6:	81a3      	strhlt	r3, [r4, #12]
 80036f8:	bd10      	pop	{r4, pc}

080036fa <__swrite>:
 80036fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036fe:	461f      	mov	r7, r3
 8003700:	898b      	ldrh	r3, [r1, #12]
 8003702:	4605      	mov	r5, r0
 8003704:	05db      	lsls	r3, r3, #23
 8003706:	460c      	mov	r4, r1
 8003708:	4616      	mov	r6, r2
 800370a:	d505      	bpl.n	8003718 <__swrite+0x1e>
 800370c:	2302      	movs	r3, #2
 800370e:	2200      	movs	r2, #0
 8003710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003714:	f000 f898 	bl	8003848 <_lseek_r>
 8003718:	89a3      	ldrh	r3, [r4, #12]
 800371a:	4632      	mov	r2, r6
 800371c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003720:	81a3      	strh	r3, [r4, #12]
 8003722:	4628      	mov	r0, r5
 8003724:	463b      	mov	r3, r7
 8003726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800372a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800372e:	f000 b8bf 	b.w	80038b0 <_write_r>

08003732 <__sseek>:
 8003732:	b510      	push	{r4, lr}
 8003734:	460c      	mov	r4, r1
 8003736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800373a:	f000 f885 	bl	8003848 <_lseek_r>
 800373e:	1c43      	adds	r3, r0, #1
 8003740:	89a3      	ldrh	r3, [r4, #12]
 8003742:	bf15      	itete	ne
 8003744:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003746:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800374a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800374e:	81a3      	strheq	r3, [r4, #12]
 8003750:	bf18      	it	ne
 8003752:	81a3      	strhne	r3, [r4, #12]
 8003754:	bd10      	pop	{r4, pc}

08003756 <__sclose>:
 8003756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800375a:	f000 b865 	b.w	8003828 <_close_r>

0800375e <memset>:
 800375e:	4603      	mov	r3, r0
 8003760:	4402      	add	r2, r0
 8003762:	4293      	cmp	r3, r2
 8003764:	d100      	bne.n	8003768 <memset+0xa>
 8003766:	4770      	bx	lr
 8003768:	f803 1b01 	strb.w	r1, [r3], #1
 800376c:	e7f9      	b.n	8003762 <memset+0x4>
	...

08003770 <strtok>:
 8003770:	4b16      	ldr	r3, [pc, #88]	@ (80037cc <strtok+0x5c>)
 8003772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003776:	681f      	ldr	r7, [r3, #0]
 8003778:	4605      	mov	r5, r0
 800377a:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800377c:	460e      	mov	r6, r1
 800377e:	b9ec      	cbnz	r4, 80037bc <strtok+0x4c>
 8003780:	2050      	movs	r0, #80	@ 0x50
 8003782:	f7ff fda5 	bl	80032d0 <malloc>
 8003786:	4602      	mov	r2, r0
 8003788:	6478      	str	r0, [r7, #68]	@ 0x44
 800378a:	b920      	cbnz	r0, 8003796 <strtok+0x26>
 800378c:	215b      	movs	r1, #91	@ 0x5b
 800378e:	4b10      	ldr	r3, [pc, #64]	@ (80037d0 <strtok+0x60>)
 8003790:	4810      	ldr	r0, [pc, #64]	@ (80037d4 <strtok+0x64>)
 8003792:	f000 f8cd 	bl	8003930 <__assert_func>
 8003796:	e9c0 4400 	strd	r4, r4, [r0]
 800379a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800379e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80037a2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80037a6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80037aa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80037ae:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80037b2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80037b6:	6184      	str	r4, [r0, #24]
 80037b8:	7704      	strb	r4, [r0, #28]
 80037ba:	6244      	str	r4, [r0, #36]	@ 0x24
 80037bc:	4631      	mov	r1, r6
 80037be:	4628      	mov	r0, r5
 80037c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037c2:	2301      	movs	r3, #1
 80037c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037c8:	f000 b806 	b.w	80037d8 <__strtok_r>
 80037cc:	20000018 	.word	0x20000018
 80037d0:	08004557 	.word	0x08004557
 80037d4:	0800456e 	.word	0x0800456e

080037d8 <__strtok_r>:
 80037d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037da:	4604      	mov	r4, r0
 80037dc:	b908      	cbnz	r0, 80037e2 <__strtok_r+0xa>
 80037de:	6814      	ldr	r4, [r2, #0]
 80037e0:	b144      	cbz	r4, 80037f4 <__strtok_r+0x1c>
 80037e2:	460f      	mov	r7, r1
 80037e4:	4620      	mov	r0, r4
 80037e6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80037ea:	f817 6b01 	ldrb.w	r6, [r7], #1
 80037ee:	b91e      	cbnz	r6, 80037f8 <__strtok_r+0x20>
 80037f0:	b965      	cbnz	r5, 800380c <__strtok_r+0x34>
 80037f2:	6015      	str	r5, [r2, #0]
 80037f4:	2000      	movs	r0, #0
 80037f6:	e005      	b.n	8003804 <__strtok_r+0x2c>
 80037f8:	42b5      	cmp	r5, r6
 80037fa:	d1f6      	bne.n	80037ea <__strtok_r+0x12>
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f0      	bne.n	80037e2 <__strtok_r+0xa>
 8003800:	6014      	str	r4, [r2, #0]
 8003802:	7003      	strb	r3, [r0, #0]
 8003804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003806:	461c      	mov	r4, r3
 8003808:	e00c      	b.n	8003824 <__strtok_r+0x4c>
 800380a:	b915      	cbnz	r5, 8003812 <__strtok_r+0x3a>
 800380c:	460e      	mov	r6, r1
 800380e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003812:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003816:	42ab      	cmp	r3, r5
 8003818:	d1f7      	bne.n	800380a <__strtok_r+0x32>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f3      	beq.n	8003806 <__strtok_r+0x2e>
 800381e:	2300      	movs	r3, #0
 8003820:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003824:	6014      	str	r4, [r2, #0]
 8003826:	e7ed      	b.n	8003804 <__strtok_r+0x2c>

08003828 <_close_r>:
 8003828:	b538      	push	{r3, r4, r5, lr}
 800382a:	2300      	movs	r3, #0
 800382c:	4d05      	ldr	r5, [pc, #20]	@ (8003844 <_close_r+0x1c>)
 800382e:	4604      	mov	r4, r0
 8003830:	4608      	mov	r0, r1
 8003832:	602b      	str	r3, [r5, #0]
 8003834:	f7fd f859 	bl	80008ea <_close>
 8003838:	1c43      	adds	r3, r0, #1
 800383a:	d102      	bne.n	8003842 <_close_r+0x1a>
 800383c:	682b      	ldr	r3, [r5, #0]
 800383e:	b103      	cbz	r3, 8003842 <_close_r+0x1a>
 8003840:	6023      	str	r3, [r4, #0]
 8003842:	bd38      	pop	{r3, r4, r5, pc}
 8003844:	200002ac 	.word	0x200002ac

08003848 <_lseek_r>:
 8003848:	b538      	push	{r3, r4, r5, lr}
 800384a:	4604      	mov	r4, r0
 800384c:	4608      	mov	r0, r1
 800384e:	4611      	mov	r1, r2
 8003850:	2200      	movs	r2, #0
 8003852:	4d05      	ldr	r5, [pc, #20]	@ (8003868 <_lseek_r+0x20>)
 8003854:	602a      	str	r2, [r5, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	f7fd f86b 	bl	8000932 <_lseek>
 800385c:	1c43      	adds	r3, r0, #1
 800385e:	d102      	bne.n	8003866 <_lseek_r+0x1e>
 8003860:	682b      	ldr	r3, [r5, #0]
 8003862:	b103      	cbz	r3, 8003866 <_lseek_r+0x1e>
 8003864:	6023      	str	r3, [r4, #0]
 8003866:	bd38      	pop	{r3, r4, r5, pc}
 8003868:	200002ac 	.word	0x200002ac

0800386c <_read_r>:
 800386c:	b538      	push	{r3, r4, r5, lr}
 800386e:	4604      	mov	r4, r0
 8003870:	4608      	mov	r0, r1
 8003872:	4611      	mov	r1, r2
 8003874:	2200      	movs	r2, #0
 8003876:	4d05      	ldr	r5, [pc, #20]	@ (800388c <_read_r+0x20>)
 8003878:	602a      	str	r2, [r5, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	f7fc fffc 	bl	8000878 <_read>
 8003880:	1c43      	adds	r3, r0, #1
 8003882:	d102      	bne.n	800388a <_read_r+0x1e>
 8003884:	682b      	ldr	r3, [r5, #0]
 8003886:	b103      	cbz	r3, 800388a <_read_r+0x1e>
 8003888:	6023      	str	r3, [r4, #0]
 800388a:	bd38      	pop	{r3, r4, r5, pc}
 800388c:	200002ac 	.word	0x200002ac

08003890 <_sbrk_r>:
 8003890:	b538      	push	{r3, r4, r5, lr}
 8003892:	2300      	movs	r3, #0
 8003894:	4d05      	ldr	r5, [pc, #20]	@ (80038ac <_sbrk_r+0x1c>)
 8003896:	4604      	mov	r4, r0
 8003898:	4608      	mov	r0, r1
 800389a:	602b      	str	r3, [r5, #0]
 800389c:	f7fd f856 	bl	800094c <_sbrk>
 80038a0:	1c43      	adds	r3, r0, #1
 80038a2:	d102      	bne.n	80038aa <_sbrk_r+0x1a>
 80038a4:	682b      	ldr	r3, [r5, #0]
 80038a6:	b103      	cbz	r3, 80038aa <_sbrk_r+0x1a>
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	bd38      	pop	{r3, r4, r5, pc}
 80038ac:	200002ac 	.word	0x200002ac

080038b0 <_write_r>:
 80038b0:	b538      	push	{r3, r4, r5, lr}
 80038b2:	4604      	mov	r4, r0
 80038b4:	4608      	mov	r0, r1
 80038b6:	4611      	mov	r1, r2
 80038b8:	2200      	movs	r2, #0
 80038ba:	4d05      	ldr	r5, [pc, #20]	@ (80038d0 <_write_r+0x20>)
 80038bc:	602a      	str	r2, [r5, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	f7fc fff7 	bl	80008b2 <_write>
 80038c4:	1c43      	adds	r3, r0, #1
 80038c6:	d102      	bne.n	80038ce <_write_r+0x1e>
 80038c8:	682b      	ldr	r3, [r5, #0]
 80038ca:	b103      	cbz	r3, 80038ce <_write_r+0x1e>
 80038cc:	6023      	str	r3, [r4, #0]
 80038ce:	bd38      	pop	{r3, r4, r5, pc}
 80038d0:	200002ac 	.word	0x200002ac

080038d4 <__errno>:
 80038d4:	4b01      	ldr	r3, [pc, #4]	@ (80038dc <__errno+0x8>)
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	20000018 	.word	0x20000018

080038e0 <__libc_init_array>:
 80038e0:	b570      	push	{r4, r5, r6, lr}
 80038e2:	2600      	movs	r6, #0
 80038e4:	4d0c      	ldr	r5, [pc, #48]	@ (8003918 <__libc_init_array+0x38>)
 80038e6:	4c0d      	ldr	r4, [pc, #52]	@ (800391c <__libc_init_array+0x3c>)
 80038e8:	1b64      	subs	r4, r4, r5
 80038ea:	10a4      	asrs	r4, r4, #2
 80038ec:	42a6      	cmp	r6, r4
 80038ee:	d109      	bne.n	8003904 <__libc_init_array+0x24>
 80038f0:	f000 fd80 	bl	80043f4 <_init>
 80038f4:	2600      	movs	r6, #0
 80038f6:	4d0a      	ldr	r5, [pc, #40]	@ (8003920 <__libc_init_array+0x40>)
 80038f8:	4c0a      	ldr	r4, [pc, #40]	@ (8003924 <__libc_init_array+0x44>)
 80038fa:	1b64      	subs	r4, r4, r5
 80038fc:	10a4      	asrs	r4, r4, #2
 80038fe:	42a6      	cmp	r6, r4
 8003900:	d105      	bne.n	800390e <__libc_init_array+0x2e>
 8003902:	bd70      	pop	{r4, r5, r6, pc}
 8003904:	f855 3b04 	ldr.w	r3, [r5], #4
 8003908:	4798      	blx	r3
 800390a:	3601      	adds	r6, #1
 800390c:	e7ee      	b.n	80038ec <__libc_init_array+0xc>
 800390e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003912:	4798      	blx	r3
 8003914:	3601      	adds	r6, #1
 8003916:	e7f2      	b.n	80038fe <__libc_init_array+0x1e>
 8003918:	08004640 	.word	0x08004640
 800391c:	08004640 	.word	0x08004640
 8003920:	08004640 	.word	0x08004640
 8003924:	08004644 	.word	0x08004644

08003928 <__retarget_lock_init_recursive>:
 8003928:	4770      	bx	lr

0800392a <__retarget_lock_acquire_recursive>:
 800392a:	4770      	bx	lr

0800392c <__retarget_lock_release_recursive>:
 800392c:	4770      	bx	lr
	...

08003930 <__assert_func>:
 8003930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003932:	4614      	mov	r4, r2
 8003934:	461a      	mov	r2, r3
 8003936:	4b09      	ldr	r3, [pc, #36]	@ (800395c <__assert_func+0x2c>)
 8003938:	4605      	mov	r5, r0
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68d8      	ldr	r0, [r3, #12]
 800393e:	b954      	cbnz	r4, 8003956 <__assert_func+0x26>
 8003940:	4b07      	ldr	r3, [pc, #28]	@ (8003960 <__assert_func+0x30>)
 8003942:	461c      	mov	r4, r3
 8003944:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003948:	9100      	str	r1, [sp, #0]
 800394a:	462b      	mov	r3, r5
 800394c:	4905      	ldr	r1, [pc, #20]	@ (8003964 <__assert_func+0x34>)
 800394e:	f000 f8fd 	bl	8003b4c <fiprintf>
 8003952:	f000 f90d 	bl	8003b70 <abort>
 8003956:	4b04      	ldr	r3, [pc, #16]	@ (8003968 <__assert_func+0x38>)
 8003958:	e7f4      	b.n	8003944 <__assert_func+0x14>
 800395a:	bf00      	nop
 800395c:	20000018 	.word	0x20000018
 8003960:	08004603 	.word	0x08004603
 8003964:	080045d5 	.word	0x080045d5
 8003968:	080045c8 	.word	0x080045c8

0800396c <_free_r>:
 800396c:	b538      	push	{r3, r4, r5, lr}
 800396e:	4605      	mov	r5, r0
 8003970:	2900      	cmp	r1, #0
 8003972:	d040      	beq.n	80039f6 <_free_r+0x8a>
 8003974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003978:	1f0c      	subs	r4, r1, #4
 800397a:	2b00      	cmp	r3, #0
 800397c:	bfb8      	it	lt
 800397e:	18e4      	addlt	r4, r4, r3
 8003980:	f7ff fd58 	bl	8003434 <__malloc_lock>
 8003984:	4a1c      	ldr	r2, [pc, #112]	@ (80039f8 <_free_r+0x8c>)
 8003986:	6813      	ldr	r3, [r2, #0]
 8003988:	b933      	cbnz	r3, 8003998 <_free_r+0x2c>
 800398a:	6063      	str	r3, [r4, #4]
 800398c:	6014      	str	r4, [r2, #0]
 800398e:	4628      	mov	r0, r5
 8003990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003994:	f7ff bd54 	b.w	8003440 <__malloc_unlock>
 8003998:	42a3      	cmp	r3, r4
 800399a:	d908      	bls.n	80039ae <_free_r+0x42>
 800399c:	6820      	ldr	r0, [r4, #0]
 800399e:	1821      	adds	r1, r4, r0
 80039a0:	428b      	cmp	r3, r1
 80039a2:	bf01      	itttt	eq
 80039a4:	6819      	ldreq	r1, [r3, #0]
 80039a6:	685b      	ldreq	r3, [r3, #4]
 80039a8:	1809      	addeq	r1, r1, r0
 80039aa:	6021      	streq	r1, [r4, #0]
 80039ac:	e7ed      	b.n	800398a <_free_r+0x1e>
 80039ae:	461a      	mov	r2, r3
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	b10b      	cbz	r3, 80039b8 <_free_r+0x4c>
 80039b4:	42a3      	cmp	r3, r4
 80039b6:	d9fa      	bls.n	80039ae <_free_r+0x42>
 80039b8:	6811      	ldr	r1, [r2, #0]
 80039ba:	1850      	adds	r0, r2, r1
 80039bc:	42a0      	cmp	r0, r4
 80039be:	d10b      	bne.n	80039d8 <_free_r+0x6c>
 80039c0:	6820      	ldr	r0, [r4, #0]
 80039c2:	4401      	add	r1, r0
 80039c4:	1850      	adds	r0, r2, r1
 80039c6:	4283      	cmp	r3, r0
 80039c8:	6011      	str	r1, [r2, #0]
 80039ca:	d1e0      	bne.n	800398e <_free_r+0x22>
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	4408      	add	r0, r1
 80039d2:	6010      	str	r0, [r2, #0]
 80039d4:	6053      	str	r3, [r2, #4]
 80039d6:	e7da      	b.n	800398e <_free_r+0x22>
 80039d8:	d902      	bls.n	80039e0 <_free_r+0x74>
 80039da:	230c      	movs	r3, #12
 80039dc:	602b      	str	r3, [r5, #0]
 80039de:	e7d6      	b.n	800398e <_free_r+0x22>
 80039e0:	6820      	ldr	r0, [r4, #0]
 80039e2:	1821      	adds	r1, r4, r0
 80039e4:	428b      	cmp	r3, r1
 80039e6:	bf01      	itttt	eq
 80039e8:	6819      	ldreq	r1, [r3, #0]
 80039ea:	685b      	ldreq	r3, [r3, #4]
 80039ec:	1809      	addeq	r1, r1, r0
 80039ee:	6021      	streq	r1, [r4, #0]
 80039f0:	6063      	str	r3, [r4, #4]
 80039f2:	6054      	str	r4, [r2, #4]
 80039f4:	e7cb      	b.n	800398e <_free_r+0x22>
 80039f6:	bd38      	pop	{r3, r4, r5, pc}
 80039f8:	2000016c 	.word	0x2000016c

080039fc <__sflush_r>:
 80039fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	0716      	lsls	r6, r2, #28
 8003a04:	4605      	mov	r5, r0
 8003a06:	460c      	mov	r4, r1
 8003a08:	d454      	bmi.n	8003ab4 <__sflush_r+0xb8>
 8003a0a:	684b      	ldr	r3, [r1, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	dc02      	bgt.n	8003a16 <__sflush_r+0x1a>
 8003a10:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	dd48      	ble.n	8003aa8 <__sflush_r+0xac>
 8003a16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a18:	2e00      	cmp	r6, #0
 8003a1a:	d045      	beq.n	8003aa8 <__sflush_r+0xac>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003a22:	682f      	ldr	r7, [r5, #0]
 8003a24:	6a21      	ldr	r1, [r4, #32]
 8003a26:	602b      	str	r3, [r5, #0]
 8003a28:	d030      	beq.n	8003a8c <__sflush_r+0x90>
 8003a2a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a2c:	89a3      	ldrh	r3, [r4, #12]
 8003a2e:	0759      	lsls	r1, r3, #29
 8003a30:	d505      	bpl.n	8003a3e <__sflush_r+0x42>
 8003a32:	6863      	ldr	r3, [r4, #4]
 8003a34:	1ad2      	subs	r2, r2, r3
 8003a36:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a38:	b10b      	cbz	r3, 8003a3e <__sflush_r+0x42>
 8003a3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a3c:	1ad2      	subs	r2, r2, r3
 8003a3e:	2300      	movs	r3, #0
 8003a40:	4628      	mov	r0, r5
 8003a42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a44:	6a21      	ldr	r1, [r4, #32]
 8003a46:	47b0      	blx	r6
 8003a48:	1c43      	adds	r3, r0, #1
 8003a4a:	89a3      	ldrh	r3, [r4, #12]
 8003a4c:	d106      	bne.n	8003a5c <__sflush_r+0x60>
 8003a4e:	6829      	ldr	r1, [r5, #0]
 8003a50:	291d      	cmp	r1, #29
 8003a52:	d82b      	bhi.n	8003aac <__sflush_r+0xb0>
 8003a54:	4a28      	ldr	r2, [pc, #160]	@ (8003af8 <__sflush_r+0xfc>)
 8003a56:	410a      	asrs	r2, r1
 8003a58:	07d6      	lsls	r6, r2, #31
 8003a5a:	d427      	bmi.n	8003aac <__sflush_r+0xb0>
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	6062      	str	r2, [r4, #4]
 8003a60:	6922      	ldr	r2, [r4, #16]
 8003a62:	04d9      	lsls	r1, r3, #19
 8003a64:	6022      	str	r2, [r4, #0]
 8003a66:	d504      	bpl.n	8003a72 <__sflush_r+0x76>
 8003a68:	1c42      	adds	r2, r0, #1
 8003a6a:	d101      	bne.n	8003a70 <__sflush_r+0x74>
 8003a6c:	682b      	ldr	r3, [r5, #0]
 8003a6e:	b903      	cbnz	r3, 8003a72 <__sflush_r+0x76>
 8003a70:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a72:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a74:	602f      	str	r7, [r5, #0]
 8003a76:	b1b9      	cbz	r1, 8003aa8 <__sflush_r+0xac>
 8003a78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a7c:	4299      	cmp	r1, r3
 8003a7e:	d002      	beq.n	8003a86 <__sflush_r+0x8a>
 8003a80:	4628      	mov	r0, r5
 8003a82:	f7ff ff73 	bl	800396c <_free_r>
 8003a86:	2300      	movs	r3, #0
 8003a88:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a8a:	e00d      	b.n	8003aa8 <__sflush_r+0xac>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	4628      	mov	r0, r5
 8003a90:	47b0      	blx	r6
 8003a92:	4602      	mov	r2, r0
 8003a94:	1c50      	adds	r0, r2, #1
 8003a96:	d1c9      	bne.n	8003a2c <__sflush_r+0x30>
 8003a98:	682b      	ldr	r3, [r5, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0c6      	beq.n	8003a2c <__sflush_r+0x30>
 8003a9e:	2b1d      	cmp	r3, #29
 8003aa0:	d001      	beq.n	8003aa6 <__sflush_r+0xaa>
 8003aa2:	2b16      	cmp	r3, #22
 8003aa4:	d11d      	bne.n	8003ae2 <__sflush_r+0xe6>
 8003aa6:	602f      	str	r7, [r5, #0]
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	e021      	b.n	8003af0 <__sflush_r+0xf4>
 8003aac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ab0:	b21b      	sxth	r3, r3
 8003ab2:	e01a      	b.n	8003aea <__sflush_r+0xee>
 8003ab4:	690f      	ldr	r7, [r1, #16]
 8003ab6:	2f00      	cmp	r7, #0
 8003ab8:	d0f6      	beq.n	8003aa8 <__sflush_r+0xac>
 8003aba:	0793      	lsls	r3, r2, #30
 8003abc:	bf18      	it	ne
 8003abe:	2300      	movne	r3, #0
 8003ac0:	680e      	ldr	r6, [r1, #0]
 8003ac2:	bf08      	it	eq
 8003ac4:	694b      	ldreq	r3, [r1, #20]
 8003ac6:	1bf6      	subs	r6, r6, r7
 8003ac8:	600f      	str	r7, [r1, #0]
 8003aca:	608b      	str	r3, [r1, #8]
 8003acc:	2e00      	cmp	r6, #0
 8003ace:	ddeb      	ble.n	8003aa8 <__sflush_r+0xac>
 8003ad0:	4633      	mov	r3, r6
 8003ad2:	463a      	mov	r2, r7
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	6a21      	ldr	r1, [r4, #32]
 8003ad8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003adc:	47e0      	blx	ip
 8003ade:	2800      	cmp	r0, #0
 8003ae0:	dc07      	bgt.n	8003af2 <__sflush_r+0xf6>
 8003ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aea:	f04f 30ff 	mov.w	r0, #4294967295
 8003aee:	81a3      	strh	r3, [r4, #12]
 8003af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003af2:	4407      	add	r7, r0
 8003af4:	1a36      	subs	r6, r6, r0
 8003af6:	e7e9      	b.n	8003acc <__sflush_r+0xd0>
 8003af8:	dfbffffe 	.word	0xdfbffffe

08003afc <_fflush_r>:
 8003afc:	b538      	push	{r3, r4, r5, lr}
 8003afe:	690b      	ldr	r3, [r1, #16]
 8003b00:	4605      	mov	r5, r0
 8003b02:	460c      	mov	r4, r1
 8003b04:	b913      	cbnz	r3, 8003b0c <_fflush_r+0x10>
 8003b06:	2500      	movs	r5, #0
 8003b08:	4628      	mov	r0, r5
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
 8003b0c:	b118      	cbz	r0, 8003b16 <_fflush_r+0x1a>
 8003b0e:	6a03      	ldr	r3, [r0, #32]
 8003b10:	b90b      	cbnz	r3, 8003b16 <_fflush_r+0x1a>
 8003b12:	f7ff fdab 	bl	800366c <__sinit>
 8003b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f3      	beq.n	8003b06 <_fflush_r+0xa>
 8003b1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003b20:	07d0      	lsls	r0, r2, #31
 8003b22:	d404      	bmi.n	8003b2e <_fflush_r+0x32>
 8003b24:	0599      	lsls	r1, r3, #22
 8003b26:	d402      	bmi.n	8003b2e <_fflush_r+0x32>
 8003b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b2a:	f7ff fefe 	bl	800392a <__retarget_lock_acquire_recursive>
 8003b2e:	4628      	mov	r0, r5
 8003b30:	4621      	mov	r1, r4
 8003b32:	f7ff ff63 	bl	80039fc <__sflush_r>
 8003b36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b38:	4605      	mov	r5, r0
 8003b3a:	07da      	lsls	r2, r3, #31
 8003b3c:	d4e4      	bmi.n	8003b08 <_fflush_r+0xc>
 8003b3e:	89a3      	ldrh	r3, [r4, #12]
 8003b40:	059b      	lsls	r3, r3, #22
 8003b42:	d4e1      	bmi.n	8003b08 <_fflush_r+0xc>
 8003b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b46:	f7ff fef1 	bl	800392c <__retarget_lock_release_recursive>
 8003b4a:	e7dd      	b.n	8003b08 <_fflush_r+0xc>

08003b4c <fiprintf>:
 8003b4c:	b40e      	push	{r1, r2, r3}
 8003b4e:	b503      	push	{r0, r1, lr}
 8003b50:	4601      	mov	r1, r0
 8003b52:	ab03      	add	r3, sp, #12
 8003b54:	4805      	ldr	r0, [pc, #20]	@ (8003b6c <fiprintf+0x20>)
 8003b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b5a:	6800      	ldr	r0, [r0, #0]
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	f000 f835 	bl	8003bcc <_vfiprintf_r>
 8003b62:	b002      	add	sp, #8
 8003b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b68:	b003      	add	sp, #12
 8003b6a:	4770      	bx	lr
 8003b6c:	20000018 	.word	0x20000018

08003b70 <abort>:
 8003b70:	2006      	movs	r0, #6
 8003b72:	b508      	push	{r3, lr}
 8003b74:	f000 fb90 	bl	8004298 <raise>
 8003b78:	2001      	movs	r0, #1
 8003b7a:	f7fc fe72 	bl	8000862 <_exit>

08003b7e <__sfputc_r>:
 8003b7e:	6893      	ldr	r3, [r2, #8]
 8003b80:	b410      	push	{r4}
 8003b82:	3b01      	subs	r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	6093      	str	r3, [r2, #8]
 8003b88:	da07      	bge.n	8003b9a <__sfputc_r+0x1c>
 8003b8a:	6994      	ldr	r4, [r2, #24]
 8003b8c:	42a3      	cmp	r3, r4
 8003b8e:	db01      	blt.n	8003b94 <__sfputc_r+0x16>
 8003b90:	290a      	cmp	r1, #10
 8003b92:	d102      	bne.n	8003b9a <__sfputc_r+0x1c>
 8003b94:	bc10      	pop	{r4}
 8003b96:	f000 bac3 	b.w	8004120 <__swbuf_r>
 8003b9a:	6813      	ldr	r3, [r2, #0]
 8003b9c:	1c58      	adds	r0, r3, #1
 8003b9e:	6010      	str	r0, [r2, #0]
 8003ba0:	7019      	strb	r1, [r3, #0]
 8003ba2:	4608      	mov	r0, r1
 8003ba4:	bc10      	pop	{r4}
 8003ba6:	4770      	bx	lr

08003ba8 <__sfputs_r>:
 8003ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003baa:	4606      	mov	r6, r0
 8003bac:	460f      	mov	r7, r1
 8003bae:	4614      	mov	r4, r2
 8003bb0:	18d5      	adds	r5, r2, r3
 8003bb2:	42ac      	cmp	r4, r5
 8003bb4:	d101      	bne.n	8003bba <__sfputs_r+0x12>
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	e007      	b.n	8003bca <__sfputs_r+0x22>
 8003bba:	463a      	mov	r2, r7
 8003bbc:	4630      	mov	r0, r6
 8003bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bc2:	f7ff ffdc 	bl	8003b7e <__sfputc_r>
 8003bc6:	1c43      	adds	r3, r0, #1
 8003bc8:	d1f3      	bne.n	8003bb2 <__sfputs_r+0xa>
 8003bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003bcc <_vfiprintf_r>:
 8003bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd0:	460d      	mov	r5, r1
 8003bd2:	4614      	mov	r4, r2
 8003bd4:	4698      	mov	r8, r3
 8003bd6:	4606      	mov	r6, r0
 8003bd8:	b09d      	sub	sp, #116	@ 0x74
 8003bda:	b118      	cbz	r0, 8003be4 <_vfiprintf_r+0x18>
 8003bdc:	6a03      	ldr	r3, [r0, #32]
 8003bde:	b90b      	cbnz	r3, 8003be4 <_vfiprintf_r+0x18>
 8003be0:	f7ff fd44 	bl	800366c <__sinit>
 8003be4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003be6:	07d9      	lsls	r1, r3, #31
 8003be8:	d405      	bmi.n	8003bf6 <_vfiprintf_r+0x2a>
 8003bea:	89ab      	ldrh	r3, [r5, #12]
 8003bec:	059a      	lsls	r2, r3, #22
 8003bee:	d402      	bmi.n	8003bf6 <_vfiprintf_r+0x2a>
 8003bf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003bf2:	f7ff fe9a 	bl	800392a <__retarget_lock_acquire_recursive>
 8003bf6:	89ab      	ldrh	r3, [r5, #12]
 8003bf8:	071b      	lsls	r3, r3, #28
 8003bfa:	d501      	bpl.n	8003c00 <_vfiprintf_r+0x34>
 8003bfc:	692b      	ldr	r3, [r5, #16]
 8003bfe:	b99b      	cbnz	r3, 8003c28 <_vfiprintf_r+0x5c>
 8003c00:	4629      	mov	r1, r5
 8003c02:	4630      	mov	r0, r6
 8003c04:	f000 faca 	bl	800419c <__swsetup_r>
 8003c08:	b170      	cbz	r0, 8003c28 <_vfiprintf_r+0x5c>
 8003c0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c0c:	07dc      	lsls	r4, r3, #31
 8003c0e:	d504      	bpl.n	8003c1a <_vfiprintf_r+0x4e>
 8003c10:	f04f 30ff 	mov.w	r0, #4294967295
 8003c14:	b01d      	add	sp, #116	@ 0x74
 8003c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c1a:	89ab      	ldrh	r3, [r5, #12]
 8003c1c:	0598      	lsls	r0, r3, #22
 8003c1e:	d4f7      	bmi.n	8003c10 <_vfiprintf_r+0x44>
 8003c20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c22:	f7ff fe83 	bl	800392c <__retarget_lock_release_recursive>
 8003c26:	e7f3      	b.n	8003c10 <_vfiprintf_r+0x44>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c32:	2330      	movs	r3, #48	@ 0x30
 8003c34:	f04f 0901 	mov.w	r9, #1
 8003c38:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c3c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003de8 <_vfiprintf_r+0x21c>
 8003c40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c44:	4623      	mov	r3, r4
 8003c46:	469a      	mov	sl, r3
 8003c48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c4c:	b10a      	cbz	r2, 8003c52 <_vfiprintf_r+0x86>
 8003c4e:	2a25      	cmp	r2, #37	@ 0x25
 8003c50:	d1f9      	bne.n	8003c46 <_vfiprintf_r+0x7a>
 8003c52:	ebba 0b04 	subs.w	fp, sl, r4
 8003c56:	d00b      	beq.n	8003c70 <_vfiprintf_r+0xa4>
 8003c58:	465b      	mov	r3, fp
 8003c5a:	4622      	mov	r2, r4
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	4630      	mov	r0, r6
 8003c60:	f7ff ffa2 	bl	8003ba8 <__sfputs_r>
 8003c64:	3001      	adds	r0, #1
 8003c66:	f000 80a7 	beq.w	8003db8 <_vfiprintf_r+0x1ec>
 8003c6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c6c:	445a      	add	r2, fp
 8003c6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c70:	f89a 3000 	ldrb.w	r3, [sl]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 809f 	beq.w	8003db8 <_vfiprintf_r+0x1ec>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c84:	f10a 0a01 	add.w	sl, sl, #1
 8003c88:	9304      	str	r3, [sp, #16]
 8003c8a:	9307      	str	r3, [sp, #28]
 8003c8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c90:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c92:	4654      	mov	r4, sl
 8003c94:	2205      	movs	r2, #5
 8003c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c9a:	4853      	ldr	r0, [pc, #332]	@ (8003de8 <_vfiprintf_r+0x21c>)
 8003c9c:	f000 fb18 	bl	80042d0 <memchr>
 8003ca0:	9a04      	ldr	r2, [sp, #16]
 8003ca2:	b9d8      	cbnz	r0, 8003cdc <_vfiprintf_r+0x110>
 8003ca4:	06d1      	lsls	r1, r2, #27
 8003ca6:	bf44      	itt	mi
 8003ca8:	2320      	movmi	r3, #32
 8003caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cae:	0713      	lsls	r3, r2, #28
 8003cb0:	bf44      	itt	mi
 8003cb2:	232b      	movmi	r3, #43	@ 0x2b
 8003cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8003cbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cbe:	d015      	beq.n	8003cec <_vfiprintf_r+0x120>
 8003cc0:	4654      	mov	r4, sl
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	f04f 0c0a 	mov.w	ip, #10
 8003cc8:	9a07      	ldr	r2, [sp, #28]
 8003cca:	4621      	mov	r1, r4
 8003ccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cd0:	3b30      	subs	r3, #48	@ 0x30
 8003cd2:	2b09      	cmp	r3, #9
 8003cd4:	d94b      	bls.n	8003d6e <_vfiprintf_r+0x1a2>
 8003cd6:	b1b0      	cbz	r0, 8003d06 <_vfiprintf_r+0x13a>
 8003cd8:	9207      	str	r2, [sp, #28]
 8003cda:	e014      	b.n	8003d06 <_vfiprintf_r+0x13a>
 8003cdc:	eba0 0308 	sub.w	r3, r0, r8
 8003ce0:	fa09 f303 	lsl.w	r3, r9, r3
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	46a2      	mov	sl, r4
 8003ce8:	9304      	str	r3, [sp, #16]
 8003cea:	e7d2      	b.n	8003c92 <_vfiprintf_r+0xc6>
 8003cec:	9b03      	ldr	r3, [sp, #12]
 8003cee:	1d19      	adds	r1, r3, #4
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	9103      	str	r1, [sp, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bfbb      	ittet	lt
 8003cf8:	425b      	neglt	r3, r3
 8003cfa:	f042 0202 	orrlt.w	r2, r2, #2
 8003cfe:	9307      	strge	r3, [sp, #28]
 8003d00:	9307      	strlt	r3, [sp, #28]
 8003d02:	bfb8      	it	lt
 8003d04:	9204      	strlt	r2, [sp, #16]
 8003d06:	7823      	ldrb	r3, [r4, #0]
 8003d08:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d0a:	d10a      	bne.n	8003d22 <_vfiprintf_r+0x156>
 8003d0c:	7863      	ldrb	r3, [r4, #1]
 8003d0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d10:	d132      	bne.n	8003d78 <_vfiprintf_r+0x1ac>
 8003d12:	9b03      	ldr	r3, [sp, #12]
 8003d14:	3402      	adds	r4, #2
 8003d16:	1d1a      	adds	r2, r3, #4
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	9203      	str	r2, [sp, #12]
 8003d1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d20:	9305      	str	r3, [sp, #20]
 8003d22:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003dec <_vfiprintf_r+0x220>
 8003d26:	2203      	movs	r2, #3
 8003d28:	4650      	mov	r0, sl
 8003d2a:	7821      	ldrb	r1, [r4, #0]
 8003d2c:	f000 fad0 	bl	80042d0 <memchr>
 8003d30:	b138      	cbz	r0, 8003d42 <_vfiprintf_r+0x176>
 8003d32:	2240      	movs	r2, #64	@ 0x40
 8003d34:	9b04      	ldr	r3, [sp, #16]
 8003d36:	eba0 000a 	sub.w	r0, r0, sl
 8003d3a:	4082      	lsls	r2, r0
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	3401      	adds	r4, #1
 8003d40:	9304      	str	r3, [sp, #16]
 8003d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d46:	2206      	movs	r2, #6
 8003d48:	4829      	ldr	r0, [pc, #164]	@ (8003df0 <_vfiprintf_r+0x224>)
 8003d4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d4e:	f000 fabf 	bl	80042d0 <memchr>
 8003d52:	2800      	cmp	r0, #0
 8003d54:	d03f      	beq.n	8003dd6 <_vfiprintf_r+0x20a>
 8003d56:	4b27      	ldr	r3, [pc, #156]	@ (8003df4 <_vfiprintf_r+0x228>)
 8003d58:	bb1b      	cbnz	r3, 8003da2 <_vfiprintf_r+0x1d6>
 8003d5a:	9b03      	ldr	r3, [sp, #12]
 8003d5c:	3307      	adds	r3, #7
 8003d5e:	f023 0307 	bic.w	r3, r3, #7
 8003d62:	3308      	adds	r3, #8
 8003d64:	9303      	str	r3, [sp, #12]
 8003d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d68:	443b      	add	r3, r7
 8003d6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d6c:	e76a      	b.n	8003c44 <_vfiprintf_r+0x78>
 8003d6e:	460c      	mov	r4, r1
 8003d70:	2001      	movs	r0, #1
 8003d72:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d76:	e7a8      	b.n	8003cca <_vfiprintf_r+0xfe>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f04f 0c0a 	mov.w	ip, #10
 8003d7e:	4619      	mov	r1, r3
 8003d80:	3401      	adds	r4, #1
 8003d82:	9305      	str	r3, [sp, #20]
 8003d84:	4620      	mov	r0, r4
 8003d86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d8a:	3a30      	subs	r2, #48	@ 0x30
 8003d8c:	2a09      	cmp	r2, #9
 8003d8e:	d903      	bls.n	8003d98 <_vfiprintf_r+0x1cc>
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0c6      	beq.n	8003d22 <_vfiprintf_r+0x156>
 8003d94:	9105      	str	r1, [sp, #20]
 8003d96:	e7c4      	b.n	8003d22 <_vfiprintf_r+0x156>
 8003d98:	4604      	mov	r4, r0
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003da0:	e7f0      	b.n	8003d84 <_vfiprintf_r+0x1b8>
 8003da2:	ab03      	add	r3, sp, #12
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	462a      	mov	r2, r5
 8003da8:	4630      	mov	r0, r6
 8003daa:	4b13      	ldr	r3, [pc, #76]	@ (8003df8 <_vfiprintf_r+0x22c>)
 8003dac:	a904      	add	r1, sp, #16
 8003dae:	f3af 8000 	nop.w
 8003db2:	4607      	mov	r7, r0
 8003db4:	1c78      	adds	r0, r7, #1
 8003db6:	d1d6      	bne.n	8003d66 <_vfiprintf_r+0x19a>
 8003db8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003dba:	07d9      	lsls	r1, r3, #31
 8003dbc:	d405      	bmi.n	8003dca <_vfiprintf_r+0x1fe>
 8003dbe:	89ab      	ldrh	r3, [r5, #12]
 8003dc0:	059a      	lsls	r2, r3, #22
 8003dc2:	d402      	bmi.n	8003dca <_vfiprintf_r+0x1fe>
 8003dc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003dc6:	f7ff fdb1 	bl	800392c <__retarget_lock_release_recursive>
 8003dca:	89ab      	ldrh	r3, [r5, #12]
 8003dcc:	065b      	lsls	r3, r3, #25
 8003dce:	f53f af1f 	bmi.w	8003c10 <_vfiprintf_r+0x44>
 8003dd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003dd4:	e71e      	b.n	8003c14 <_vfiprintf_r+0x48>
 8003dd6:	ab03      	add	r3, sp, #12
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	462a      	mov	r2, r5
 8003ddc:	4630      	mov	r0, r6
 8003dde:	4b06      	ldr	r3, [pc, #24]	@ (8003df8 <_vfiprintf_r+0x22c>)
 8003de0:	a904      	add	r1, sp, #16
 8003de2:	f000 f87d 	bl	8003ee0 <_printf_i>
 8003de6:	e7e4      	b.n	8003db2 <_vfiprintf_r+0x1e6>
 8003de8:	08004604 	.word	0x08004604
 8003dec:	0800460a 	.word	0x0800460a
 8003df0:	0800460e 	.word	0x0800460e
 8003df4:	00000000 	.word	0x00000000
 8003df8:	08003ba9 	.word	0x08003ba9

08003dfc <_printf_common>:
 8003dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e00:	4616      	mov	r6, r2
 8003e02:	4698      	mov	r8, r3
 8003e04:	688a      	ldr	r2, [r1, #8]
 8003e06:	690b      	ldr	r3, [r1, #16]
 8003e08:	4607      	mov	r7, r0
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	bfb8      	it	lt
 8003e0e:	4613      	movlt	r3, r2
 8003e10:	6033      	str	r3, [r6, #0]
 8003e12:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e16:	460c      	mov	r4, r1
 8003e18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e1c:	b10a      	cbz	r2, 8003e22 <_printf_common+0x26>
 8003e1e:	3301      	adds	r3, #1
 8003e20:	6033      	str	r3, [r6, #0]
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	0699      	lsls	r1, r3, #26
 8003e26:	bf42      	ittt	mi
 8003e28:	6833      	ldrmi	r3, [r6, #0]
 8003e2a:	3302      	addmi	r3, #2
 8003e2c:	6033      	strmi	r3, [r6, #0]
 8003e2e:	6825      	ldr	r5, [r4, #0]
 8003e30:	f015 0506 	ands.w	r5, r5, #6
 8003e34:	d106      	bne.n	8003e44 <_printf_common+0x48>
 8003e36:	f104 0a19 	add.w	sl, r4, #25
 8003e3a:	68e3      	ldr	r3, [r4, #12]
 8003e3c:	6832      	ldr	r2, [r6, #0]
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	42ab      	cmp	r3, r5
 8003e42:	dc2b      	bgt.n	8003e9c <_printf_common+0xa0>
 8003e44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e48:	6822      	ldr	r2, [r4, #0]
 8003e4a:	3b00      	subs	r3, #0
 8003e4c:	bf18      	it	ne
 8003e4e:	2301      	movne	r3, #1
 8003e50:	0692      	lsls	r2, r2, #26
 8003e52:	d430      	bmi.n	8003eb6 <_printf_common+0xba>
 8003e54:	4641      	mov	r1, r8
 8003e56:	4638      	mov	r0, r7
 8003e58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e5c:	47c8      	blx	r9
 8003e5e:	3001      	adds	r0, #1
 8003e60:	d023      	beq.n	8003eaa <_printf_common+0xae>
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	6922      	ldr	r2, [r4, #16]
 8003e66:	f003 0306 	and.w	r3, r3, #6
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	bf14      	ite	ne
 8003e6e:	2500      	movne	r5, #0
 8003e70:	6833      	ldreq	r3, [r6, #0]
 8003e72:	f04f 0600 	mov.w	r6, #0
 8003e76:	bf08      	it	eq
 8003e78:	68e5      	ldreq	r5, [r4, #12]
 8003e7a:	f104 041a 	add.w	r4, r4, #26
 8003e7e:	bf08      	it	eq
 8003e80:	1aed      	subeq	r5, r5, r3
 8003e82:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e86:	bf08      	it	eq
 8003e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	bfc4      	itt	gt
 8003e90:	1a9b      	subgt	r3, r3, r2
 8003e92:	18ed      	addgt	r5, r5, r3
 8003e94:	42b5      	cmp	r5, r6
 8003e96:	d11a      	bne.n	8003ece <_printf_common+0xd2>
 8003e98:	2000      	movs	r0, #0
 8003e9a:	e008      	b.n	8003eae <_printf_common+0xb2>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	4652      	mov	r2, sl
 8003ea0:	4641      	mov	r1, r8
 8003ea2:	4638      	mov	r0, r7
 8003ea4:	47c8      	blx	r9
 8003ea6:	3001      	adds	r0, #1
 8003ea8:	d103      	bne.n	8003eb2 <_printf_common+0xb6>
 8003eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8003eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb2:	3501      	adds	r5, #1
 8003eb4:	e7c1      	b.n	8003e3a <_printf_common+0x3e>
 8003eb6:	2030      	movs	r0, #48	@ 0x30
 8003eb8:	18e1      	adds	r1, r4, r3
 8003eba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ec4:	4422      	add	r2, r4
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ecc:	e7c2      	b.n	8003e54 <_printf_common+0x58>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	4622      	mov	r2, r4
 8003ed2:	4641      	mov	r1, r8
 8003ed4:	4638      	mov	r0, r7
 8003ed6:	47c8      	blx	r9
 8003ed8:	3001      	adds	r0, #1
 8003eda:	d0e6      	beq.n	8003eaa <_printf_common+0xae>
 8003edc:	3601      	adds	r6, #1
 8003ede:	e7d9      	b.n	8003e94 <_printf_common+0x98>

08003ee0 <_printf_i>:
 8003ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee4:	7e0f      	ldrb	r7, [r1, #24]
 8003ee6:	4691      	mov	r9, r2
 8003ee8:	2f78      	cmp	r7, #120	@ 0x78
 8003eea:	4680      	mov	r8, r0
 8003eec:	460c      	mov	r4, r1
 8003eee:	469a      	mov	sl, r3
 8003ef0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ef2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ef6:	d807      	bhi.n	8003f08 <_printf_i+0x28>
 8003ef8:	2f62      	cmp	r7, #98	@ 0x62
 8003efa:	d80a      	bhi.n	8003f12 <_printf_i+0x32>
 8003efc:	2f00      	cmp	r7, #0
 8003efe:	f000 80d3 	beq.w	80040a8 <_printf_i+0x1c8>
 8003f02:	2f58      	cmp	r7, #88	@ 0x58
 8003f04:	f000 80ba 	beq.w	800407c <_printf_i+0x19c>
 8003f08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f10:	e03a      	b.n	8003f88 <_printf_i+0xa8>
 8003f12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f16:	2b15      	cmp	r3, #21
 8003f18:	d8f6      	bhi.n	8003f08 <_printf_i+0x28>
 8003f1a:	a101      	add	r1, pc, #4	@ (adr r1, 8003f20 <_printf_i+0x40>)
 8003f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f20:	08003f79 	.word	0x08003f79
 8003f24:	08003f8d 	.word	0x08003f8d
 8003f28:	08003f09 	.word	0x08003f09
 8003f2c:	08003f09 	.word	0x08003f09
 8003f30:	08003f09 	.word	0x08003f09
 8003f34:	08003f09 	.word	0x08003f09
 8003f38:	08003f8d 	.word	0x08003f8d
 8003f3c:	08003f09 	.word	0x08003f09
 8003f40:	08003f09 	.word	0x08003f09
 8003f44:	08003f09 	.word	0x08003f09
 8003f48:	08003f09 	.word	0x08003f09
 8003f4c:	0800408f 	.word	0x0800408f
 8003f50:	08003fb7 	.word	0x08003fb7
 8003f54:	08004049 	.word	0x08004049
 8003f58:	08003f09 	.word	0x08003f09
 8003f5c:	08003f09 	.word	0x08003f09
 8003f60:	080040b1 	.word	0x080040b1
 8003f64:	08003f09 	.word	0x08003f09
 8003f68:	08003fb7 	.word	0x08003fb7
 8003f6c:	08003f09 	.word	0x08003f09
 8003f70:	08003f09 	.word	0x08003f09
 8003f74:	08004051 	.word	0x08004051
 8003f78:	6833      	ldr	r3, [r6, #0]
 8003f7a:	1d1a      	adds	r2, r3, #4
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6032      	str	r2, [r6, #0]
 8003f80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e09e      	b.n	80040ca <_printf_i+0x1ea>
 8003f8c:	6833      	ldr	r3, [r6, #0]
 8003f8e:	6820      	ldr	r0, [r4, #0]
 8003f90:	1d19      	adds	r1, r3, #4
 8003f92:	6031      	str	r1, [r6, #0]
 8003f94:	0606      	lsls	r6, r0, #24
 8003f96:	d501      	bpl.n	8003f9c <_printf_i+0xbc>
 8003f98:	681d      	ldr	r5, [r3, #0]
 8003f9a:	e003      	b.n	8003fa4 <_printf_i+0xc4>
 8003f9c:	0645      	lsls	r5, r0, #25
 8003f9e:	d5fb      	bpl.n	8003f98 <_printf_i+0xb8>
 8003fa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003fa4:	2d00      	cmp	r5, #0
 8003fa6:	da03      	bge.n	8003fb0 <_printf_i+0xd0>
 8003fa8:	232d      	movs	r3, #45	@ 0x2d
 8003faa:	426d      	negs	r5, r5
 8003fac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fb0:	230a      	movs	r3, #10
 8003fb2:	4859      	ldr	r0, [pc, #356]	@ (8004118 <_printf_i+0x238>)
 8003fb4:	e011      	b.n	8003fda <_printf_i+0xfa>
 8003fb6:	6821      	ldr	r1, [r4, #0]
 8003fb8:	6833      	ldr	r3, [r6, #0]
 8003fba:	0608      	lsls	r0, r1, #24
 8003fbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fc0:	d402      	bmi.n	8003fc8 <_printf_i+0xe8>
 8003fc2:	0649      	lsls	r1, r1, #25
 8003fc4:	bf48      	it	mi
 8003fc6:	b2ad      	uxthmi	r5, r5
 8003fc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fca:	6033      	str	r3, [r6, #0]
 8003fcc:	bf14      	ite	ne
 8003fce:	230a      	movne	r3, #10
 8003fd0:	2308      	moveq	r3, #8
 8003fd2:	4851      	ldr	r0, [pc, #324]	@ (8004118 <_printf_i+0x238>)
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fda:	6866      	ldr	r6, [r4, #4]
 8003fdc:	2e00      	cmp	r6, #0
 8003fde:	bfa8      	it	ge
 8003fe0:	6821      	ldrge	r1, [r4, #0]
 8003fe2:	60a6      	str	r6, [r4, #8]
 8003fe4:	bfa4      	itt	ge
 8003fe6:	f021 0104 	bicge.w	r1, r1, #4
 8003fea:	6021      	strge	r1, [r4, #0]
 8003fec:	b90d      	cbnz	r5, 8003ff2 <_printf_i+0x112>
 8003fee:	2e00      	cmp	r6, #0
 8003ff0:	d04b      	beq.n	800408a <_printf_i+0x1aa>
 8003ff2:	4616      	mov	r6, r2
 8003ff4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ff8:	fb03 5711 	mls	r7, r3, r1, r5
 8003ffc:	5dc7      	ldrb	r7, [r0, r7]
 8003ffe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004002:	462f      	mov	r7, r5
 8004004:	42bb      	cmp	r3, r7
 8004006:	460d      	mov	r5, r1
 8004008:	d9f4      	bls.n	8003ff4 <_printf_i+0x114>
 800400a:	2b08      	cmp	r3, #8
 800400c:	d10b      	bne.n	8004026 <_printf_i+0x146>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	07df      	lsls	r7, r3, #31
 8004012:	d508      	bpl.n	8004026 <_printf_i+0x146>
 8004014:	6923      	ldr	r3, [r4, #16]
 8004016:	6861      	ldr	r1, [r4, #4]
 8004018:	4299      	cmp	r1, r3
 800401a:	bfde      	ittt	le
 800401c:	2330      	movle	r3, #48	@ 0x30
 800401e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004022:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004026:	1b92      	subs	r2, r2, r6
 8004028:	6122      	str	r2, [r4, #16]
 800402a:	464b      	mov	r3, r9
 800402c:	4621      	mov	r1, r4
 800402e:	4640      	mov	r0, r8
 8004030:	f8cd a000 	str.w	sl, [sp]
 8004034:	aa03      	add	r2, sp, #12
 8004036:	f7ff fee1 	bl	8003dfc <_printf_common>
 800403a:	3001      	adds	r0, #1
 800403c:	d14a      	bne.n	80040d4 <_printf_i+0x1f4>
 800403e:	f04f 30ff 	mov.w	r0, #4294967295
 8004042:	b004      	add	sp, #16
 8004044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	f043 0320 	orr.w	r3, r3, #32
 800404e:	6023      	str	r3, [r4, #0]
 8004050:	2778      	movs	r7, #120	@ 0x78
 8004052:	4832      	ldr	r0, [pc, #200]	@ (800411c <_printf_i+0x23c>)
 8004054:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	6831      	ldr	r1, [r6, #0]
 800405c:	061f      	lsls	r7, r3, #24
 800405e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004062:	d402      	bmi.n	800406a <_printf_i+0x18a>
 8004064:	065f      	lsls	r7, r3, #25
 8004066:	bf48      	it	mi
 8004068:	b2ad      	uxthmi	r5, r5
 800406a:	6031      	str	r1, [r6, #0]
 800406c:	07d9      	lsls	r1, r3, #31
 800406e:	bf44      	itt	mi
 8004070:	f043 0320 	orrmi.w	r3, r3, #32
 8004074:	6023      	strmi	r3, [r4, #0]
 8004076:	b11d      	cbz	r5, 8004080 <_printf_i+0x1a0>
 8004078:	2310      	movs	r3, #16
 800407a:	e7ab      	b.n	8003fd4 <_printf_i+0xf4>
 800407c:	4826      	ldr	r0, [pc, #152]	@ (8004118 <_printf_i+0x238>)
 800407e:	e7e9      	b.n	8004054 <_printf_i+0x174>
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	f023 0320 	bic.w	r3, r3, #32
 8004086:	6023      	str	r3, [r4, #0]
 8004088:	e7f6      	b.n	8004078 <_printf_i+0x198>
 800408a:	4616      	mov	r6, r2
 800408c:	e7bd      	b.n	800400a <_printf_i+0x12a>
 800408e:	6833      	ldr	r3, [r6, #0]
 8004090:	6825      	ldr	r5, [r4, #0]
 8004092:	1d18      	adds	r0, r3, #4
 8004094:	6961      	ldr	r1, [r4, #20]
 8004096:	6030      	str	r0, [r6, #0]
 8004098:	062e      	lsls	r6, r5, #24
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	d501      	bpl.n	80040a2 <_printf_i+0x1c2>
 800409e:	6019      	str	r1, [r3, #0]
 80040a0:	e002      	b.n	80040a8 <_printf_i+0x1c8>
 80040a2:	0668      	lsls	r0, r5, #25
 80040a4:	d5fb      	bpl.n	800409e <_printf_i+0x1be>
 80040a6:	8019      	strh	r1, [r3, #0]
 80040a8:	2300      	movs	r3, #0
 80040aa:	4616      	mov	r6, r2
 80040ac:	6123      	str	r3, [r4, #16]
 80040ae:	e7bc      	b.n	800402a <_printf_i+0x14a>
 80040b0:	6833      	ldr	r3, [r6, #0]
 80040b2:	2100      	movs	r1, #0
 80040b4:	1d1a      	adds	r2, r3, #4
 80040b6:	6032      	str	r2, [r6, #0]
 80040b8:	681e      	ldr	r6, [r3, #0]
 80040ba:	6862      	ldr	r2, [r4, #4]
 80040bc:	4630      	mov	r0, r6
 80040be:	f000 f907 	bl	80042d0 <memchr>
 80040c2:	b108      	cbz	r0, 80040c8 <_printf_i+0x1e8>
 80040c4:	1b80      	subs	r0, r0, r6
 80040c6:	6060      	str	r0, [r4, #4]
 80040c8:	6863      	ldr	r3, [r4, #4]
 80040ca:	6123      	str	r3, [r4, #16]
 80040cc:	2300      	movs	r3, #0
 80040ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040d2:	e7aa      	b.n	800402a <_printf_i+0x14a>
 80040d4:	4632      	mov	r2, r6
 80040d6:	4649      	mov	r1, r9
 80040d8:	4640      	mov	r0, r8
 80040da:	6923      	ldr	r3, [r4, #16]
 80040dc:	47d0      	blx	sl
 80040de:	3001      	adds	r0, #1
 80040e0:	d0ad      	beq.n	800403e <_printf_i+0x15e>
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	079b      	lsls	r3, r3, #30
 80040e6:	d413      	bmi.n	8004110 <_printf_i+0x230>
 80040e8:	68e0      	ldr	r0, [r4, #12]
 80040ea:	9b03      	ldr	r3, [sp, #12]
 80040ec:	4298      	cmp	r0, r3
 80040ee:	bfb8      	it	lt
 80040f0:	4618      	movlt	r0, r3
 80040f2:	e7a6      	b.n	8004042 <_printf_i+0x162>
 80040f4:	2301      	movs	r3, #1
 80040f6:	4632      	mov	r2, r6
 80040f8:	4649      	mov	r1, r9
 80040fa:	4640      	mov	r0, r8
 80040fc:	47d0      	blx	sl
 80040fe:	3001      	adds	r0, #1
 8004100:	d09d      	beq.n	800403e <_printf_i+0x15e>
 8004102:	3501      	adds	r5, #1
 8004104:	68e3      	ldr	r3, [r4, #12]
 8004106:	9903      	ldr	r1, [sp, #12]
 8004108:	1a5b      	subs	r3, r3, r1
 800410a:	42ab      	cmp	r3, r5
 800410c:	dcf2      	bgt.n	80040f4 <_printf_i+0x214>
 800410e:	e7eb      	b.n	80040e8 <_printf_i+0x208>
 8004110:	2500      	movs	r5, #0
 8004112:	f104 0619 	add.w	r6, r4, #25
 8004116:	e7f5      	b.n	8004104 <_printf_i+0x224>
 8004118:	08004615 	.word	0x08004615
 800411c:	08004626 	.word	0x08004626

08004120 <__swbuf_r>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	460e      	mov	r6, r1
 8004124:	4614      	mov	r4, r2
 8004126:	4605      	mov	r5, r0
 8004128:	b118      	cbz	r0, 8004132 <__swbuf_r+0x12>
 800412a:	6a03      	ldr	r3, [r0, #32]
 800412c:	b90b      	cbnz	r3, 8004132 <__swbuf_r+0x12>
 800412e:	f7ff fa9d 	bl	800366c <__sinit>
 8004132:	69a3      	ldr	r3, [r4, #24]
 8004134:	60a3      	str	r3, [r4, #8]
 8004136:	89a3      	ldrh	r3, [r4, #12]
 8004138:	071a      	lsls	r2, r3, #28
 800413a:	d501      	bpl.n	8004140 <__swbuf_r+0x20>
 800413c:	6923      	ldr	r3, [r4, #16]
 800413e:	b943      	cbnz	r3, 8004152 <__swbuf_r+0x32>
 8004140:	4621      	mov	r1, r4
 8004142:	4628      	mov	r0, r5
 8004144:	f000 f82a 	bl	800419c <__swsetup_r>
 8004148:	b118      	cbz	r0, 8004152 <__swbuf_r+0x32>
 800414a:	f04f 37ff 	mov.w	r7, #4294967295
 800414e:	4638      	mov	r0, r7
 8004150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	6922      	ldr	r2, [r4, #16]
 8004156:	b2f6      	uxtb	r6, r6
 8004158:	1a98      	subs	r0, r3, r2
 800415a:	6963      	ldr	r3, [r4, #20]
 800415c:	4637      	mov	r7, r6
 800415e:	4283      	cmp	r3, r0
 8004160:	dc05      	bgt.n	800416e <__swbuf_r+0x4e>
 8004162:	4621      	mov	r1, r4
 8004164:	4628      	mov	r0, r5
 8004166:	f7ff fcc9 	bl	8003afc <_fflush_r>
 800416a:	2800      	cmp	r0, #0
 800416c:	d1ed      	bne.n	800414a <__swbuf_r+0x2a>
 800416e:	68a3      	ldr	r3, [r4, #8]
 8004170:	3b01      	subs	r3, #1
 8004172:	60a3      	str	r3, [r4, #8]
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	6022      	str	r2, [r4, #0]
 800417a:	701e      	strb	r6, [r3, #0]
 800417c:	6962      	ldr	r2, [r4, #20]
 800417e:	1c43      	adds	r3, r0, #1
 8004180:	429a      	cmp	r2, r3
 8004182:	d004      	beq.n	800418e <__swbuf_r+0x6e>
 8004184:	89a3      	ldrh	r3, [r4, #12]
 8004186:	07db      	lsls	r3, r3, #31
 8004188:	d5e1      	bpl.n	800414e <__swbuf_r+0x2e>
 800418a:	2e0a      	cmp	r6, #10
 800418c:	d1df      	bne.n	800414e <__swbuf_r+0x2e>
 800418e:	4621      	mov	r1, r4
 8004190:	4628      	mov	r0, r5
 8004192:	f7ff fcb3 	bl	8003afc <_fflush_r>
 8004196:	2800      	cmp	r0, #0
 8004198:	d0d9      	beq.n	800414e <__swbuf_r+0x2e>
 800419a:	e7d6      	b.n	800414a <__swbuf_r+0x2a>

0800419c <__swsetup_r>:
 800419c:	b538      	push	{r3, r4, r5, lr}
 800419e:	4b29      	ldr	r3, [pc, #164]	@ (8004244 <__swsetup_r+0xa8>)
 80041a0:	4605      	mov	r5, r0
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	460c      	mov	r4, r1
 80041a6:	b118      	cbz	r0, 80041b0 <__swsetup_r+0x14>
 80041a8:	6a03      	ldr	r3, [r0, #32]
 80041aa:	b90b      	cbnz	r3, 80041b0 <__swsetup_r+0x14>
 80041ac:	f7ff fa5e 	bl	800366c <__sinit>
 80041b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041b4:	0719      	lsls	r1, r3, #28
 80041b6:	d422      	bmi.n	80041fe <__swsetup_r+0x62>
 80041b8:	06da      	lsls	r2, r3, #27
 80041ba:	d407      	bmi.n	80041cc <__swsetup_r+0x30>
 80041bc:	2209      	movs	r2, #9
 80041be:	602a      	str	r2, [r5, #0]
 80041c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041c4:	f04f 30ff 	mov.w	r0, #4294967295
 80041c8:	81a3      	strh	r3, [r4, #12]
 80041ca:	e033      	b.n	8004234 <__swsetup_r+0x98>
 80041cc:	0758      	lsls	r0, r3, #29
 80041ce:	d512      	bpl.n	80041f6 <__swsetup_r+0x5a>
 80041d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80041d2:	b141      	cbz	r1, 80041e6 <__swsetup_r+0x4a>
 80041d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80041d8:	4299      	cmp	r1, r3
 80041da:	d002      	beq.n	80041e2 <__swsetup_r+0x46>
 80041dc:	4628      	mov	r0, r5
 80041de:	f7ff fbc5 	bl	800396c <_free_r>
 80041e2:	2300      	movs	r3, #0
 80041e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80041e6:	89a3      	ldrh	r3, [r4, #12]
 80041e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80041ec:	81a3      	strh	r3, [r4, #12]
 80041ee:	2300      	movs	r3, #0
 80041f0:	6063      	str	r3, [r4, #4]
 80041f2:	6923      	ldr	r3, [r4, #16]
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	89a3      	ldrh	r3, [r4, #12]
 80041f8:	f043 0308 	orr.w	r3, r3, #8
 80041fc:	81a3      	strh	r3, [r4, #12]
 80041fe:	6923      	ldr	r3, [r4, #16]
 8004200:	b94b      	cbnz	r3, 8004216 <__swsetup_r+0x7a>
 8004202:	89a3      	ldrh	r3, [r4, #12]
 8004204:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800420c:	d003      	beq.n	8004216 <__swsetup_r+0x7a>
 800420e:	4621      	mov	r1, r4
 8004210:	4628      	mov	r0, r5
 8004212:	f000 f890 	bl	8004336 <__smakebuf_r>
 8004216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800421a:	f013 0201 	ands.w	r2, r3, #1
 800421e:	d00a      	beq.n	8004236 <__swsetup_r+0x9a>
 8004220:	2200      	movs	r2, #0
 8004222:	60a2      	str	r2, [r4, #8]
 8004224:	6962      	ldr	r2, [r4, #20]
 8004226:	4252      	negs	r2, r2
 8004228:	61a2      	str	r2, [r4, #24]
 800422a:	6922      	ldr	r2, [r4, #16]
 800422c:	b942      	cbnz	r2, 8004240 <__swsetup_r+0xa4>
 800422e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004232:	d1c5      	bne.n	80041c0 <__swsetup_r+0x24>
 8004234:	bd38      	pop	{r3, r4, r5, pc}
 8004236:	0799      	lsls	r1, r3, #30
 8004238:	bf58      	it	pl
 800423a:	6962      	ldrpl	r2, [r4, #20]
 800423c:	60a2      	str	r2, [r4, #8]
 800423e:	e7f4      	b.n	800422a <__swsetup_r+0x8e>
 8004240:	2000      	movs	r0, #0
 8004242:	e7f7      	b.n	8004234 <__swsetup_r+0x98>
 8004244:	20000018 	.word	0x20000018

08004248 <_raise_r>:
 8004248:	291f      	cmp	r1, #31
 800424a:	b538      	push	{r3, r4, r5, lr}
 800424c:	4605      	mov	r5, r0
 800424e:	460c      	mov	r4, r1
 8004250:	d904      	bls.n	800425c <_raise_r+0x14>
 8004252:	2316      	movs	r3, #22
 8004254:	6003      	str	r3, [r0, #0]
 8004256:	f04f 30ff 	mov.w	r0, #4294967295
 800425a:	bd38      	pop	{r3, r4, r5, pc}
 800425c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800425e:	b112      	cbz	r2, 8004266 <_raise_r+0x1e>
 8004260:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004264:	b94b      	cbnz	r3, 800427a <_raise_r+0x32>
 8004266:	4628      	mov	r0, r5
 8004268:	f000 f830 	bl	80042cc <_getpid_r>
 800426c:	4622      	mov	r2, r4
 800426e:	4601      	mov	r1, r0
 8004270:	4628      	mov	r0, r5
 8004272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004276:	f000 b817 	b.w	80042a8 <_kill_r>
 800427a:	2b01      	cmp	r3, #1
 800427c:	d00a      	beq.n	8004294 <_raise_r+0x4c>
 800427e:	1c59      	adds	r1, r3, #1
 8004280:	d103      	bne.n	800428a <_raise_r+0x42>
 8004282:	2316      	movs	r3, #22
 8004284:	6003      	str	r3, [r0, #0]
 8004286:	2001      	movs	r0, #1
 8004288:	e7e7      	b.n	800425a <_raise_r+0x12>
 800428a:	2100      	movs	r1, #0
 800428c:	4620      	mov	r0, r4
 800428e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004292:	4798      	blx	r3
 8004294:	2000      	movs	r0, #0
 8004296:	e7e0      	b.n	800425a <_raise_r+0x12>

08004298 <raise>:
 8004298:	4b02      	ldr	r3, [pc, #8]	@ (80042a4 <raise+0xc>)
 800429a:	4601      	mov	r1, r0
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	f7ff bfd3 	b.w	8004248 <_raise_r>
 80042a2:	bf00      	nop
 80042a4:	20000018 	.word	0x20000018

080042a8 <_kill_r>:
 80042a8:	b538      	push	{r3, r4, r5, lr}
 80042aa:	2300      	movs	r3, #0
 80042ac:	4d06      	ldr	r5, [pc, #24]	@ (80042c8 <_kill_r+0x20>)
 80042ae:	4604      	mov	r4, r0
 80042b0:	4608      	mov	r0, r1
 80042b2:	4611      	mov	r1, r2
 80042b4:	602b      	str	r3, [r5, #0]
 80042b6:	f7fc fac4 	bl	8000842 <_kill>
 80042ba:	1c43      	adds	r3, r0, #1
 80042bc:	d102      	bne.n	80042c4 <_kill_r+0x1c>
 80042be:	682b      	ldr	r3, [r5, #0]
 80042c0:	b103      	cbz	r3, 80042c4 <_kill_r+0x1c>
 80042c2:	6023      	str	r3, [r4, #0]
 80042c4:	bd38      	pop	{r3, r4, r5, pc}
 80042c6:	bf00      	nop
 80042c8:	200002ac 	.word	0x200002ac

080042cc <_getpid_r>:
 80042cc:	f7fc bab2 	b.w	8000834 <_getpid>

080042d0 <memchr>:
 80042d0:	4603      	mov	r3, r0
 80042d2:	b510      	push	{r4, lr}
 80042d4:	b2c9      	uxtb	r1, r1
 80042d6:	4402      	add	r2, r0
 80042d8:	4293      	cmp	r3, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	d101      	bne.n	80042e2 <memchr+0x12>
 80042de:	2000      	movs	r0, #0
 80042e0:	e003      	b.n	80042ea <memchr+0x1a>
 80042e2:	7804      	ldrb	r4, [r0, #0]
 80042e4:	3301      	adds	r3, #1
 80042e6:	428c      	cmp	r4, r1
 80042e8:	d1f6      	bne.n	80042d8 <memchr+0x8>
 80042ea:	bd10      	pop	{r4, pc}

080042ec <__swhatbuf_r>:
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	460c      	mov	r4, r1
 80042f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f4:	4615      	mov	r5, r2
 80042f6:	2900      	cmp	r1, #0
 80042f8:	461e      	mov	r6, r3
 80042fa:	b096      	sub	sp, #88	@ 0x58
 80042fc:	da0c      	bge.n	8004318 <__swhatbuf_r+0x2c>
 80042fe:	89a3      	ldrh	r3, [r4, #12]
 8004300:	2100      	movs	r1, #0
 8004302:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004306:	bf14      	ite	ne
 8004308:	2340      	movne	r3, #64	@ 0x40
 800430a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800430e:	2000      	movs	r0, #0
 8004310:	6031      	str	r1, [r6, #0]
 8004312:	602b      	str	r3, [r5, #0]
 8004314:	b016      	add	sp, #88	@ 0x58
 8004316:	bd70      	pop	{r4, r5, r6, pc}
 8004318:	466a      	mov	r2, sp
 800431a:	f000 f849 	bl	80043b0 <_fstat_r>
 800431e:	2800      	cmp	r0, #0
 8004320:	dbed      	blt.n	80042fe <__swhatbuf_r+0x12>
 8004322:	9901      	ldr	r1, [sp, #4]
 8004324:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004328:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800432c:	4259      	negs	r1, r3
 800432e:	4159      	adcs	r1, r3
 8004330:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004334:	e7eb      	b.n	800430e <__swhatbuf_r+0x22>

08004336 <__smakebuf_r>:
 8004336:	898b      	ldrh	r3, [r1, #12]
 8004338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800433a:	079d      	lsls	r5, r3, #30
 800433c:	4606      	mov	r6, r0
 800433e:	460c      	mov	r4, r1
 8004340:	d507      	bpl.n	8004352 <__smakebuf_r+0x1c>
 8004342:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004346:	6023      	str	r3, [r4, #0]
 8004348:	6123      	str	r3, [r4, #16]
 800434a:	2301      	movs	r3, #1
 800434c:	6163      	str	r3, [r4, #20]
 800434e:	b003      	add	sp, #12
 8004350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004352:	466a      	mov	r2, sp
 8004354:	ab01      	add	r3, sp, #4
 8004356:	f7ff ffc9 	bl	80042ec <__swhatbuf_r>
 800435a:	9f00      	ldr	r7, [sp, #0]
 800435c:	4605      	mov	r5, r0
 800435e:	4639      	mov	r1, r7
 8004360:	4630      	mov	r0, r6
 8004362:	f7fe ffe7 	bl	8003334 <_malloc_r>
 8004366:	b948      	cbnz	r0, 800437c <__smakebuf_r+0x46>
 8004368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800436c:	059a      	lsls	r2, r3, #22
 800436e:	d4ee      	bmi.n	800434e <__smakebuf_r+0x18>
 8004370:	f023 0303 	bic.w	r3, r3, #3
 8004374:	f043 0302 	orr.w	r3, r3, #2
 8004378:	81a3      	strh	r3, [r4, #12]
 800437a:	e7e2      	b.n	8004342 <__smakebuf_r+0xc>
 800437c:	89a3      	ldrh	r3, [r4, #12]
 800437e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004386:	81a3      	strh	r3, [r4, #12]
 8004388:	9b01      	ldr	r3, [sp, #4]
 800438a:	6020      	str	r0, [r4, #0]
 800438c:	b15b      	cbz	r3, 80043a6 <__smakebuf_r+0x70>
 800438e:	4630      	mov	r0, r6
 8004390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004394:	f000 f81e 	bl	80043d4 <_isatty_r>
 8004398:	b128      	cbz	r0, 80043a6 <__smakebuf_r+0x70>
 800439a:	89a3      	ldrh	r3, [r4, #12]
 800439c:	f023 0303 	bic.w	r3, r3, #3
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	81a3      	strh	r3, [r4, #12]
 80043a6:	89a3      	ldrh	r3, [r4, #12]
 80043a8:	431d      	orrs	r5, r3
 80043aa:	81a5      	strh	r5, [r4, #12]
 80043ac:	e7cf      	b.n	800434e <__smakebuf_r+0x18>
	...

080043b0 <_fstat_r>:
 80043b0:	b538      	push	{r3, r4, r5, lr}
 80043b2:	2300      	movs	r3, #0
 80043b4:	4d06      	ldr	r5, [pc, #24]	@ (80043d0 <_fstat_r+0x20>)
 80043b6:	4604      	mov	r4, r0
 80043b8:	4608      	mov	r0, r1
 80043ba:	4611      	mov	r1, r2
 80043bc:	602b      	str	r3, [r5, #0]
 80043be:	f7fc fa9f 	bl	8000900 <_fstat>
 80043c2:	1c43      	adds	r3, r0, #1
 80043c4:	d102      	bne.n	80043cc <_fstat_r+0x1c>
 80043c6:	682b      	ldr	r3, [r5, #0]
 80043c8:	b103      	cbz	r3, 80043cc <_fstat_r+0x1c>
 80043ca:	6023      	str	r3, [r4, #0]
 80043cc:	bd38      	pop	{r3, r4, r5, pc}
 80043ce:	bf00      	nop
 80043d0:	200002ac 	.word	0x200002ac

080043d4 <_isatty_r>:
 80043d4:	b538      	push	{r3, r4, r5, lr}
 80043d6:	2300      	movs	r3, #0
 80043d8:	4d05      	ldr	r5, [pc, #20]	@ (80043f0 <_isatty_r+0x1c>)
 80043da:	4604      	mov	r4, r0
 80043dc:	4608      	mov	r0, r1
 80043de:	602b      	str	r3, [r5, #0]
 80043e0:	f7fc fa9d 	bl	800091e <_isatty>
 80043e4:	1c43      	adds	r3, r0, #1
 80043e6:	d102      	bne.n	80043ee <_isatty_r+0x1a>
 80043e8:	682b      	ldr	r3, [r5, #0]
 80043ea:	b103      	cbz	r3, 80043ee <_isatty_r+0x1a>
 80043ec:	6023      	str	r3, [r4, #0]
 80043ee:	bd38      	pop	{r3, r4, r5, pc}
 80043f0:	200002ac 	.word	0x200002ac

080043f4 <_init>:
 80043f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f6:	bf00      	nop
 80043f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043fa:	bc08      	pop	{r3}
 80043fc:	469e      	mov	lr, r3
 80043fe:	4770      	bx	lr

08004400 <_fini>:
 8004400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004402:	bf00      	nop
 8004404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004406:	bc08      	pop	{r3}
 8004408:	469e      	mov	lr, r3
 800440a:	4770      	bx	lr
